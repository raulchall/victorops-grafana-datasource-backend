/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The results of an incident history request
    /// </summary>
    [DataContract]
    public partial class IncidentList :  IEquatable<IncidentList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentList" /> class.
        /// </summary>
        /// <param name="offset">The offset passed in the request.</param>
        /// <param name="limit">The limit value passed in the request.</param>
        /// <param name="total">The total number of incidents available for this search.</param>
        /// <param name="incidents">An array of incident objects matching the search.</param>
        public IncidentList(decimal offset = default(decimal), decimal limit = default(decimal), decimal total = default(decimal), List<IncidentInfo> incidents = default(List<IncidentInfo>))
        {
            this.Offset = offset;
            this.Limit = limit;
            this.Total = total;
            this.Incidents = incidents;
        }
        
        /// <summary>
        /// The offset passed in the request
        /// </summary>
        /// <value>The offset passed in the request</value>
        [DataMember(Name="offset", EmitDefaultValue=false)]
        public decimal Offset { get; set; }

        /// <summary>
        /// The limit value passed in the request
        /// </summary>
        /// <value>The limit value passed in the request</value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public decimal Limit { get; set; }

        /// <summary>
        /// The total number of incidents available for this search
        /// </summary>
        /// <value>The total number of incidents available for this search</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public decimal Total { get; set; }

        /// <summary>
        /// An array of incident objects matching the search
        /// </summary>
        /// <value>An array of incident objects matching the search</value>
        [DataMember(Name="incidents", EmitDefaultValue=false)]
        public List<IncidentInfo> Incidents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IncidentList {\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Incidents: ").Append(Incidents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncidentList);
        }

        /// <summary>
        /// Returns true if IncidentList instances are equal
        /// </summary>
        /// <param name="input">Instance of IncidentList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncidentList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.Incidents == input.Incidents ||
                    this.Incidents != null &&
                    input.Incidents != null &&
                    this.Incidents.SequenceEqual(input.Incidents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Offset.GetHashCode();
                hashCode = hashCode * 59 + this.Limit.GetHashCode();
                hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.Incidents != null)
                    hashCode = hashCode * 59 + this.Incidents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
