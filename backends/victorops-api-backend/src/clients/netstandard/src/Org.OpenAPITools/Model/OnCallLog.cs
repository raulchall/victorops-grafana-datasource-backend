/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OnCallLog
    /// </summary>
    [DataContract]
    public partial class OnCallLog :  IEquatable<OnCallLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OnCallLog" /> class.
        /// </summary>
        /// <param name="teamSlug">teamSlug.</param>
        /// <param name="start">start.</param>
        /// <param name="end">end.</param>
        /// <param name="userLogs">userLogs.</param>
        public OnCallLog(string teamSlug = default(string), DateTime start = default(DateTime), DateTime end = default(DateTime), List<UserLog> userLogs = default(List<UserLog>))
        {
            this.TeamSlug = teamSlug;
            this.Start = start;
            this.End = end;
            this.UserLogs = userLogs;
        }
        
        /// <summary>
        /// Gets or Sets TeamSlug
        /// </summary>
        [DataMember(Name="teamSlug", EmitDefaultValue=false)]
        public string TeamSlug { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public DateTime Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public DateTime End { get; set; }

        /// <summary>
        /// Gets or Sets UserLogs
        /// </summary>
        [DataMember(Name="userLogs", EmitDefaultValue=false)]
        public List<UserLog> UserLogs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OnCallLog {\n");
            sb.Append("  TeamSlug: ").Append(TeamSlug).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  UserLogs: ").Append(UserLogs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OnCallLog);
        }

        /// <summary>
        /// Returns true if OnCallLog instances are equal
        /// </summary>
        /// <param name="input">Instance of OnCallLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OnCallLog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TeamSlug == input.TeamSlug ||
                    (this.TeamSlug != null &&
                    this.TeamSlug.Equals(input.TeamSlug))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.UserLogs == input.UserLogs ||
                    this.UserLogs != null &&
                    input.UserLogs != null &&
                    this.UserLogs.SequenceEqual(input.UserLogs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TeamSlug != null)
                    hashCode = hashCode * 59 + this.TeamSlug.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.UserLogs != null)
                    hashCode = hashCode * 59 + this.UserLogs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
