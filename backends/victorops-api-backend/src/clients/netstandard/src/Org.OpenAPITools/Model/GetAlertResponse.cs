/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Alert details. All fields should be considered optional.
    /// </summary>
    [DataContract]
    public partial class GetAlertResponse :  IEquatable<GetAlertResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAlertResponse" /> class.
        /// </summary>
        /// <param name="messageType">The type of alert; INFO, WARNING, ACKNOWLEDGEMENT, CRITICAL, RECOVERY .</param>
        /// <param name="entityId">Identifies the entity (host, service, etc.) this alert was about. .</param>
        /// <param name="timestamp">Timestamp of the alert in seconds since epoch..</param>
        /// <param name="stateStartTime">The time this entity entered its current state (seconds since epoch)..</param>
        /// <param name="stateMessage">Any additional status information from the alert item..</param>
        /// <param name="monitoringTool">The name of the monitoring system software (eg. nagios, icinga, sensu, etc.).</param>
        /// <param name="entityDisplayName">Used within VictorOps to display a human-readable name for the entity..</param>
        /// <param name="ackMsg">A user entered comment for the acknowledgment..</param>
        /// <param name="ackAuthor">The user that acknowledged the incident..</param>
        /// <param name="raw">The full, raw alert details JSON string (i.e. parse the string into a JSON object) .</param>
        public GetAlertResponse(string messageType = default(string), string entityId = default(string), decimal timestamp = default(decimal), decimal stateStartTime = default(decimal), string stateMessage = default(string), string monitoringTool = default(string), string entityDisplayName = default(string), string ackMsg = default(string), string ackAuthor = default(string), string raw = default(string))
        {
            this.MessageType = messageType;
            this.EntityId = entityId;
            this.Timestamp = timestamp;
            this.StateStartTime = stateStartTime;
            this.StateMessage = stateMessage;
            this.MonitoringTool = monitoringTool;
            this.EntityDisplayName = entityDisplayName;
            this.AckMsg = ackMsg;
            this.AckAuthor = ackAuthor;
            this.Raw = raw;
        }
        
        /// <summary>
        /// The type of alert; INFO, WARNING, ACKNOWLEDGEMENT, CRITICAL, RECOVERY 
        /// </summary>
        /// <value>The type of alert; INFO, WARNING, ACKNOWLEDGEMENT, CRITICAL, RECOVERY </value>
        [DataMember(Name="messageType", EmitDefaultValue=false)]
        public string MessageType { get; set; }

        /// <summary>
        /// Identifies the entity (host, service, etc.) this alert was about. 
        /// </summary>
        /// <value>Identifies the entity (host, service, etc.) this alert was about. </value>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public string EntityId { get; set; }

        /// <summary>
        /// Timestamp of the alert in seconds since epoch.
        /// </summary>
        /// <value>Timestamp of the alert in seconds since epoch.</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public decimal Timestamp { get; set; }

        /// <summary>
        /// The time this entity entered its current state (seconds since epoch).
        /// </summary>
        /// <value>The time this entity entered its current state (seconds since epoch).</value>
        [DataMember(Name="stateStartTime", EmitDefaultValue=false)]
        public decimal StateStartTime { get; set; }

        /// <summary>
        /// Any additional status information from the alert item.
        /// </summary>
        /// <value>Any additional status information from the alert item.</value>
        [DataMember(Name="stateMessage", EmitDefaultValue=false)]
        public string StateMessage { get; set; }

        /// <summary>
        /// The name of the monitoring system software (eg. nagios, icinga, sensu, etc.)
        /// </summary>
        /// <value>The name of the monitoring system software (eg. nagios, icinga, sensu, etc.)</value>
        [DataMember(Name="monitoringTool", EmitDefaultValue=false)]
        public string MonitoringTool { get; set; }

        /// <summary>
        /// Used within VictorOps to display a human-readable name for the entity.
        /// </summary>
        /// <value>Used within VictorOps to display a human-readable name for the entity.</value>
        [DataMember(Name="entityDisplayName", EmitDefaultValue=false)]
        public string EntityDisplayName { get; set; }

        /// <summary>
        /// A user entered comment for the acknowledgment.
        /// </summary>
        /// <value>A user entered comment for the acknowledgment.</value>
        [DataMember(Name="ackMsg", EmitDefaultValue=false)]
        public string AckMsg { get; set; }

        /// <summary>
        /// The user that acknowledged the incident.
        /// </summary>
        /// <value>The user that acknowledged the incident.</value>
        [DataMember(Name="ackAuthor", EmitDefaultValue=false)]
        public string AckAuthor { get; set; }

        /// <summary>
        /// The full, raw alert details JSON string (i.e. parse the string into a JSON object) 
        /// </summary>
        /// <value>The full, raw alert details JSON string (i.e. parse the string into a JSON object) </value>
        [DataMember(Name="raw", EmitDefaultValue=false)]
        public string Raw { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetAlertResponse {\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  StateStartTime: ").Append(StateStartTime).Append("\n");
            sb.Append("  StateMessage: ").Append(StateMessage).Append("\n");
            sb.Append("  MonitoringTool: ").Append(MonitoringTool).Append("\n");
            sb.Append("  EntityDisplayName: ").Append(EntityDisplayName).Append("\n");
            sb.Append("  AckMsg: ").Append(AckMsg).Append("\n");
            sb.Append("  AckAuthor: ").Append(AckAuthor).Append("\n");
            sb.Append("  Raw: ").Append(Raw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAlertResponse);
        }

        /// <summary>
        /// Returns true if GetAlertResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAlertResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAlertResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MessageType == input.MessageType ||
                    (this.MessageType != null &&
                    this.MessageType.Equals(input.MessageType))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    this.Timestamp.Equals(input.Timestamp)
                ) && 
                (
                    this.StateStartTime == input.StateStartTime ||
                    this.StateStartTime.Equals(input.StateStartTime)
                ) && 
                (
                    this.StateMessage == input.StateMessage ||
                    (this.StateMessage != null &&
                    this.StateMessage.Equals(input.StateMessage))
                ) && 
                (
                    this.MonitoringTool == input.MonitoringTool ||
                    (this.MonitoringTool != null &&
                    this.MonitoringTool.Equals(input.MonitoringTool))
                ) && 
                (
                    this.EntityDisplayName == input.EntityDisplayName ||
                    (this.EntityDisplayName != null &&
                    this.EntityDisplayName.Equals(input.EntityDisplayName))
                ) && 
                (
                    this.AckMsg == input.AckMsg ||
                    (this.AckMsg != null &&
                    this.AckMsg.Equals(input.AckMsg))
                ) && 
                (
                    this.AckAuthor == input.AckAuthor ||
                    (this.AckAuthor != null &&
                    this.AckAuthor.Equals(input.AckAuthor))
                ) && 
                (
                    this.Raw == input.Raw ||
                    (this.Raw != null &&
                    this.Raw.Equals(input.Raw))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MessageType != null)
                    hashCode = hashCode * 59 + this.MessageType.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                hashCode = hashCode * 59 + this.StateStartTime.GetHashCode();
                if (this.StateMessage != null)
                    hashCode = hashCode * 59 + this.StateMessage.GetHashCode();
                if (this.MonitoringTool != null)
                    hashCode = hashCode * 59 + this.MonitoringTool.GetHashCode();
                if (this.EntityDisplayName != null)
                    hashCode = hashCode * 59 + this.EntityDisplayName.GetHashCode();
                if (this.AckMsg != null)
                    hashCode = hashCode * 59 + this.AckMsg.GetHashCode();
                if (this.AckAuthor != null)
                    hashCode = hashCode * 59 + this.AckAuthor.GetHashCode();
                if (this.Raw != null)
                    hashCode = hashCode * 59 + this.Raw.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
