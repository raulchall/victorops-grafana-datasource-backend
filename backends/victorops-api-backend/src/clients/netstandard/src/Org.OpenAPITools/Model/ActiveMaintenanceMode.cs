/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ActiveMaintenanceMode
    /// </summary>
    [DataContract]
    public partial class ActiveMaintenanceMode :  IEquatable<ActiveMaintenanceMode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveMaintenanceMode" /> class.
        /// </summary>
        /// <param name="instanceId">external friendly unique id for maintenance mode.</param>
        /// <param name="startedBy">username of the user that started maintenance mode.</param>
        /// <param name="startedAt">millis from epoch marking the start time.</param>
        /// <param name="targets">targets.</param>
        /// <param name="isGlobal">whether this instance is a global maintenance mode or for specific routing keys.</param>
        public ActiveMaintenanceMode(string instanceId = default(string), string startedBy = default(string), decimal startedAt = default(decimal), List<MaintenanceModeTarget> targets = default(List<MaintenanceModeTarget>), bool isGlobal = default(bool))
        {
            this.InstanceId = instanceId;
            this.StartedBy = startedBy;
            this.StartedAt = startedAt;
            this.Targets = targets;
            this.IsGlobal = isGlobal;
        }
        
        /// <summary>
        /// external friendly unique id for maintenance mode
        /// </summary>
        /// <value>external friendly unique id for maintenance mode</value>
        [DataMember(Name="instanceId", EmitDefaultValue=false)]
        public string InstanceId { get; set; }

        /// <summary>
        /// username of the user that started maintenance mode
        /// </summary>
        /// <value>username of the user that started maintenance mode</value>
        [DataMember(Name="startedBy", EmitDefaultValue=false)]
        public string StartedBy { get; set; }

        /// <summary>
        /// millis from epoch marking the start time
        /// </summary>
        /// <value>millis from epoch marking the start time</value>
        [DataMember(Name="startedAt", EmitDefaultValue=false)]
        public decimal StartedAt { get; set; }

        /// <summary>
        /// Gets or Sets Targets
        /// </summary>
        [DataMember(Name="targets", EmitDefaultValue=false)]
        public List<MaintenanceModeTarget> Targets { get; set; }

        /// <summary>
        /// whether this instance is a global maintenance mode or for specific routing keys
        /// </summary>
        /// <value>whether this instance is a global maintenance mode or for specific routing keys</value>
        [DataMember(Name="isGlobal", EmitDefaultValue=false)]
        public bool IsGlobal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActiveMaintenanceMode {\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  StartedBy: ").Append(StartedBy).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("  IsGlobal: ").Append(IsGlobal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActiveMaintenanceMode);
        }

        /// <summary>
        /// Returns true if ActiveMaintenanceMode instances are equal
        /// </summary>
        /// <param name="input">Instance of ActiveMaintenanceMode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActiveMaintenanceMode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) && 
                (
                    this.StartedBy == input.StartedBy ||
                    (this.StartedBy != null &&
                    this.StartedBy.Equals(input.StartedBy))
                ) && 
                (
                    this.StartedAt == input.StartedAt ||
                    this.StartedAt.Equals(input.StartedAt)
                ) && 
                (
                    this.Targets == input.Targets ||
                    this.Targets != null &&
                    input.Targets != null &&
                    this.Targets.SequenceEqual(input.Targets)
                ) && 
                (
                    this.IsGlobal == input.IsGlobal ||
                    this.IsGlobal.Equals(input.IsGlobal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstanceId != null)
                    hashCode = hashCode * 59 + this.InstanceId.GetHashCode();
                if (this.StartedBy != null)
                    hashCode = hashCode * 59 + this.StartedBy.GetHashCode();
                hashCode = hashCode * 59 + this.StartedAt.GetHashCode();
                if (this.Targets != null)
                    hashCode = hashCode * 59 + this.Targets.GetHashCode();
                hashCode = hashCode * 59 + this.IsGlobal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
