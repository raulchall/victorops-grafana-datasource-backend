/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OnCallEntry
    /// </summary>
    [DataContract]
    public partial class OnCallEntry :  IEquatable<OnCallEntry>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets OnCallType
        /// </summary>
        [DataMember(Name="onCallType", EmitDefaultValue=false)]
        public OnCallType OnCallType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OnCallEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OnCallEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OnCallEntry" /> class.
        /// </summary>
        /// <param name="onCallUser">onCallUser.</param>
        /// <param name="overrideOnCallUser">overrideOnCallUser.</param>
        /// <param name="onCallType">onCallType (required).</param>
        /// <param name="rotationName">rotationName.</param>
        /// <param name="shiftName">shiftName.</param>
        /// <param name="shiftRoll">The shift roll time (ISO 8601).</param>
        /// <param name="rolls">rolls (required).</param>
        public OnCallEntry(User onCallUser = default(User), User overrideOnCallUser = default(User), OnCallType onCallType = default(OnCallType), string rotationName = default(string), string shiftName = default(string), string shiftRoll = default(string), List<OnCallRoll> rolls = default(List<OnCallRoll>))
        {
            this.OnCallType = onCallType;
            // to ensure "rolls" is required (not null)
            if (rolls == null)
            {
                throw new InvalidDataException("rolls is a required property for OnCallEntry and cannot be null");
            }
            else
            {
                this.Rolls = rolls;
            }

            this.OnCallUser = onCallUser;
            this.OverrideOnCallUser = overrideOnCallUser;
            this.RotationName = rotationName;
            this.ShiftName = shiftName;
            this.ShiftRoll = shiftRoll;
        }
        
        /// <summary>
        /// Gets or Sets OnCallUser
        /// </summary>
        [DataMember(Name="onCallUser", EmitDefaultValue=false)]
        public User OnCallUser { get; set; }

        /// <summary>
        /// Gets or Sets OverrideOnCallUser
        /// </summary>
        [DataMember(Name="overrideOnCallUser", EmitDefaultValue=false)]
        public User OverrideOnCallUser { get; set; }

        /// <summary>
        /// Gets or Sets RotationName
        /// </summary>
        [DataMember(Name="rotationName", EmitDefaultValue=false)]
        public string RotationName { get; set; }

        /// <summary>
        /// Gets or Sets ShiftName
        /// </summary>
        [DataMember(Name="shiftName", EmitDefaultValue=false)]
        public string ShiftName { get; set; }

        /// <summary>
        /// The shift roll time (ISO 8601)
        /// </summary>
        /// <value>The shift roll time (ISO 8601)</value>
        [DataMember(Name="shiftRoll", EmitDefaultValue=false)]
        public string ShiftRoll { get; set; }

        /// <summary>
        /// Gets or Sets Rolls
        /// </summary>
        [DataMember(Name="rolls", EmitDefaultValue=false)]
        public List<OnCallRoll> Rolls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OnCallEntry {\n");
            sb.Append("  OnCallUser: ").Append(OnCallUser).Append("\n");
            sb.Append("  OverrideOnCallUser: ").Append(OverrideOnCallUser).Append("\n");
            sb.Append("  OnCallType: ").Append(OnCallType).Append("\n");
            sb.Append("  RotationName: ").Append(RotationName).Append("\n");
            sb.Append("  ShiftName: ").Append(ShiftName).Append("\n");
            sb.Append("  ShiftRoll: ").Append(ShiftRoll).Append("\n");
            sb.Append("  Rolls: ").Append(Rolls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OnCallEntry);
        }

        /// <summary>
        /// Returns true if OnCallEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of OnCallEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OnCallEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OnCallUser == input.OnCallUser ||
                    (this.OnCallUser != null &&
                    this.OnCallUser.Equals(input.OnCallUser))
                ) && 
                (
                    this.OverrideOnCallUser == input.OverrideOnCallUser ||
                    (this.OverrideOnCallUser != null &&
                    this.OverrideOnCallUser.Equals(input.OverrideOnCallUser))
                ) && 
                (
                    this.OnCallType == input.OnCallType ||
                    this.OnCallType.Equals(input.OnCallType)
                ) && 
                (
                    this.RotationName == input.RotationName ||
                    (this.RotationName != null &&
                    this.RotationName.Equals(input.RotationName))
                ) && 
                (
                    this.ShiftName == input.ShiftName ||
                    (this.ShiftName != null &&
                    this.ShiftName.Equals(input.ShiftName))
                ) && 
                (
                    this.ShiftRoll == input.ShiftRoll ||
                    (this.ShiftRoll != null &&
                    this.ShiftRoll.Equals(input.ShiftRoll))
                ) && 
                (
                    this.Rolls == input.Rolls ||
                    this.Rolls != null &&
                    input.Rolls != null &&
                    this.Rolls.SequenceEqual(input.Rolls)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OnCallUser != null)
                    hashCode = hashCode * 59 + this.OnCallUser.GetHashCode();
                if (this.OverrideOnCallUser != null)
                    hashCode = hashCode * 59 + this.OverrideOnCallUser.GetHashCode();
                hashCode = hashCode * 59 + this.OnCallType.GetHashCode();
                if (this.RotationName != null)
                    hashCode = hashCode * 59 + this.RotationName.GetHashCode();
                if (this.ShiftName != null)
                    hashCode = hashCode * 59 + this.ShiftName.GetHashCode();
                if (this.ShiftRoll != null)
                    hashCode = hashCode * 59 + this.ShiftRoll.GetHashCode();
                if (this.Rolls != null)
                    hashCode = hashCode * 59 + this.Rolls.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
