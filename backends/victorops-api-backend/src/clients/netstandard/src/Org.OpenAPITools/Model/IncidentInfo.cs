/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Incidents contain the following fields (all should be considered optional)
    /// </summary>
    [DataContract]
    public partial class IncidentInfo :  IEquatable<IncidentInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentInfo" /> class.
        /// </summary>
        /// <param name="incidentNumber">The VictorOps incident number.</param>
        /// <param name="startTime">The time the incident started.</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;..</param>
        /// <param name="alertCount">The number of alerts received for this incident.</param>
        /// <param name="lastAlertTime">The time of the last alert received for the incident.</param>
        /// <param name="lastAlertID">The unique id of the last alert for the incident.</param>
        /// <param name="ackUserId">The VictorOps user id of the user that acknowledged the incident.</param>
        /// <param name="ackTime">The time of the last acknowledgment of the incident.</param>
        /// <param name="entityId">The unique identification of the entity being monitored that caused the incident.</param>
        /// <param name="host">The host on which the incident occurred.</param>
        /// <param name="service">The service name causing the incident (if any).</param>
        /// <param name="endTime">The time the incident ended.</param>
        /// <param name="ackUser">ackUser.</param>
        /// <param name="entityType">The type of entity causing the incident (host/service).</param>
        /// <param name="entityDispName">The display name of the entity causing the incident.</param>
        /// <param name="teams">The teams that were paged for the incident (comma separated)..</param>
        public IncidentInfo(string incidentNumber = default(string), string startTime = default(string), string currentPhase = default(string), decimal alertCount = default(decimal), string lastAlertTime = default(string), string lastAlertID = default(string), string ackUserId = default(string), string ackTime = default(string), string entityId = default(string), string host = default(string), string service = default(string), string endTime = default(string), AckUser ackUser = default(AckUser), string entityType = default(string), string entityDispName = default(string), string teams = default(string))
        {
            this.IncidentNumber = incidentNumber;
            this.StartTime = startTime;
            this.CurrentPhase = currentPhase;
            this.AlertCount = alertCount;
            this.LastAlertTime = lastAlertTime;
            this.LastAlertID = lastAlertID;
            this.AckUserId = ackUserId;
            this.AckTime = ackTime;
            this.EntityId = entityId;
            this.Host = host;
            this.Service = service;
            this.EndTime = endTime;
            this.AckUser = ackUser;
            this.EntityType = entityType;
            this.EntityDispName = entityDispName;
            this.Teams = teams;
        }
        
        /// <summary>
        /// The VictorOps incident number
        /// </summary>
        /// <value>The VictorOps incident number</value>
        [DataMember(Name="incidentNumber", EmitDefaultValue=false)]
        public string IncidentNumber { get; set; }

        /// <summary>
        /// The time the incident started
        /// </summary>
        /// <value>The time the incident started</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;.
        /// </summary>
        /// <value>The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;.</value>
        [DataMember(Name="currentPhase", EmitDefaultValue=false)]
        public string CurrentPhase { get; set; }

        /// <summary>
        /// The number of alerts received for this incident
        /// </summary>
        /// <value>The number of alerts received for this incident</value>
        [DataMember(Name="alertCount", EmitDefaultValue=false)]
        public decimal AlertCount { get; set; }

        /// <summary>
        /// The time of the last alert received for the incident
        /// </summary>
        /// <value>The time of the last alert received for the incident</value>
        [DataMember(Name="lastAlertTime", EmitDefaultValue=false)]
        public string LastAlertTime { get; set; }

        /// <summary>
        /// The unique id of the last alert for the incident
        /// </summary>
        /// <value>The unique id of the last alert for the incident</value>
        [DataMember(Name="lastAlertID", EmitDefaultValue=false)]
        public string LastAlertID { get; set; }

        /// <summary>
        /// The VictorOps user id of the user that acknowledged the incident
        /// </summary>
        /// <value>The VictorOps user id of the user that acknowledged the incident</value>
        [DataMember(Name="ackUserId", EmitDefaultValue=false)]
        public string AckUserId { get; set; }

        /// <summary>
        /// The time of the last acknowledgment of the incident
        /// </summary>
        /// <value>The time of the last acknowledgment of the incident</value>
        [DataMember(Name="ackTime", EmitDefaultValue=false)]
        public string AckTime { get; set; }

        /// <summary>
        /// The unique identification of the entity being monitored that caused the incident
        /// </summary>
        /// <value>The unique identification of the entity being monitored that caused the incident</value>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public string EntityId { get; set; }

        /// <summary>
        /// The host on which the incident occurred
        /// </summary>
        /// <value>The host on which the incident occurred</value>
        [DataMember(Name="host", EmitDefaultValue=false)]
        public string Host { get; set; }

        /// <summary>
        /// The service name causing the incident (if any)
        /// </summary>
        /// <value>The service name causing the incident (if any)</value>
        [DataMember(Name="service", EmitDefaultValue=false)]
        public string Service { get; set; }

        /// <summary>
        /// The time the incident ended
        /// </summary>
        /// <value>The time the incident ended</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// Gets or Sets AckUser
        /// </summary>
        [DataMember(Name="ackUser", EmitDefaultValue=false)]
        public AckUser AckUser { get; set; }

        /// <summary>
        /// The type of entity causing the incident (host/service)
        /// </summary>
        /// <value>The type of entity causing the incident (host/service)</value>
        [DataMember(Name="entityType", EmitDefaultValue=false)]
        public string EntityType { get; set; }

        /// <summary>
        /// The display name of the entity causing the incident
        /// </summary>
        /// <value>The display name of the entity causing the incident</value>
        [DataMember(Name="entityDispName", EmitDefaultValue=false)]
        public string EntityDispName { get; set; }

        /// <summary>
        /// The teams that were paged for the incident (comma separated).
        /// </summary>
        /// <value>The teams that were paged for the incident (comma separated).</value>
        [DataMember(Name="teams", EmitDefaultValue=false)]
        public string Teams { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IncidentInfo {\n");
            sb.Append("  IncidentNumber: ").Append(IncidentNumber).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  CurrentPhase: ").Append(CurrentPhase).Append("\n");
            sb.Append("  AlertCount: ").Append(AlertCount).Append("\n");
            sb.Append("  LastAlertTime: ").Append(LastAlertTime).Append("\n");
            sb.Append("  LastAlertID: ").Append(LastAlertID).Append("\n");
            sb.Append("  AckUserId: ").Append(AckUserId).Append("\n");
            sb.Append("  AckTime: ").Append(AckTime).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  AckUser: ").Append(AckUser).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntityDispName: ").Append(EntityDispName).Append("\n");
            sb.Append("  Teams: ").Append(Teams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncidentInfo);
        }

        /// <summary>
        /// Returns true if IncidentInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of IncidentInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncidentInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IncidentNumber == input.IncidentNumber ||
                    (this.IncidentNumber != null &&
                    this.IncidentNumber.Equals(input.IncidentNumber))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.CurrentPhase == input.CurrentPhase ||
                    (this.CurrentPhase != null &&
                    this.CurrentPhase.Equals(input.CurrentPhase))
                ) && 
                (
                    this.AlertCount == input.AlertCount ||
                    this.AlertCount.Equals(input.AlertCount)
                ) && 
                (
                    this.LastAlertTime == input.LastAlertTime ||
                    (this.LastAlertTime != null &&
                    this.LastAlertTime.Equals(input.LastAlertTime))
                ) && 
                (
                    this.LastAlertID == input.LastAlertID ||
                    (this.LastAlertID != null &&
                    this.LastAlertID.Equals(input.LastAlertID))
                ) && 
                (
                    this.AckUserId == input.AckUserId ||
                    (this.AckUserId != null &&
                    this.AckUserId.Equals(input.AckUserId))
                ) && 
                (
                    this.AckTime == input.AckTime ||
                    (this.AckTime != null &&
                    this.AckTime.Equals(input.AckTime))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.AckUser == input.AckUser ||
                    (this.AckUser != null &&
                    this.AckUser.Equals(input.AckUser))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.EntityDispName == input.EntityDispName ||
                    (this.EntityDispName != null &&
                    this.EntityDispName.Equals(input.EntityDispName))
                ) && 
                (
                    this.Teams == input.Teams ||
                    (this.Teams != null &&
                    this.Teams.Equals(input.Teams))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IncidentNumber != null)
                    hashCode = hashCode * 59 + this.IncidentNumber.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.CurrentPhase != null)
                    hashCode = hashCode * 59 + this.CurrentPhase.GetHashCode();
                hashCode = hashCode * 59 + this.AlertCount.GetHashCode();
                if (this.LastAlertTime != null)
                    hashCode = hashCode * 59 + this.LastAlertTime.GetHashCode();
                if (this.LastAlertID != null)
                    hashCode = hashCode * 59 + this.LastAlertID.GetHashCode();
                if (this.AckUserId != null)
                    hashCode = hashCode * 59 + this.AckUserId.GetHashCode();
                if (this.AckTime != null)
                    hashCode = hashCode * 59 + this.AckTime.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                if (this.Service != null)
                    hashCode = hashCode * 59 + this.Service.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.AckUser != null)
                    hashCode = hashCode * 59 + this.AckUser.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.EntityDispName != null)
                    hashCode = hashCode * 59 + this.EntityDispName.GetHashCode();
                if (this.Teams != null)
                    hashCode = hashCode * 59 + this.Teams.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
