/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonalPagingPolicyValuesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the available contact types
        /// </summary>
        /// <remarks>
        /// Get the available contact types  description: \&quot;Email Address\&quot;, type: \&quot;email\&quot; description: \&quot;Phone Number\&quot;, type: \&quot;phone\&quot;  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 ApiPublicV1PoliciesTypesContactsGet (string xVOApiId, string xVOApiKey);

        /// <summary>
        /// Get the available contact types
        /// </summary>
        /// <remarks>
        /// Get the available contact types  description: \&quot;Email Address\&quot;, type: \&quot;email\&quot; description: \&quot;Phone Number\&quot;, type: \&quot;phone\&quot;  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> ApiPublicV1PoliciesTypesContactsGetWithHttpInfo (string xVOApiId, string xVOApiKey);
        /// <summary>
        /// Get the available notification types
        /// </summary>
        /// <remarks>
        /// Get the available notification types  description: \&quot;Send a push notification to all my devices\&quot;, type: \&quot;push\&quot; description: \&quot;Send an email to an email address\&quot;, type: \&quot;email\&quot; description: \&quot;Send an SMS to a phone number\&quot;, type: \&quot;sms\&quot; description: \&quot;Make a phone call to a phone number\&quot;, type: \&quot;phone\&quot;  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 ApiPublicV1PoliciesTypesNotificationsGet (string xVOApiId, string xVOApiKey);

        /// <summary>
        /// Get the available notification types
        /// </summary>
        /// <remarks>
        /// Get the available notification types  description: \&quot;Send a push notification to all my devices\&quot;, type: \&quot;push\&quot; description: \&quot;Send an email to an email address\&quot;, type: \&quot;email\&quot; description: \&quot;Send an SMS to a phone number\&quot;, type: \&quot;sms\&quot; description: \&quot;Make a phone call to a phone number\&quot;, type: \&quot;phone\&quot;  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> ApiPublicV1PoliciesTypesNotificationsGetWithHttpInfo (string xVOApiId, string xVOApiKey);
        /// <summary>
        /// Get the available timeout values
        /// </summary>
        /// <remarks>
        /// Get the available timeout values  description: \&quot;If still unacked after 1 minute\&quot;, type: 1 description: \&quot;If still unacked after 5 minutes\&quot;, type: 5 description: \&quot;If still unacked after 10 minutes\&quot;, type: 10 description: \&quot;If still unacked after 15 minutes\&quot;, type: 15 description: \&quot;If still unacked after 20 minutes\&quot;, type: 20 description: \&quot;If still unacked after 25 minutes\&quot;, type: 25 description: \&quot;If still unacked after 30 minutes\&quot;, type: 30 description: \&quot;If still unacked after 45 minutes\&quot;, type: 45 description: \&quot;If still unacked after 60 minutes\&quot;, type: 60  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 ApiPublicV1PoliciesTypesTimeoutsGet (string xVOApiId, string xVOApiKey);

        /// <summary>
        /// Get the available timeout values
        /// </summary>
        /// <remarks>
        /// Get the available timeout values  description: \&quot;If still unacked after 1 minute\&quot;, type: 1 description: \&quot;If still unacked after 5 minutes\&quot;, type: 5 description: \&quot;If still unacked after 10 minutes\&quot;, type: 10 description: \&quot;If still unacked after 15 minutes\&quot;, type: 15 description: \&quot;If still unacked after 20 minutes\&quot;, type: 20 description: \&quot;If still unacked after 25 minutes\&quot;, type: 25 description: \&quot;If still unacked after 30 minutes\&quot;, type: 30 description: \&quot;If still unacked after 45 minutes\&quot;, type: 45 description: \&quot;If still unacked after 60 minutes\&quot;, type: 60  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> ApiPublicV1PoliciesTypesTimeoutsGetWithHttpInfo (string xVOApiId, string xVOApiKey);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonalPagingPolicyValuesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get the available contact types
        /// </summary>
        /// <remarks>
        /// Get the available contact types  description: \&quot;Email Address\&quot;, type: \&quot;email\&quot; description: \&quot;Phone Number\&quot;, type: \&quot;phone\&quot;  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> ApiPublicV1PoliciesTypesContactsGetAsync (string xVOApiId, string xVOApiKey);

        /// <summary>
        /// Get the available contact types
        /// </summary>
        /// <remarks>
        /// Get the available contact types  description: \&quot;Email Address\&quot;, type: \&quot;email\&quot; description: \&quot;Phone Number\&quot;, type: \&quot;phone\&quot;  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> ApiPublicV1PoliciesTypesContactsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey);
        /// <summary>
        /// Get the available notification types
        /// </summary>
        /// <remarks>
        /// Get the available notification types  description: \&quot;Send a push notification to all my devices\&quot;, type: \&quot;push\&quot; description: \&quot;Send an email to an email address\&quot;, type: \&quot;email\&quot; description: \&quot;Send an SMS to a phone number\&quot;, type: \&quot;sms\&quot; description: \&quot;Make a phone call to a phone number\&quot;, type: \&quot;phone\&quot;  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> ApiPublicV1PoliciesTypesNotificationsGetAsync (string xVOApiId, string xVOApiKey);

        /// <summary>
        /// Get the available notification types
        /// </summary>
        /// <remarks>
        /// Get the available notification types  description: \&quot;Send a push notification to all my devices\&quot;, type: \&quot;push\&quot; description: \&quot;Send an email to an email address\&quot;, type: \&quot;email\&quot; description: \&quot;Send an SMS to a phone number\&quot;, type: \&quot;sms\&quot; description: \&quot;Make a phone call to a phone number\&quot;, type: \&quot;phone\&quot;  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> ApiPublicV1PoliciesTypesNotificationsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey);
        /// <summary>
        /// Get the available timeout values
        /// </summary>
        /// <remarks>
        /// Get the available timeout values  description: \&quot;If still unacked after 1 minute\&quot;, type: 1 description: \&quot;If still unacked after 5 minutes\&quot;, type: 5 description: \&quot;If still unacked after 10 minutes\&quot;, type: 10 description: \&quot;If still unacked after 15 minutes\&quot;, type: 15 description: \&quot;If still unacked after 20 minutes\&quot;, type: 20 description: \&quot;If still unacked after 25 minutes\&quot;, type: 25 description: \&quot;If still unacked after 30 minutes\&quot;, type: 30 description: \&quot;If still unacked after 45 minutes\&quot;, type: 45 description: \&quot;If still unacked after 60 minutes\&quot;, type: 60  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> ApiPublicV1PoliciesTypesTimeoutsGetAsync (string xVOApiId, string xVOApiKey);

        /// <summary>
        /// Get the available timeout values
        /// </summary>
        /// <remarks>
        /// Get the available timeout values  description: \&quot;If still unacked after 1 minute\&quot;, type: 1 description: \&quot;If still unacked after 5 minutes\&quot;, type: 5 description: \&quot;If still unacked after 10 minutes\&quot;, type: 10 description: \&quot;If still unacked after 15 minutes\&quot;, type: 15 description: \&quot;If still unacked after 20 minutes\&quot;, type: 20 description: \&quot;If still unacked after 25 minutes\&quot;, type: 25 description: \&quot;If still unacked after 30 minutes\&quot;, type: 30 description: \&quot;If still unacked after 45 minutes\&quot;, type: 45 description: \&quot;If still unacked after 60 minutes\&quot;, type: 60  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> ApiPublicV1PoliciesTypesTimeoutsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonalPagingPolicyValuesApi : IPersonalPagingPolicyValuesApiSync, IPersonalPagingPolicyValuesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PersonalPagingPolicyValuesApi : IPersonalPagingPolicyValuesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalPagingPolicyValuesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonalPagingPolicyValuesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalPagingPolicyValuesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonalPagingPolicyValuesApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalPagingPolicyValuesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PersonalPagingPolicyValuesApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalPagingPolicyValuesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PersonalPagingPolicyValuesApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get the available contact types Get the available contact types  description: \&quot;Email Address\&quot;, type: \&quot;email\&quot; description: \&quot;Phone Number\&quot;, type: \&quot;phone\&quot;  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 ApiPublicV1PoliciesTypesContactsGet (string xVOApiId, string xVOApiKey)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse2001> localVarResponse = ApiPublicV1PoliciesTypesContactsGetWithHttpInfo(xVOApiId, xVOApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the available contact types Get the available contact types  description: \&quot;Email Address\&quot;, type: \&quot;email\&quot; description: \&quot;Phone Number\&quot;, type: \&quot;phone\&quot;  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public Org.OpenAPITools.Client.ApiResponse< InlineResponse2001 > ApiPublicV1PoliciesTypesContactsGetWithHttpInfo (string xVOApiId, string xVOApiKey)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling PersonalPagingPolicyValuesApi->ApiPublicV1PoliciesTypesContactsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling PersonalPagingPolicyValuesApi->ApiPublicV1PoliciesTypesContactsGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2001 >("/api-public/v1/policies/types/contacts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1PoliciesTypesContactsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the available contact types Get the available contact types  description: \&quot;Email Address\&quot;, type: \&quot;email\&quot; description: \&quot;Phone Number\&quot;, type: \&quot;phone\&quot;  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> ApiPublicV1PoliciesTypesContactsGetAsync (string xVOApiId, string xVOApiKey)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse2001> localVarResponse = await ApiPublicV1PoliciesTypesContactsGetAsyncWithHttpInfo(xVOApiId, xVOApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the available contact types Get the available contact types  description: \&quot;Email Address\&quot;, type: \&quot;email\&quot; description: \&quot;Phone Number\&quot;, type: \&quot;phone\&quot;  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InlineResponse2001>> ApiPublicV1PoliciesTypesContactsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling PersonalPagingPolicyValuesApi->ApiPublicV1PoliciesTypesContactsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling PersonalPagingPolicyValuesApi->ApiPublicV1PoliciesTypesContactsGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2001>("/api-public/v1/policies/types/contacts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1PoliciesTypesContactsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the available notification types Get the available notification types  description: \&quot;Send a push notification to all my devices\&quot;, type: \&quot;push\&quot; description: \&quot;Send an email to an email address\&quot;, type: \&quot;email\&quot; description: \&quot;Send an SMS to a phone number\&quot;, type: \&quot;sms\&quot; description: \&quot;Make a phone call to a phone number\&quot;, type: \&quot;phone\&quot;  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 ApiPublicV1PoliciesTypesNotificationsGet (string xVOApiId, string xVOApiKey)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse200> localVarResponse = ApiPublicV1PoliciesTypesNotificationsGetWithHttpInfo(xVOApiId, xVOApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the available notification types Get the available notification types  description: \&quot;Send a push notification to all my devices\&quot;, type: \&quot;push\&quot; description: \&quot;Send an email to an email address\&quot;, type: \&quot;email\&quot; description: \&quot;Send an SMS to a phone number\&quot;, type: \&quot;sms\&quot; description: \&quot;Make a phone call to a phone number\&quot;, type: \&quot;phone\&quot;  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public Org.OpenAPITools.Client.ApiResponse< InlineResponse200 > ApiPublicV1PoliciesTypesNotificationsGetWithHttpInfo (string xVOApiId, string xVOApiKey)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling PersonalPagingPolicyValuesApi->ApiPublicV1PoliciesTypesNotificationsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling PersonalPagingPolicyValuesApi->ApiPublicV1PoliciesTypesNotificationsGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse200 >("/api-public/v1/policies/types/notifications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1PoliciesTypesNotificationsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the available notification types Get the available notification types  description: \&quot;Send a push notification to all my devices\&quot;, type: \&quot;push\&quot; description: \&quot;Send an email to an email address\&quot;, type: \&quot;email\&quot; description: \&quot;Send an SMS to a phone number\&quot;, type: \&quot;sms\&quot; description: \&quot;Make a phone call to a phone number\&quot;, type: \&quot;phone\&quot;  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> ApiPublicV1PoliciesTypesNotificationsGetAsync (string xVOApiId, string xVOApiKey)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse200> localVarResponse = await ApiPublicV1PoliciesTypesNotificationsGetAsyncWithHttpInfo(xVOApiId, xVOApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the available notification types Get the available notification types  description: \&quot;Send a push notification to all my devices\&quot;, type: \&quot;push\&quot; description: \&quot;Send an email to an email address\&quot;, type: \&quot;email\&quot; description: \&quot;Send an SMS to a phone number\&quot;, type: \&quot;sms\&quot; description: \&quot;Make a phone call to a phone number\&quot;, type: \&quot;phone\&quot;  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InlineResponse200>> ApiPublicV1PoliciesTypesNotificationsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling PersonalPagingPolicyValuesApi->ApiPublicV1PoliciesTypesNotificationsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling PersonalPagingPolicyValuesApi->ApiPublicV1PoliciesTypesNotificationsGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/api-public/v1/policies/types/notifications", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1PoliciesTypesNotificationsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the available timeout values Get the available timeout values  description: \&quot;If still unacked after 1 minute\&quot;, type: 1 description: \&quot;If still unacked after 5 minutes\&quot;, type: 5 description: \&quot;If still unacked after 10 minutes\&quot;, type: 10 description: \&quot;If still unacked after 15 minutes\&quot;, type: 15 description: \&quot;If still unacked after 20 minutes\&quot;, type: 20 description: \&quot;If still unacked after 25 minutes\&quot;, type: 25 description: \&quot;If still unacked after 30 minutes\&quot;, type: 30 description: \&quot;If still unacked after 45 minutes\&quot;, type: 45 description: \&quot;If still unacked after 60 minutes\&quot;, type: 60  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 ApiPublicV1PoliciesTypesTimeoutsGet (string xVOApiId, string xVOApiKey)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse2002> localVarResponse = ApiPublicV1PoliciesTypesTimeoutsGetWithHttpInfo(xVOApiId, xVOApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the available timeout values Get the available timeout values  description: \&quot;If still unacked after 1 minute\&quot;, type: 1 description: \&quot;If still unacked after 5 minutes\&quot;, type: 5 description: \&quot;If still unacked after 10 minutes\&quot;, type: 10 description: \&quot;If still unacked after 15 minutes\&quot;, type: 15 description: \&quot;If still unacked after 20 minutes\&quot;, type: 20 description: \&quot;If still unacked after 25 minutes\&quot;, type: 25 description: \&quot;If still unacked after 30 minutes\&quot;, type: 30 description: \&quot;If still unacked after 45 minutes\&quot;, type: 45 description: \&quot;If still unacked after 60 minutes\&quot;, type: 60  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public Org.OpenAPITools.Client.ApiResponse< InlineResponse2002 > ApiPublicV1PoliciesTypesTimeoutsGetWithHttpInfo (string xVOApiId, string xVOApiKey)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling PersonalPagingPolicyValuesApi->ApiPublicV1PoliciesTypesTimeoutsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling PersonalPagingPolicyValuesApi->ApiPublicV1PoliciesTypesTimeoutsGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2002 >("/api-public/v1/policies/types/timeouts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1PoliciesTypesTimeoutsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the available timeout values Get the available timeout values  description: \&quot;If still unacked after 1 minute\&quot;, type: 1 description: \&quot;If still unacked after 5 minutes\&quot;, type: 5 description: \&quot;If still unacked after 10 minutes\&quot;, type: 10 description: \&quot;If still unacked after 15 minutes\&quot;, type: 15 description: \&quot;If still unacked after 20 minutes\&quot;, type: 20 description: \&quot;If still unacked after 25 minutes\&quot;, type: 25 description: \&quot;If still unacked after 30 minutes\&quot;, type: 30 description: \&quot;If still unacked after 45 minutes\&quot;, type: 45 description: \&quot;If still unacked after 60 minutes\&quot;, type: 60  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> ApiPublicV1PoliciesTypesTimeoutsGetAsync (string xVOApiId, string xVOApiKey)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse2002> localVarResponse = await ApiPublicV1PoliciesTypesTimeoutsGetAsyncWithHttpInfo(xVOApiId, xVOApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the available timeout values Get the available timeout values  description: \&quot;If still unacked after 1 minute\&quot;, type: 1 description: \&quot;If still unacked after 5 minutes\&quot;, type: 5 description: \&quot;If still unacked after 10 minutes\&quot;, type: 10 description: \&quot;If still unacked after 15 minutes\&quot;, type: 15 description: \&quot;If still unacked after 20 minutes\&quot;, type: 20 description: \&quot;If still unacked after 25 minutes\&quot;, type: 25 description: \&quot;If still unacked after 30 minutes\&quot;, type: 30 description: \&quot;If still unacked after 45 minutes\&quot;, type: 45 description: \&quot;If still unacked after 60 minutes\&quot;, type: 60  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InlineResponse2002>> ApiPublicV1PoliciesTypesTimeoutsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling PersonalPagingPolicyValuesApi->ApiPublicV1PoliciesTypesTimeoutsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling PersonalPagingPolicyValuesApi->ApiPublicV1PoliciesTypesTimeoutsGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2002>("/api-public/v1/policies/types/timeouts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1PoliciesTypesTimeoutsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
