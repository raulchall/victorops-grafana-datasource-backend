/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get/search incident history
        /// </summary>
        /// <remarks>
        ///  __NOTE: This call is deprecated. Please use &#x60;GET /api-reporting/v2/incidents&#x60;.__  Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="offset">The offset within the set of matching incidents (optional, default to 0.0M)</param>
        /// <param name="limit">The maximum number of matching incidents to return (100 max) (optional, default to 20.0M)</param>
        /// <param name="entityId">The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)</param>
        /// <param name="incidentNumber">The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)</param>
        /// <param name="startedAfter">Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="startedBefore">Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="host">The host involved in the incident Multiple values can be separated with commas. (optional)</param>
        /// <param name="service">The service involved in the incident (if any) Multiple values can be separated with commas. (optional)</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. (optional)</param>
        /// <returns>List&lt;IncidentList&gt;</returns>
        List<IncidentList> ApiReportingV1IncidentsGet (string xVOApiId, string xVOApiKey, decimal? offset = default(decimal?), decimal? limit = default(decimal?), string entityId = default(string), string incidentNumber = default(string), string startedAfter = default(string), string startedBefore = default(string), string host = default(string), string service = default(string), string currentPhase = default(string));

        /// <summary>
        /// Get/search incident history
        /// </summary>
        /// <remarks>
        ///  __NOTE: This call is deprecated. Please use &#x60;GET /api-reporting/v2/incidents&#x60;.__  Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="offset">The offset within the set of matching incidents (optional, default to 0.0M)</param>
        /// <param name="limit">The maximum number of matching incidents to return (100 max) (optional, default to 20.0M)</param>
        /// <param name="entityId">The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)</param>
        /// <param name="incidentNumber">The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)</param>
        /// <param name="startedAfter">Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="startedBefore">Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="host">The host involved in the incident Multiple values can be separated with commas. (optional)</param>
        /// <param name="service">The service involved in the incident (if any) Multiple values can be separated with commas. (optional)</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. (optional)</param>
        /// <returns>ApiResponse of List&lt;IncidentList&gt;</returns>
        ApiResponse<List<IncidentList>> ApiReportingV1IncidentsGetWithHttpInfo (string xVOApiId, string xVOApiKey, decimal? offset = default(decimal?), decimal? limit = default(decimal?), string entityId = default(string), string incidentNumber = default(string), string startedAfter = default(string), string startedBefore = default(string), string host = default(string), string service = default(string), string currentPhase = default(string));
        /// <summary>
        /// A list of shift changes for a team
        /// </summary>
        /// <remarks>
        /// Returns a log of user shift changes for the specified team. This is historical data, and may be up to 15 minutes behind real-time log data.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="start">Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="end">Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="userName">The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned (optional)</param>
        /// <returns>OnCallLog</returns>
        OnCallLog ApiReportingV1TeamTeamOncallLogGet (string xVOApiId, string xVOApiKey, string team, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string userName = default(string));

        /// <summary>
        /// A list of shift changes for a team
        /// </summary>
        /// <remarks>
        /// Returns a log of user shift changes for the specified team. This is historical data, and may be up to 15 minutes behind real-time log data.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="start">Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="end">Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="userName">The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned (optional)</param>
        /// <returns>ApiResponse of OnCallLog</returns>
        ApiResponse<OnCallLog> ApiReportingV1TeamTeamOncallLogGetWithHttpInfo (string xVOApiId, string xVOApiKey, string team, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string userName = default(string));
        /// <summary>
        /// Get/search incident history
        /// </summary>
        /// <remarks>
        /// Retrieve incident history for your company, searching over date ranges and with filtering options.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  Unless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="offset">The offset within the set of matching incidents (optional, default to 0.0M)</param>
        /// <param name="limit">The maximum number of matching incidents to return (100 max) (optional, default to 20.0M)</param>
        /// <param name="entityId">The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)</param>
        /// <param name="incidentNumber">The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)</param>
        /// <param name="startedAfter">Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="startedBefore">Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="host">The host involved in the incident Multiple values can be separated with commas. (optional)</param>
        /// <param name="service">The service involved in the incident (if any) Multiple values can be separated with commas. (optional)</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. By default, response contains only \&quot;resolved\&quot; incidents (optional)</param>
        /// <param name="routingKey">The original routing of the incident (optional)</param>
        /// <returns>ActiveIncidentList</returns>
        ActiveIncidentList ApiReportingV2IncidentsGet (string xVOApiId, string xVOApiKey, decimal? offset = default(decimal?), decimal? limit = default(decimal?), string entityId = default(string), string incidentNumber = default(string), string startedAfter = default(string), string startedBefore = default(string), string host = default(string), string service = default(string), string currentPhase = default(string), string routingKey = default(string));

        /// <summary>
        /// Get/search incident history
        /// </summary>
        /// <remarks>
        /// Retrieve incident history for your company, searching over date ranges and with filtering options.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  Unless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="offset">The offset within the set of matching incidents (optional, default to 0.0M)</param>
        /// <param name="limit">The maximum number of matching incidents to return (100 max) (optional, default to 20.0M)</param>
        /// <param name="entityId">The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)</param>
        /// <param name="incidentNumber">The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)</param>
        /// <param name="startedAfter">Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="startedBefore">Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="host">The host involved in the incident Multiple values can be separated with commas. (optional)</param>
        /// <param name="service">The service involved in the incident (if any) Multiple values can be separated with commas. (optional)</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. By default, response contains only \&quot;resolved\&quot; incidents (optional)</param>
        /// <param name="routingKey">The original routing of the incident (optional)</param>
        /// <returns>ApiResponse of ActiveIncidentList</returns>
        ApiResponse<ActiveIncidentList> ApiReportingV2IncidentsGetWithHttpInfo (string xVOApiId, string xVOApiKey, decimal? offset = default(decimal?), decimal? limit = default(decimal?), string entityId = default(string), string incidentNumber = default(string), string startedAfter = default(string), string startedBefore = default(string), string host = default(string), string service = default(string), string currentPhase = default(string), string routingKey = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get/search incident history
        /// </summary>
        /// <remarks>
        ///  __NOTE: This call is deprecated. Please use &#x60;GET /api-reporting/v2/incidents&#x60;.__  Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="offset">The offset within the set of matching incidents (optional, default to 0.0M)</param>
        /// <param name="limit">The maximum number of matching incidents to return (100 max) (optional, default to 20.0M)</param>
        /// <param name="entityId">The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)</param>
        /// <param name="incidentNumber">The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)</param>
        /// <param name="startedAfter">Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="startedBefore">Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="host">The host involved in the incident Multiple values can be separated with commas. (optional)</param>
        /// <param name="service">The service involved in the incident (if any) Multiple values can be separated with commas. (optional)</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. (optional)</param>
        /// <returns>Task of List&lt;IncidentList&gt;</returns>
        System.Threading.Tasks.Task<List<IncidentList>> ApiReportingV1IncidentsGetAsync (string xVOApiId, string xVOApiKey, decimal? offset = default(decimal?), decimal? limit = default(decimal?), string entityId = default(string), string incidentNumber = default(string), string startedAfter = default(string), string startedBefore = default(string), string host = default(string), string service = default(string), string currentPhase = default(string));

        /// <summary>
        /// Get/search incident history
        /// </summary>
        /// <remarks>
        ///  __NOTE: This call is deprecated. Please use &#x60;GET /api-reporting/v2/incidents&#x60;.__  Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="offset">The offset within the set of matching incidents (optional, default to 0.0M)</param>
        /// <param name="limit">The maximum number of matching incidents to return (100 max) (optional, default to 20.0M)</param>
        /// <param name="entityId">The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)</param>
        /// <param name="incidentNumber">The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)</param>
        /// <param name="startedAfter">Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="startedBefore">Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="host">The host involved in the incident Multiple values can be separated with commas. (optional)</param>
        /// <param name="service">The service involved in the incident (if any) Multiple values can be separated with commas. (optional)</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IncidentList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IncidentList>>> ApiReportingV1IncidentsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, decimal? offset = default(decimal?), decimal? limit = default(decimal?), string entityId = default(string), string incidentNumber = default(string), string startedAfter = default(string), string startedBefore = default(string), string host = default(string), string service = default(string), string currentPhase = default(string));
        /// <summary>
        /// A list of shift changes for a team
        /// </summary>
        /// <remarks>
        /// Returns a log of user shift changes for the specified team. This is historical data, and may be up to 15 minutes behind real-time log data.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="start">Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="end">Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="userName">The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned (optional)</param>
        /// <returns>Task of OnCallLog</returns>
        System.Threading.Tasks.Task<OnCallLog> ApiReportingV1TeamTeamOncallLogGetAsync (string xVOApiId, string xVOApiKey, string team, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string userName = default(string));

        /// <summary>
        /// A list of shift changes for a team
        /// </summary>
        /// <remarks>
        /// Returns a log of user shift changes for the specified team. This is historical data, and may be up to 15 minutes behind real-time log data.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="start">Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="end">Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="userName">The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned (optional)</param>
        /// <returns>Task of ApiResponse (OnCallLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnCallLog>> ApiReportingV1TeamTeamOncallLogGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string userName = default(string));
        /// <summary>
        /// Get/search incident history
        /// </summary>
        /// <remarks>
        /// Retrieve incident history for your company, searching over date ranges and with filtering options.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  Unless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="offset">The offset within the set of matching incidents (optional, default to 0.0M)</param>
        /// <param name="limit">The maximum number of matching incidents to return (100 max) (optional, default to 20.0M)</param>
        /// <param name="entityId">The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)</param>
        /// <param name="incidentNumber">The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)</param>
        /// <param name="startedAfter">Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="startedBefore">Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="host">The host involved in the incident Multiple values can be separated with commas. (optional)</param>
        /// <param name="service">The service involved in the incident (if any) Multiple values can be separated with commas. (optional)</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. By default, response contains only \&quot;resolved\&quot; incidents (optional)</param>
        /// <param name="routingKey">The original routing of the incident (optional)</param>
        /// <returns>Task of ActiveIncidentList</returns>
        System.Threading.Tasks.Task<ActiveIncidentList> ApiReportingV2IncidentsGetAsync (string xVOApiId, string xVOApiKey, decimal? offset = default(decimal?), decimal? limit = default(decimal?), string entityId = default(string), string incidentNumber = default(string), string startedAfter = default(string), string startedBefore = default(string), string host = default(string), string service = default(string), string currentPhase = default(string), string routingKey = default(string));

        /// <summary>
        /// Get/search incident history
        /// </summary>
        /// <remarks>
        /// Retrieve incident history for your company, searching over date ranges and with filtering options.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  Unless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="offset">The offset within the set of matching incidents (optional, default to 0.0M)</param>
        /// <param name="limit">The maximum number of matching incidents to return (100 max) (optional, default to 20.0M)</param>
        /// <param name="entityId">The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)</param>
        /// <param name="incidentNumber">The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)</param>
        /// <param name="startedAfter">Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="startedBefore">Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="host">The host involved in the incident Multiple values can be separated with commas. (optional)</param>
        /// <param name="service">The service involved in the incident (if any) Multiple values can be separated with commas. (optional)</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. By default, response contains only \&quot;resolved\&quot; incidents (optional)</param>
        /// <param name="routingKey">The original routing of the incident (optional)</param>
        /// <returns>Task of ApiResponse (ActiveIncidentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveIncidentList>> ApiReportingV2IncidentsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, decimal? offset = default(decimal?), decimal? limit = default(decimal?), string entityId = default(string), string incidentNumber = default(string), string startedAfter = default(string), string startedBefore = default(string), string host = default(string), string service = default(string), string currentPhase = default(string), string routingKey = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportingApi : IReportingApiSync, IReportingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportingApi : IReportingApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportingApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportingApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportingApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReportingApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get/search incident history  __NOTE: This call is deprecated. Please use &#x60;GET /api-reporting/v2/incidents&#x60;.__  Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="offset">The offset within the set of matching incidents (optional, default to 0.0M)</param>
        /// <param name="limit">The maximum number of matching incidents to return (100 max) (optional, default to 20.0M)</param>
        /// <param name="entityId">The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)</param>
        /// <param name="incidentNumber">The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)</param>
        /// <param name="startedAfter">Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="startedBefore">Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="host">The host involved in the incident Multiple values can be separated with commas. (optional)</param>
        /// <param name="service">The service involved in the incident (if any) Multiple values can be separated with commas. (optional)</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. (optional)</param>
        /// <returns>List&lt;IncidentList&gt;</returns>
        public List<IncidentList> ApiReportingV1IncidentsGet (string xVOApiId, string xVOApiKey, decimal? offset = default(decimal?), decimal? limit = default(decimal?), string entityId = default(string), string incidentNumber = default(string), string startedAfter = default(string), string startedBefore = default(string), string host = default(string), string service = default(string), string currentPhase = default(string))
        {
             Org.OpenAPITools.Client.ApiResponse<List<IncidentList>> localVarResponse = ApiReportingV1IncidentsGetWithHttpInfo(xVOApiId, xVOApiKey, offset, limit, entityId, incidentNumber, startedAfter, startedBefore, host, service, currentPhase);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get/search incident history  __NOTE: This call is deprecated. Please use &#x60;GET /api-reporting/v2/incidents&#x60;.__  Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="offset">The offset within the set of matching incidents (optional, default to 0.0M)</param>
        /// <param name="limit">The maximum number of matching incidents to return (100 max) (optional, default to 20.0M)</param>
        /// <param name="entityId">The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)</param>
        /// <param name="incidentNumber">The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)</param>
        /// <param name="startedAfter">Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="startedBefore">Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="host">The host involved in the incident Multiple values can be separated with commas. (optional)</param>
        /// <param name="service">The service involved in the incident (if any) Multiple values can be separated with commas. (optional)</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. (optional)</param>
        /// <returns>ApiResponse of List&lt;IncidentList&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse< List<IncidentList> > ApiReportingV1IncidentsGetWithHttpInfo (string xVOApiId, string xVOApiKey, decimal? offset = default(decimal?), decimal? limit = default(decimal?), string entityId = default(string), string incidentNumber = default(string), string startedAfter = default(string), string startedBefore = default(string), string host = default(string), string service = default(string), string currentPhase = default(string))
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ReportingApi->ApiReportingV1IncidentsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ReportingApi->ApiReportingV1IncidentsGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (entityId != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "entityId", entityId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (incidentNumber != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "incidentNumber", incidentNumber))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (startedAfter != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startedAfter", startedAfter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (startedBefore != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startedBefore", startedBefore))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (host != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "host", host))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (service != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "service", service))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (currentPhase != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currentPhase", currentPhase))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<IncidentList> >("/api-reporting/v1/incidents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiReportingV1IncidentsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get/search incident history  __NOTE: This call is deprecated. Please use &#x60;GET /api-reporting/v2/incidents&#x60;.__  Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="offset">The offset within the set of matching incidents (optional, default to 0.0M)</param>
        /// <param name="limit">The maximum number of matching incidents to return (100 max) (optional, default to 20.0M)</param>
        /// <param name="entityId">The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)</param>
        /// <param name="incidentNumber">The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)</param>
        /// <param name="startedAfter">Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="startedBefore">Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="host">The host involved in the incident Multiple values can be separated with commas. (optional)</param>
        /// <param name="service">The service involved in the incident (if any) Multiple values can be separated with commas. (optional)</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. (optional)</param>
        /// <returns>Task of List&lt;IncidentList&gt;</returns>
        public async System.Threading.Tasks.Task<List<IncidentList>> ApiReportingV1IncidentsGetAsync (string xVOApiId, string xVOApiKey, decimal? offset = default(decimal?), decimal? limit = default(decimal?), string entityId = default(string), string incidentNumber = default(string), string startedAfter = default(string), string startedBefore = default(string), string host = default(string), string service = default(string), string currentPhase = default(string))
        {
             Org.OpenAPITools.Client.ApiResponse<List<IncidentList>> localVarResponse = await ApiReportingV1IncidentsGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, offset, limit, entityId, incidentNumber, startedAfter, startedBefore, host, service, currentPhase);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get/search incident history  __NOTE: This call is deprecated. Please use &#x60;GET /api-reporting/v2/incidents&#x60;.__  Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="offset">The offset within the set of matching incidents (optional, default to 0.0M)</param>
        /// <param name="limit">The maximum number of matching incidents to return (100 max) (optional, default to 20.0M)</param>
        /// <param name="entityId">The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)</param>
        /// <param name="incidentNumber">The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)</param>
        /// <param name="startedAfter">Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="startedBefore">Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="host">The host involved in the incident Multiple values can be separated with commas. (optional)</param>
        /// <param name="service">The service involved in the incident (if any) Multiple values can be separated with commas. (optional)</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IncidentList&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<IncidentList>>> ApiReportingV1IncidentsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, decimal? offset = default(decimal?), decimal? limit = default(decimal?), string entityId = default(string), string incidentNumber = default(string), string startedAfter = default(string), string startedBefore = default(string), string host = default(string), string service = default(string), string currentPhase = default(string))
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ReportingApi->ApiReportingV1IncidentsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ReportingApi->ApiReportingV1IncidentsGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (offset != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (entityId != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "entityId", entityId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (incidentNumber != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "incidentNumber", incidentNumber))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (startedAfter != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startedAfter", startedAfter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (startedBefore != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startedBefore", startedBefore))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (host != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "host", host))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (service != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "service", service))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (currentPhase != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currentPhase", currentPhase))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<IncidentList>>("/api-reporting/v1/incidents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiReportingV1IncidentsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// A list of shift changes for a team Returns a log of user shift changes for the specified team. This is historical data, and may be up to 15 minutes behind real-time log data.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="start">Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="end">Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="userName">The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned (optional)</param>
        /// <returns>OnCallLog</returns>
        public OnCallLog ApiReportingV1TeamTeamOncallLogGet (string xVOApiId, string xVOApiKey, string team, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string userName = default(string))
        {
             Org.OpenAPITools.Client.ApiResponse<OnCallLog> localVarResponse = ApiReportingV1TeamTeamOncallLogGetWithHttpInfo(xVOApiId, xVOApiKey, team, start, end, userName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// A list of shift changes for a team Returns a log of user shift changes for the specified team. This is historical data, and may be up to 15 minutes behind real-time log data.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="start">Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="end">Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="userName">The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned (optional)</param>
        /// <returns>ApiResponse of OnCallLog</returns>
        public Org.OpenAPITools.Client.ApiResponse< OnCallLog > ApiReportingV1TeamTeamOncallLogGetWithHttpInfo (string xVOApiId, string xVOApiKey, string team, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string userName = default(string))
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ReportingApi->ApiReportingV1TeamTeamOncallLogGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ReportingApi->ApiReportingV1TeamTeamOncallLogGet");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling ReportingApi->ApiReportingV1TeamTeamOncallLogGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (start != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userName != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "userName", userName))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< OnCallLog >("/api-reporting/v1/team/{team}/oncall/log", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiReportingV1TeamTeamOncallLogGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// A list of shift changes for a team Returns a log of user shift changes for the specified team. This is historical data, and may be up to 15 minutes behind real-time log data.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="start">Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="end">Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="userName">The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned (optional)</param>
        /// <returns>Task of OnCallLog</returns>
        public async System.Threading.Tasks.Task<OnCallLog> ApiReportingV1TeamTeamOncallLogGetAsync (string xVOApiId, string xVOApiKey, string team, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string userName = default(string))
        {
             Org.OpenAPITools.Client.ApiResponse<OnCallLog> localVarResponse = await ApiReportingV1TeamTeamOncallLogGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, team, start, end, userName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// A list of shift changes for a team Returns a log of user shift changes for the specified team. This is historical data, and may be up to 15 minutes behind real-time log data.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="start">Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="end">Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="userName">The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned (optional)</param>
        /// <returns>Task of ApiResponse (OnCallLog)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OnCallLog>> ApiReportingV1TeamTeamOncallLogGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team, DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), string userName = default(string))
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ReportingApi->ApiReportingV1TeamTeamOncallLogGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ReportingApi->ApiReportingV1TeamTeamOncallLogGet");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling ReportingApi->ApiReportingV1TeamTeamOncallLogGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (start != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (end != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end", end))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (userName != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "userName", userName))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OnCallLog>("/api-reporting/v1/team/{team}/oncall/log", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiReportingV1TeamTeamOncallLogGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get/search incident history Retrieve incident history for your company, searching over date ranges and with filtering options.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  Unless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="offset">The offset within the set of matching incidents (optional, default to 0.0M)</param>
        /// <param name="limit">The maximum number of matching incidents to return (100 max) (optional, default to 20.0M)</param>
        /// <param name="entityId">The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)</param>
        /// <param name="incidentNumber">The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)</param>
        /// <param name="startedAfter">Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="startedBefore">Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="host">The host involved in the incident Multiple values can be separated with commas. (optional)</param>
        /// <param name="service">The service involved in the incident (if any) Multiple values can be separated with commas. (optional)</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. By default, response contains only \&quot;resolved\&quot; incidents (optional)</param>
        /// <param name="routingKey">The original routing of the incident (optional)</param>
        /// <returns>ActiveIncidentList</returns>
        public ActiveIncidentList ApiReportingV2IncidentsGet (string xVOApiId, string xVOApiKey, decimal? offset = default(decimal?), decimal? limit = default(decimal?), string entityId = default(string), string incidentNumber = default(string), string startedAfter = default(string), string startedBefore = default(string), string host = default(string), string service = default(string), string currentPhase = default(string), string routingKey = default(string))
        {
             Org.OpenAPITools.Client.ApiResponse<ActiveIncidentList> localVarResponse = ApiReportingV2IncidentsGetWithHttpInfo(xVOApiId, xVOApiKey, offset, limit, entityId, incidentNumber, startedAfter, startedBefore, host, service, currentPhase, routingKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get/search incident history Retrieve incident history for your company, searching over date ranges and with filtering options.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  Unless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="offset">The offset within the set of matching incidents (optional, default to 0.0M)</param>
        /// <param name="limit">The maximum number of matching incidents to return (100 max) (optional, default to 20.0M)</param>
        /// <param name="entityId">The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)</param>
        /// <param name="incidentNumber">The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)</param>
        /// <param name="startedAfter">Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="startedBefore">Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="host">The host involved in the incident Multiple values can be separated with commas. (optional)</param>
        /// <param name="service">The service involved in the incident (if any) Multiple values can be separated with commas. (optional)</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. By default, response contains only \&quot;resolved\&quot; incidents (optional)</param>
        /// <param name="routingKey">The original routing of the incident (optional)</param>
        /// <returns>ApiResponse of ActiveIncidentList</returns>
        public Org.OpenAPITools.Client.ApiResponse< ActiveIncidentList > ApiReportingV2IncidentsGetWithHttpInfo (string xVOApiId, string xVOApiKey, decimal? offset = default(decimal?), decimal? limit = default(decimal?), string entityId = default(string), string incidentNumber = default(string), string startedAfter = default(string), string startedBefore = default(string), string host = default(string), string service = default(string), string currentPhase = default(string), string routingKey = default(string))
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ReportingApi->ApiReportingV2IncidentsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ReportingApi->ApiReportingV2IncidentsGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (entityId != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "entityId", entityId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (incidentNumber != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "incidentNumber", incidentNumber))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (startedAfter != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startedAfter", startedAfter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (startedBefore != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startedBefore", startedBefore))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (host != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "host", host))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (service != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "service", service))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (currentPhase != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currentPhase", currentPhase))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (routingKey != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "routingKey", routingKey))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< ActiveIncidentList >("/api-reporting/v2/incidents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiReportingV2IncidentsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get/search incident history Retrieve incident history for your company, searching over date ranges and with filtering options.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  Unless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="offset">The offset within the set of matching incidents (optional, default to 0.0M)</param>
        /// <param name="limit">The maximum number of matching incidents to return (100 max) (optional, default to 20.0M)</param>
        /// <param name="entityId">The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)</param>
        /// <param name="incidentNumber">The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)</param>
        /// <param name="startedAfter">Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="startedBefore">Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="host">The host involved in the incident Multiple values can be separated with commas. (optional)</param>
        /// <param name="service">The service involved in the incident (if any) Multiple values can be separated with commas. (optional)</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. By default, response contains only \&quot;resolved\&quot; incidents (optional)</param>
        /// <param name="routingKey">The original routing of the incident (optional)</param>
        /// <returns>Task of ActiveIncidentList</returns>
        public async System.Threading.Tasks.Task<ActiveIncidentList> ApiReportingV2IncidentsGetAsync (string xVOApiId, string xVOApiKey, decimal? offset = default(decimal?), decimal? limit = default(decimal?), string entityId = default(string), string incidentNumber = default(string), string startedAfter = default(string), string startedBefore = default(string), string host = default(string), string service = default(string), string currentPhase = default(string), string routingKey = default(string))
        {
             Org.OpenAPITools.Client.ApiResponse<ActiveIncidentList> localVarResponse = await ApiReportingV2IncidentsGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, offset, limit, entityId, incidentNumber, startedAfter, startedBefore, host, service, currentPhase, routingKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get/search incident history Retrieve incident history for your company, searching over date ranges and with filtering options.  This API may be called a maximum of once a minute.  Incident requests are paginated with a offset and limit query string parameters.   The query for incidents is run and offset records are skipped, after which limit records will be returned.  The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.  Unless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.  On return, the total number of records available for that query will be returned in the payload as &#39;total&#39;. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="offset">The offset within the set of matching incidents (optional, default to 0.0M)</param>
        /// <param name="limit">The maximum number of matching incidents to return (100 max) (optional, default to 20.0M)</param>
        /// <param name="entityId">The entity ID involved  This is the unique identifier for the entity causing the incident. (optional)</param>
        /// <param name="incidentNumber">The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50  (optional)</param>
        /// <param name="startedAfter">Return incidents started after this timestamp Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="startedBefore">Find incidents started before this timestamp  Specify the timestamp in ISO8601 format (optional)</param>
        /// <param name="host">The host involved in the incident Multiple values can be separated with commas. (optional)</param>
        /// <param name="service">The service involved in the incident (if any) Multiple values can be separated with commas. (optional)</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;. Multiple values can be separated with commas. By default, response contains only \&quot;resolved\&quot; incidents (optional)</param>
        /// <param name="routingKey">The original routing of the incident (optional)</param>
        /// <returns>Task of ApiResponse (ActiveIncidentList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ActiveIncidentList>> ApiReportingV2IncidentsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, decimal? offset = default(decimal?), decimal? limit = default(decimal?), string entityId = default(string), string incidentNumber = default(string), string startedAfter = default(string), string startedBefore = default(string), string host = default(string), string service = default(string), string currentPhase = default(string), string routingKey = default(string))
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ReportingApi->ApiReportingV2IncidentsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ReportingApi->ApiReportingV2IncidentsGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (offset != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (entityId != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "entityId", entityId))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (incidentNumber != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "incidentNumber", incidentNumber))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (startedAfter != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startedAfter", startedAfter))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (startedBefore != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "startedBefore", startedBefore))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (host != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "host", host))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (service != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "service", service))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (currentPhase != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "currentPhase", currentPhase))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (routingKey != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "routingKey", routingKey))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ActiveIncidentList>("/api-reporting/v2/incidents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiReportingV2IncidentsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
