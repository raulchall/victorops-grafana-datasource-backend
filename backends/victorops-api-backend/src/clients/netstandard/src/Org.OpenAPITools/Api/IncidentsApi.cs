/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIncidentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Acknowledge an incident or list of incidents
        /// </summary>
        /// <remarks>
        /// The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>AckOrResolveResponse</returns>
        AckOrResolveResponse ApiPublicV1IncidentsAckPatch (string xVOApiId, string xVOApiKey, AckOrResolveRequest body);

        /// <summary>
        /// Acknowledge an incident or list of incidents
        /// </summary>
        /// <remarks>
        /// The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>ApiResponse of AckOrResolveResponse</returns>
        ApiResponse<AckOrResolveResponse> ApiPublicV1IncidentsAckPatchWithHttpInfo (string xVOApiId, string xVOApiKey, AckOrResolveRequest body);
        /// <summary>
        /// Acknowledge all incidents for which a user was paged.
        /// </summary>
        /// <remarks>
        /// The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>AckOrResolveResponse</returns>
        AckOrResolveResponse ApiPublicV1IncidentsByUserAckPatch (string xVOApiId, string xVOApiKey, AckOrResolveByUserRequest body);

        /// <summary>
        /// Acknowledge all incidents for which a user was paged.
        /// </summary>
        /// <remarks>
        /// The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>ApiResponse of AckOrResolveResponse</returns>
        ApiResponse<AckOrResolveResponse> ApiPublicV1IncidentsByUserAckPatchWithHttpInfo (string xVOApiId, string xVOApiKey, AckOrResolveByUserRequest body);
        /// <summary>
        /// Resolve all incidents for which a user was paged.
        /// </summary>
        /// <remarks>
        /// The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>AckOrResolveResponse</returns>
        AckOrResolveResponse ApiPublicV1IncidentsByUserResolvePatch (string xVOApiId, string xVOApiKey, AckOrResolveByUserRequest body);

        /// <summary>
        /// Resolve all incidents for which a user was paged.
        /// </summary>
        /// <remarks>
        /// The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>ApiResponse of AckOrResolveResponse</returns>
        ApiResponse<AckOrResolveResponse> ApiPublicV1IncidentsByUserResolvePatchWithHttpInfo (string xVOApiId, string xVOApiKey, AckOrResolveByUserRequest body);
        /// <summary>
        /// Get current incident information
        /// </summary>
        /// <remarks>
        /// Get a list of the currently open, acknowledged and recently resolved incidents.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>ActiveIncidentList</returns>
        ActiveIncidentList ApiPublicV1IncidentsGet (string xVOApiId, string xVOApiKey);

        /// <summary>
        /// Get current incident information
        /// </summary>
        /// <remarks>
        /// Get a list of the currently open, acknowledged and recently resolved incidents.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>ApiResponse of ActiveIncidentList</returns>
        ApiResponse<ActiveIncidentList> ApiPublicV1IncidentsGetWithHttpInfo (string xVOApiId, string xVOApiKey);
        /// <summary>
        /// Create a new incident
        /// </summary>
        /// <remarks>
        /// Create a new incident.  This call replicates the function of our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/manual-incident-creation/\&quot;&gt;manual incident creation process&lt;/a&gt;. Monitoring tools and custom integrations should be configured using our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/victorops-restendpoint-integration/\&quot;&gt;REST Endpoint&lt;/a&gt;.  The \&quot;isMultiResponder\&quot; option will require a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The incident details</param>
        /// <returns>CreatedIncident</returns>
        CreatedIncident ApiPublicV1IncidentsPost (string xVOApiId, string xVOApiKey, CreateIncidentRequest body);

        /// <summary>
        /// Create a new incident
        /// </summary>
        /// <remarks>
        /// Create a new incident.  This call replicates the function of our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/manual-incident-creation/\&quot;&gt;manual incident creation process&lt;/a&gt;. Monitoring tools and custom integrations should be configured using our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/victorops-restendpoint-integration/\&quot;&gt;REST Endpoint&lt;/a&gt;.  The \&quot;isMultiResponder\&quot; option will require a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The incident details</param>
        /// <returns>ApiResponse of CreatedIncident</returns>
        ApiResponse<CreatedIncident> ApiPublicV1IncidentsPostWithHttpInfo (string xVOApiId, string xVOApiKey, CreateIncidentRequest body);
        /// <summary>
        /// Reroute one or more incidents to one or more new routable destinations.
        /// </summary>
        /// <remarks>
        /// Reroute one or more incidents to one or more users and/or escalation policies.  The \&quot;addTargets\&quot; option converts the incident to requiring a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The reroute rules</param>
        /// <returns>RerouteStatusResponse</returns>
        RerouteStatusResponse ApiPublicV1IncidentsReroutePost (string xVOApiId, string xVOApiKey, RerouteCollection body);

        /// <summary>
        /// Reroute one or more incidents to one or more new routable destinations.
        /// </summary>
        /// <remarks>
        /// Reroute one or more incidents to one or more users and/or escalation policies.  The \&quot;addTargets\&quot; option converts the incident to requiring a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The reroute rules</param>
        /// <returns>ApiResponse of RerouteStatusResponse</returns>
        ApiResponse<RerouteStatusResponse> ApiPublicV1IncidentsReroutePostWithHttpInfo (string xVOApiId, string xVOApiKey, RerouteCollection body);
        /// <summary>
        /// Resolve an incident or list of incidents
        /// </summary>
        /// <remarks>
        /// The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>AckOrResolveResponse</returns>
        AckOrResolveResponse ApiPublicV1IncidentsResolvePatch (string xVOApiId, string xVOApiKey, AckOrResolveRequest body);

        /// <summary>
        /// Resolve an incident or list of incidents
        /// </summary>
        /// <remarks>
        /// The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>ApiResponse of AckOrResolveResponse</returns>
        ApiResponse<AckOrResolveResponse> ApiPublicV1IncidentsResolvePatchWithHttpInfo (string xVOApiId, string xVOApiKey, AckOrResolveRequest body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIncidentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Acknowledge an incident or list of incidents
        /// </summary>
        /// <remarks>
        /// The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>Task of AckOrResolveResponse</returns>
        System.Threading.Tasks.Task<AckOrResolveResponse> ApiPublicV1IncidentsAckPatchAsync (string xVOApiId, string xVOApiKey, AckOrResolveRequest body);

        /// <summary>
        /// Acknowledge an incident or list of incidents
        /// </summary>
        /// <remarks>
        /// The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>Task of ApiResponse (AckOrResolveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AckOrResolveResponse>> ApiPublicV1IncidentsAckPatchAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, AckOrResolveRequest body);
        /// <summary>
        /// Acknowledge all incidents for which a user was paged.
        /// </summary>
        /// <remarks>
        /// The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>Task of AckOrResolveResponse</returns>
        System.Threading.Tasks.Task<AckOrResolveResponse> ApiPublicV1IncidentsByUserAckPatchAsync (string xVOApiId, string xVOApiKey, AckOrResolveByUserRequest body);

        /// <summary>
        /// Acknowledge all incidents for which a user was paged.
        /// </summary>
        /// <remarks>
        /// The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>Task of ApiResponse (AckOrResolveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AckOrResolveResponse>> ApiPublicV1IncidentsByUserAckPatchAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, AckOrResolveByUserRequest body);
        /// <summary>
        /// Resolve all incidents for which a user was paged.
        /// </summary>
        /// <remarks>
        /// The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>Task of AckOrResolveResponse</returns>
        System.Threading.Tasks.Task<AckOrResolveResponse> ApiPublicV1IncidentsByUserResolvePatchAsync (string xVOApiId, string xVOApiKey, AckOrResolveByUserRequest body);

        /// <summary>
        /// Resolve all incidents for which a user was paged.
        /// </summary>
        /// <remarks>
        /// The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>Task of ApiResponse (AckOrResolveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AckOrResolveResponse>> ApiPublicV1IncidentsByUserResolvePatchAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, AckOrResolveByUserRequest body);
        /// <summary>
        /// Get current incident information
        /// </summary>
        /// <remarks>
        /// Get a list of the currently open, acknowledged and recently resolved incidents.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of ActiveIncidentList</returns>
        System.Threading.Tasks.Task<ActiveIncidentList> ApiPublicV1IncidentsGetAsync (string xVOApiId, string xVOApiKey);

        /// <summary>
        /// Get current incident information
        /// </summary>
        /// <remarks>
        /// Get a list of the currently open, acknowledged and recently resolved incidents.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of ApiResponse (ActiveIncidentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveIncidentList>> ApiPublicV1IncidentsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey);
        /// <summary>
        /// Create a new incident
        /// </summary>
        /// <remarks>
        /// Create a new incident.  This call replicates the function of our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/manual-incident-creation/\&quot;&gt;manual incident creation process&lt;/a&gt;. Monitoring tools and custom integrations should be configured using our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/victorops-restendpoint-integration/\&quot;&gt;REST Endpoint&lt;/a&gt;.  The \&quot;isMultiResponder\&quot; option will require a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The incident details</param>
        /// <returns>Task of CreatedIncident</returns>
        System.Threading.Tasks.Task<CreatedIncident> ApiPublicV1IncidentsPostAsync (string xVOApiId, string xVOApiKey, CreateIncidentRequest body);

        /// <summary>
        /// Create a new incident
        /// </summary>
        /// <remarks>
        /// Create a new incident.  This call replicates the function of our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/manual-incident-creation/\&quot;&gt;manual incident creation process&lt;/a&gt;. Monitoring tools and custom integrations should be configured using our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/victorops-restendpoint-integration/\&quot;&gt;REST Endpoint&lt;/a&gt;.  The \&quot;isMultiResponder\&quot; option will require a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The incident details</param>
        /// <returns>Task of ApiResponse (CreatedIncident)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedIncident>> ApiPublicV1IncidentsPostAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, CreateIncidentRequest body);
        /// <summary>
        /// Reroute one or more incidents to one or more new routable destinations.
        /// </summary>
        /// <remarks>
        /// Reroute one or more incidents to one or more users and/or escalation policies.  The \&quot;addTargets\&quot; option converts the incident to requiring a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The reroute rules</param>
        /// <returns>Task of RerouteStatusResponse</returns>
        System.Threading.Tasks.Task<RerouteStatusResponse> ApiPublicV1IncidentsReroutePostAsync (string xVOApiId, string xVOApiKey, RerouteCollection body);

        /// <summary>
        /// Reroute one or more incidents to one or more new routable destinations.
        /// </summary>
        /// <remarks>
        /// Reroute one or more incidents to one or more users and/or escalation policies.  The \&quot;addTargets\&quot; option converts the incident to requiring a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The reroute rules</param>
        /// <returns>Task of ApiResponse (RerouteStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RerouteStatusResponse>> ApiPublicV1IncidentsReroutePostAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, RerouteCollection body);
        /// <summary>
        /// Resolve an incident or list of incidents
        /// </summary>
        /// <remarks>
        /// The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>Task of AckOrResolveResponse</returns>
        System.Threading.Tasks.Task<AckOrResolveResponse> ApiPublicV1IncidentsResolvePatchAsync (string xVOApiId, string xVOApiKey, AckOrResolveRequest body);

        /// <summary>
        /// Resolve an incident or list of incidents
        /// </summary>
        /// <remarks>
        /// The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>Task of ApiResponse (AckOrResolveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AckOrResolveResponse>> ApiPublicV1IncidentsResolvePatchAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, AckOrResolveRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIncidentsApi : IIncidentsApiSync, IIncidentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IncidentsApi : IIncidentsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IncidentsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IncidentsApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IncidentsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IncidentsApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Acknowledge an incident or list of incidents The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>AckOrResolveResponse</returns>
        public AckOrResolveResponse ApiPublicV1IncidentsAckPatch (string xVOApiId, string xVOApiKey, AckOrResolveRequest body)
        {
             Org.OpenAPITools.Client.ApiResponse<AckOrResolveResponse> localVarResponse = ApiPublicV1IncidentsAckPatchWithHttpInfo(xVOApiId, xVOApiKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Acknowledge an incident or list of incidents The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>ApiResponse of AckOrResolveResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< AckOrResolveResponse > ApiPublicV1IncidentsAckPatchWithHttpInfo (string xVOApiId, string xVOApiKey, AckOrResolveRequest body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling IncidentsApi->ApiPublicV1IncidentsAckPatch");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling IncidentsApi->ApiPublicV1IncidentsAckPatch");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling IncidentsApi->ApiPublicV1IncidentsAckPatch");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Patch< AckOrResolveResponse >("/api-public/v1/incidents/ack", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1IncidentsAckPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Acknowledge an incident or list of incidents The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>Task of AckOrResolveResponse</returns>
        public async System.Threading.Tasks.Task<AckOrResolveResponse> ApiPublicV1IncidentsAckPatchAsync (string xVOApiId, string xVOApiKey, AckOrResolveRequest body)
        {
             Org.OpenAPITools.Client.ApiResponse<AckOrResolveResponse> localVarResponse = await ApiPublicV1IncidentsAckPatchAsyncWithHttpInfo(xVOApiId, xVOApiKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Acknowledge an incident or list of incidents The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>Task of ApiResponse (AckOrResolveResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AckOrResolveResponse>> ApiPublicV1IncidentsAckPatchAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, AckOrResolveRequest body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling IncidentsApi->ApiPublicV1IncidentsAckPatch");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling IncidentsApi->ApiPublicV1IncidentsAckPatch");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling IncidentsApi->ApiPublicV1IncidentsAckPatch");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<AckOrResolveResponse>("/api-public/v1/incidents/ack", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1IncidentsAckPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Acknowledge all incidents for which a user was paged. The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>AckOrResolveResponse</returns>
        public AckOrResolveResponse ApiPublicV1IncidentsByUserAckPatch (string xVOApiId, string xVOApiKey, AckOrResolveByUserRequest body)
        {
             Org.OpenAPITools.Client.ApiResponse<AckOrResolveResponse> localVarResponse = ApiPublicV1IncidentsByUserAckPatchWithHttpInfo(xVOApiId, xVOApiKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Acknowledge all incidents for which a user was paged. The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>ApiResponse of AckOrResolveResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< AckOrResolveResponse > ApiPublicV1IncidentsByUserAckPatchWithHttpInfo (string xVOApiId, string xVOApiKey, AckOrResolveByUserRequest body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling IncidentsApi->ApiPublicV1IncidentsByUserAckPatch");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling IncidentsApi->ApiPublicV1IncidentsByUserAckPatch");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling IncidentsApi->ApiPublicV1IncidentsByUserAckPatch");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Patch< AckOrResolveResponse >("/api-public/v1/incidents/byUser/ack", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1IncidentsByUserAckPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Acknowledge all incidents for which a user was paged. The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>Task of AckOrResolveResponse</returns>
        public async System.Threading.Tasks.Task<AckOrResolveResponse> ApiPublicV1IncidentsByUserAckPatchAsync (string xVOApiId, string xVOApiKey, AckOrResolveByUserRequest body)
        {
             Org.OpenAPITools.Client.ApiResponse<AckOrResolveResponse> localVarResponse = await ApiPublicV1IncidentsByUserAckPatchAsyncWithHttpInfo(xVOApiId, xVOApiKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Acknowledge all incidents for which a user was paged. The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>Task of ApiResponse (AckOrResolveResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AckOrResolveResponse>> ApiPublicV1IncidentsByUserAckPatchAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, AckOrResolveByUserRequest body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling IncidentsApi->ApiPublicV1IncidentsByUserAckPatch");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling IncidentsApi->ApiPublicV1IncidentsByUserAckPatch");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling IncidentsApi->ApiPublicV1IncidentsByUserAckPatch");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<AckOrResolveResponse>("/api-public/v1/incidents/byUser/ack", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1IncidentsByUserAckPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resolve all incidents for which a user was paged. The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>AckOrResolveResponse</returns>
        public AckOrResolveResponse ApiPublicV1IncidentsByUserResolvePatch (string xVOApiId, string xVOApiKey, AckOrResolveByUserRequest body)
        {
             Org.OpenAPITools.Client.ApiResponse<AckOrResolveResponse> localVarResponse = ApiPublicV1IncidentsByUserResolvePatchWithHttpInfo(xVOApiId, xVOApiKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resolve all incidents for which a user was paged. The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>ApiResponse of AckOrResolveResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< AckOrResolveResponse > ApiPublicV1IncidentsByUserResolvePatchWithHttpInfo (string xVOApiId, string xVOApiKey, AckOrResolveByUserRequest body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling IncidentsApi->ApiPublicV1IncidentsByUserResolvePatch");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling IncidentsApi->ApiPublicV1IncidentsByUserResolvePatch");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling IncidentsApi->ApiPublicV1IncidentsByUserResolvePatch");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Patch< AckOrResolveResponse >("/api-public/v1/incidents/byUser/resolve", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1IncidentsByUserResolvePatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resolve all incidents for which a user was paged. The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>Task of AckOrResolveResponse</returns>
        public async System.Threading.Tasks.Task<AckOrResolveResponse> ApiPublicV1IncidentsByUserResolvePatchAsync (string xVOApiId, string xVOApiKey, AckOrResolveByUserRequest body)
        {
             Org.OpenAPITools.Client.ApiResponse<AckOrResolveResponse> localVarResponse = await ApiPublicV1IncidentsByUserResolvePatchAsyncWithHttpInfo(xVOApiId, xVOApiKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resolve all incidents for which a user was paged. The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>Task of ApiResponse (AckOrResolveResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AckOrResolveResponse>> ApiPublicV1IncidentsByUserResolvePatchAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, AckOrResolveByUserRequest body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling IncidentsApi->ApiPublicV1IncidentsByUserResolvePatch");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling IncidentsApi->ApiPublicV1IncidentsByUserResolvePatch");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling IncidentsApi->ApiPublicV1IncidentsByUserResolvePatch");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<AckOrResolveResponse>("/api-public/v1/incidents/byUser/resolve", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1IncidentsByUserResolvePatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get current incident information Get a list of the currently open, acknowledged and recently resolved incidents.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>ActiveIncidentList</returns>
        public ActiveIncidentList ApiPublicV1IncidentsGet (string xVOApiId, string xVOApiKey)
        {
             Org.OpenAPITools.Client.ApiResponse<ActiveIncidentList> localVarResponse = ApiPublicV1IncidentsGetWithHttpInfo(xVOApiId, xVOApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current incident information Get a list of the currently open, acknowledged and recently resolved incidents.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>ApiResponse of ActiveIncidentList</returns>
        public Org.OpenAPITools.Client.ApiResponse< ActiveIncidentList > ApiPublicV1IncidentsGetWithHttpInfo (string xVOApiId, string xVOApiKey)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling IncidentsApi->ApiPublicV1IncidentsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling IncidentsApi->ApiPublicV1IncidentsGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< ActiveIncidentList >("/api-public/v1/incidents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1IncidentsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get current incident information Get a list of the currently open, acknowledged and recently resolved incidents.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of ActiveIncidentList</returns>
        public async System.Threading.Tasks.Task<ActiveIncidentList> ApiPublicV1IncidentsGetAsync (string xVOApiId, string xVOApiKey)
        {
             Org.OpenAPITools.Client.ApiResponse<ActiveIncidentList> localVarResponse = await ApiPublicV1IncidentsGetAsyncWithHttpInfo(xVOApiId, xVOApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current incident information Get a list of the currently open, acknowledged and recently resolved incidents.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of ApiResponse (ActiveIncidentList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ActiveIncidentList>> ApiPublicV1IncidentsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling IncidentsApi->ApiPublicV1IncidentsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling IncidentsApi->ApiPublicV1IncidentsGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ActiveIncidentList>("/api-public/v1/incidents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1IncidentsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new incident Create a new incident.  This call replicates the function of our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/manual-incident-creation/\&quot;&gt;manual incident creation process&lt;/a&gt;. Monitoring tools and custom integrations should be configured using our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/victorops-restendpoint-integration/\&quot;&gt;REST Endpoint&lt;/a&gt;.  The \&quot;isMultiResponder\&quot; option will require a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The incident details</param>
        /// <returns>CreatedIncident</returns>
        public CreatedIncident ApiPublicV1IncidentsPost (string xVOApiId, string xVOApiKey, CreateIncidentRequest body)
        {
             Org.OpenAPITools.Client.ApiResponse<CreatedIncident> localVarResponse = ApiPublicV1IncidentsPostWithHttpInfo(xVOApiId, xVOApiKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new incident Create a new incident.  This call replicates the function of our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/manual-incident-creation/\&quot;&gt;manual incident creation process&lt;/a&gt;. Monitoring tools and custom integrations should be configured using our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/victorops-restendpoint-integration/\&quot;&gt;REST Endpoint&lt;/a&gt;.  The \&quot;isMultiResponder\&quot; option will require a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The incident details</param>
        /// <returns>ApiResponse of CreatedIncident</returns>
        public Org.OpenAPITools.Client.ApiResponse< CreatedIncident > ApiPublicV1IncidentsPostWithHttpInfo (string xVOApiId, string xVOApiKey, CreateIncidentRequest body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling IncidentsApi->ApiPublicV1IncidentsPost");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling IncidentsApi->ApiPublicV1IncidentsPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling IncidentsApi->ApiPublicV1IncidentsPost");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< CreatedIncident >("/api-public/v1/incidents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1IncidentsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new incident Create a new incident.  This call replicates the function of our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/manual-incident-creation/\&quot;&gt;manual incident creation process&lt;/a&gt;. Monitoring tools and custom integrations should be configured using our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/victorops-restendpoint-integration/\&quot;&gt;REST Endpoint&lt;/a&gt;.  The \&quot;isMultiResponder\&quot; option will require a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The incident details</param>
        /// <returns>Task of CreatedIncident</returns>
        public async System.Threading.Tasks.Task<CreatedIncident> ApiPublicV1IncidentsPostAsync (string xVOApiId, string xVOApiKey, CreateIncidentRequest body)
        {
             Org.OpenAPITools.Client.ApiResponse<CreatedIncident> localVarResponse = await ApiPublicV1IncidentsPostAsyncWithHttpInfo(xVOApiId, xVOApiKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new incident Create a new incident.  This call replicates the function of our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/manual-incident-creation/\&quot;&gt;manual incident creation process&lt;/a&gt;. Monitoring tools and custom integrations should be configured using our &lt;a href&#x3D;\&quot;https://help.victorops.com/knowledge-base/victorops-restendpoint-integration/\&quot;&gt;REST Endpoint&lt;/a&gt;.  The \&quot;isMultiResponder\&quot; option will require a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The incident details</param>
        /// <returns>Task of ApiResponse (CreatedIncident)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CreatedIncident>> ApiPublicV1IncidentsPostAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, CreateIncidentRequest body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling IncidentsApi->ApiPublicV1IncidentsPost");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling IncidentsApi->ApiPublicV1IncidentsPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling IncidentsApi->ApiPublicV1IncidentsPost");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatedIncident>("/api-public/v1/incidents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1IncidentsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reroute one or more incidents to one or more new routable destinations. Reroute one or more incidents to one or more users and/or escalation policies.  The \&quot;addTargets\&quot; option converts the incident to requiring a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The reroute rules</param>
        /// <returns>RerouteStatusResponse</returns>
        public RerouteStatusResponse ApiPublicV1IncidentsReroutePost (string xVOApiId, string xVOApiKey, RerouteCollection body)
        {
             Org.OpenAPITools.Client.ApiResponse<RerouteStatusResponse> localVarResponse = ApiPublicV1IncidentsReroutePostWithHttpInfo(xVOApiId, xVOApiKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reroute one or more incidents to one or more new routable destinations. Reroute one or more incidents to one or more users and/or escalation policies.  The \&quot;addTargets\&quot; option converts the incident to requiring a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The reroute rules</param>
        /// <returns>ApiResponse of RerouteStatusResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< RerouteStatusResponse > ApiPublicV1IncidentsReroutePostWithHttpInfo (string xVOApiId, string xVOApiKey, RerouteCollection body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling IncidentsApi->ApiPublicV1IncidentsReroutePost");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling IncidentsApi->ApiPublicV1IncidentsReroutePost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling IncidentsApi->ApiPublicV1IncidentsReroutePost");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< RerouteStatusResponse >("/api-public/v1/incidents/reroute", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1IncidentsReroutePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reroute one or more incidents to one or more new routable destinations. Reroute one or more incidents to one or more users and/or escalation policies.  The \&quot;addTargets\&quot; option converts the incident to requiring a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The reroute rules</param>
        /// <returns>Task of RerouteStatusResponse</returns>
        public async System.Threading.Tasks.Task<RerouteStatusResponse> ApiPublicV1IncidentsReroutePostAsync (string xVOApiId, string xVOApiKey, RerouteCollection body)
        {
             Org.OpenAPITools.Client.ApiResponse<RerouteStatusResponse> localVarResponse = await ApiPublicV1IncidentsReroutePostAsyncWithHttpInfo(xVOApiId, xVOApiKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reroute one or more incidents to one or more new routable destinations. Reroute one or more incidents to one or more users and/or escalation policies.  The \&quot;addTargets\&quot; option converts the incident to requiring a response from each paged user and escalation policy before paging is stopped. The option is available only to Enterprise accounts.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The reroute rules</param>
        /// <returns>Task of ApiResponse (RerouteStatusResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RerouteStatusResponse>> ApiPublicV1IncidentsReroutePostAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, RerouteCollection body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling IncidentsApi->ApiPublicV1IncidentsReroutePost");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling IncidentsApi->ApiPublicV1IncidentsReroutePost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling IncidentsApi->ApiPublicV1IncidentsReroutePost");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RerouteStatusResponse>("/api-public/v1/incidents/reroute", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1IncidentsReroutePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resolve an incident or list of incidents The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>AckOrResolveResponse</returns>
        public AckOrResolveResponse ApiPublicV1IncidentsResolvePatch (string xVOApiId, string xVOApiKey, AckOrResolveRequest body)
        {
             Org.OpenAPITools.Client.ApiResponse<AckOrResolveResponse> localVarResponse = ApiPublicV1IncidentsResolvePatchWithHttpInfo(xVOApiId, xVOApiKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resolve an incident or list of incidents The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>ApiResponse of AckOrResolveResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< AckOrResolveResponse > ApiPublicV1IncidentsResolvePatchWithHttpInfo (string xVOApiId, string xVOApiKey, AckOrResolveRequest body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling IncidentsApi->ApiPublicV1IncidentsResolvePatch");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling IncidentsApi->ApiPublicV1IncidentsResolvePatch");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling IncidentsApi->ApiPublicV1IncidentsResolvePatch");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Patch< AckOrResolveResponse >("/api-public/v1/incidents/resolve", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1IncidentsResolvePatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resolve an incident or list of incidents The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>Task of AckOrResolveResponse</returns>
        public async System.Threading.Tasks.Task<AckOrResolveResponse> ApiPublicV1IncidentsResolvePatchAsync (string xVOApiId, string xVOApiKey, AckOrResolveRequest body)
        {
             Org.OpenAPITools.Client.ApiResponse<AckOrResolveResponse> localVarResponse = await ApiPublicV1IncidentsResolvePatchAsyncWithHttpInfo(xVOApiId, xVOApiKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resolve an incident or list of incidents The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">Ack/Resolve payload</param>
        /// <returns>Task of ApiResponse (AckOrResolveResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AckOrResolveResponse>> ApiPublicV1IncidentsResolvePatchAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, AckOrResolveRequest body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling IncidentsApi->ApiPublicV1IncidentsResolvePatch");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling IncidentsApi->ApiPublicV1IncidentsResolvePatch");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling IncidentsApi->ApiPublicV1IncidentsResolvePatch");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<AckOrResolveResponse>("/api-public/v1/incidents/resolve", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1IncidentsResolvePatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
