/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing IncidentInfo
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class IncidentInfoTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for IncidentInfo
        //private IncidentInfo instance;

        public IncidentInfoTests()
        {
            // TODO uncomment below to create an instance of IncidentInfo
            //instance = new IncidentInfo();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of IncidentInfo
        /// </summary>
        [Fact]
        public void IncidentInfoInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" IncidentInfo
            //Assert.IsInstanceOfType<IncidentInfo> (instance, "variable 'instance' is a IncidentInfo");
        }


        /// <summary>
        /// Test the property 'IncidentNumber'
        /// </summary>
        [Fact]
        public void IncidentNumberTest()
        {
            // TODO unit test for the property 'IncidentNumber'
        }
        /// <summary>
        /// Test the property 'StartTime'
        /// </summary>
        [Fact]
        public void StartTimeTest()
        {
            // TODO unit test for the property 'StartTime'
        }
        /// <summary>
        /// Test the property 'CurrentPhase'
        /// </summary>
        [Fact]
        public void CurrentPhaseTest()
        {
            // TODO unit test for the property 'CurrentPhase'
        }
        /// <summary>
        /// Test the property 'AlertCount'
        /// </summary>
        [Fact]
        public void AlertCountTest()
        {
            // TODO unit test for the property 'AlertCount'
        }
        /// <summary>
        /// Test the property 'LastAlertTime'
        /// </summary>
        [Fact]
        public void LastAlertTimeTest()
        {
            // TODO unit test for the property 'LastAlertTime'
        }
        /// <summary>
        /// Test the property 'LastAlertID'
        /// </summary>
        [Fact]
        public void LastAlertIDTest()
        {
            // TODO unit test for the property 'LastAlertID'
        }
        /// <summary>
        /// Test the property 'AckUserId'
        /// </summary>
        [Fact]
        public void AckUserIdTest()
        {
            // TODO unit test for the property 'AckUserId'
        }
        /// <summary>
        /// Test the property 'AckTime'
        /// </summary>
        [Fact]
        public void AckTimeTest()
        {
            // TODO unit test for the property 'AckTime'
        }
        /// <summary>
        /// Test the property 'EntityId'
        /// </summary>
        [Fact]
        public void EntityIdTest()
        {
            // TODO unit test for the property 'EntityId'
        }
        /// <summary>
        /// Test the property 'Host'
        /// </summary>
        [Fact]
        public void HostTest()
        {
            // TODO unit test for the property 'Host'
        }
        /// <summary>
        /// Test the property 'Service'
        /// </summary>
        [Fact]
        public void ServiceTest()
        {
            // TODO unit test for the property 'Service'
        }
        /// <summary>
        /// Test the property 'EndTime'
        /// </summary>
        [Fact]
        public void EndTimeTest()
        {
            // TODO unit test for the property 'EndTime'
        }
        /// <summary>
        /// Test the property 'AckUser'
        /// </summary>
        [Fact]
        public void AckUserTest()
        {
            // TODO unit test for the property 'AckUser'
        }
        /// <summary>
        /// Test the property 'EntityType'
        /// </summary>
        [Fact]
        public void EntityTypeTest()
        {
            // TODO unit test for the property 'EntityType'
        }
        /// <summary>
        /// Test the property 'EntityDispName'
        /// </summary>
        [Fact]
        public void EntityDispNameTest()
        {
            // TODO unit test for the property 'EntityDispName'
        }
        /// <summary>
        /// Test the property 'Teams'
        /// </summary>
        [Fact]
        public void TeamsTest()
        {
            // TODO unit test for the property 'Teams'
        }

    }

}
