/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnCallApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get an organization&#39;s on-call users
        /// </summary>
        /// <remarks>
        /// Get all on-call users/teams for your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 ApiPublicV1OncallCurrentGet (string xVOApiId, string xVOApiKey);

        /// <summary>
        /// Get an organization&#39;s on-call users
        /// </summary>
        /// <remarks>
        /// Get all on-call users/teams for your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> ApiPublicV1OncallCurrentGetWithHttpInfo (string xVOApiId, string xVOApiKey);
        /// <summary>
        /// Create an on-call override (take on-call)
        /// </summary>
        /// <remarks>
        /// Replaces a currently on-call user in the escalation policy with another.  In many cases, the policy slug will match the slug of the team that contains it.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="policy">The VictorOps policy &#39;slug&#39;</param>
        /// <param name="body">The take on-call payload</param>
        /// <returns>TakeResult</returns>
        TakeResult ApiPublicV1PoliciesPolicyOncallUserPatch (string xVOApiId, string xVOApiKey, string policy, TakeRequest body);

        /// <summary>
        /// Create an on-call override (take on-call)
        /// </summary>
        /// <remarks>
        /// Replaces a currently on-call user in the escalation policy with another.  In many cases, the policy slug will match the slug of the team that contains it.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="policy">The VictorOps policy &#39;slug&#39;</param>
        /// <param name="body">The take on-call payload</param>
        /// <returns>ApiResponse of TakeResult</returns>
        ApiResponse<TakeResult> ApiPublicV1PoliciesPolicyOncallUserPatchWithHttpInfo (string xVOApiId, string xVOApiKey, string policy, TakeRequest body);
        /// <summary>
        /// Get a team&#39;s on-call schedule
        /// </summary>
        /// <remarks>
        /// __NOTE: This call is deprecated. Please use &#x60;GET /api-public/v2/team/{team}/oncall/schedule&#x60;.__  Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>OnCallAndOverrides</returns>
        OnCallAndOverrides ApiPublicV1TeamTeamOncallScheduleGet (string xVOApiId, string xVOApiKey, string team, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?));

        /// <summary>
        /// Get a team&#39;s on-call schedule
        /// </summary>
        /// <remarks>
        /// __NOTE: This call is deprecated. Please use &#x60;GET /api-public/v2/team/{team}/oncall/schedule&#x60;.__  Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>ApiResponse of OnCallAndOverrides</returns>
        ApiResponse<OnCallAndOverrides> ApiPublicV1TeamTeamOncallScheduleGetWithHttpInfo (string xVOApiId, string xVOApiKey, string team, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?));
        /// <summary>
        /// Create an on-call override (take on-call)
        /// </summary>
        /// <remarks>
        /// __NOTE: This API call is deprecated. Please use &#x60;PATCH /api-public/v2/policies/{policy}/oncall/user&#x60;__  Replaces a currently on-call user on the team with another.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="body">The take on-call payload</param>
        /// <returns>TakeResult</returns>
        TakeResult ApiPublicV1TeamTeamOncallUserPatch (string xVOApiId, string xVOApiKey, string team, TakeRequest body);

        /// <summary>
        /// Create an on-call override (take on-call)
        /// </summary>
        /// <remarks>
        /// __NOTE: This API call is deprecated. Please use &#x60;PATCH /api-public/v2/policies/{policy}/oncall/user&#x60;__  Replaces a currently on-call user on the team with another.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="body">The take on-call payload</param>
        /// <returns>ApiResponse of TakeResult</returns>
        ApiResponse<TakeResult> ApiPublicV1TeamTeamOncallUserPatchWithHttpInfo (string xVOApiId, string xVOApiKey, string team, TakeRequest body);
        /// <summary>
        /// Get a user&#39;s on-call schedule
        /// </summary>
        /// <remarks>
        /// __NOTE: This call is deprecated. Please use &#x60;GET /api-public/v2/user/{user}/oncall/schedule&#x60;.__  Get the on-call schedule for a user for all teams, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>List&lt;OnCallAndOverrides&gt;</returns>
        List<OnCallAndOverrides> ApiPublicV1UserUserOncallScheduleGet (string xVOApiId, string xVOApiKey, string user, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?));

        /// <summary>
        /// Get a user&#39;s on-call schedule
        /// </summary>
        /// <remarks>
        /// __NOTE: This call is deprecated. Please use &#x60;GET /api-public/v2/user/{user}/oncall/schedule&#x60;.__  Get the on-call schedule for a user for all teams, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>ApiResponse of List&lt;OnCallAndOverrides&gt;</returns>
        ApiResponse<List<OnCallAndOverrides>> ApiPublicV1UserUserOncallScheduleGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?));
        /// <summary>
        /// Get a team&#39;s on-call schedule
        /// </summary>
        /// <remarks>
        /// Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>TeamSchedule</returns>
        TeamSchedule ApiPublicV2TeamTeamOncallScheduleGet (string xVOApiId, string xVOApiKey, string team, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?));

        /// <summary>
        /// Get a team&#39;s on-call schedule
        /// </summary>
        /// <remarks>
        /// Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>ApiResponse of TeamSchedule</returns>
        ApiResponse<TeamSchedule> ApiPublicV2TeamTeamOncallScheduleGetWithHttpInfo (string xVOApiId, string xVOApiKey, string team, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?));
        /// <summary>
        /// Get a user&#39;s on-call schedule
        /// </summary>
        /// <remarks>
        /// Get the on-call schedule for a user for all teams the user is on, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>UserSchedule</returns>
        UserSchedule ApiPublicV2UserUserOncallScheduleGet (string xVOApiId, string xVOApiKey, string user, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?));

        /// <summary>
        /// Get a user&#39;s on-call schedule
        /// </summary>
        /// <remarks>
        /// Get the on-call schedule for a user for all teams the user is on, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>ApiResponse of UserSchedule</returns>
        ApiResponse<UserSchedule> ApiPublicV2UserUserOncallScheduleGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnCallApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get an organization&#39;s on-call users
        /// </summary>
        /// <remarks>
        /// Get all on-call users/teams for your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> ApiPublicV1OncallCurrentGetAsync (string xVOApiId, string xVOApiKey);

        /// <summary>
        /// Get an organization&#39;s on-call users
        /// </summary>
        /// <remarks>
        /// Get all on-call users/teams for your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> ApiPublicV1OncallCurrentGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey);
        /// <summary>
        /// Create an on-call override (take on-call)
        /// </summary>
        /// <remarks>
        /// Replaces a currently on-call user in the escalation policy with another.  In many cases, the policy slug will match the slug of the team that contains it.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="policy">The VictorOps policy &#39;slug&#39;</param>
        /// <param name="body">The take on-call payload</param>
        /// <returns>Task of TakeResult</returns>
        System.Threading.Tasks.Task<TakeResult> ApiPublicV1PoliciesPolicyOncallUserPatchAsync (string xVOApiId, string xVOApiKey, string policy, TakeRequest body);

        /// <summary>
        /// Create an on-call override (take on-call)
        /// </summary>
        /// <remarks>
        /// Replaces a currently on-call user in the escalation policy with another.  In many cases, the policy slug will match the slug of the team that contains it.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="policy">The VictorOps policy &#39;slug&#39;</param>
        /// <param name="body">The take on-call payload</param>
        /// <returns>Task of ApiResponse (TakeResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TakeResult>> ApiPublicV1PoliciesPolicyOncallUserPatchAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string policy, TakeRequest body);
        /// <summary>
        /// Get a team&#39;s on-call schedule
        /// </summary>
        /// <remarks>
        /// __NOTE: This call is deprecated. Please use &#x60;GET /api-public/v2/team/{team}/oncall/schedule&#x60;.__  Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>Task of OnCallAndOverrides</returns>
        System.Threading.Tasks.Task<OnCallAndOverrides> ApiPublicV1TeamTeamOncallScheduleGetAsync (string xVOApiId, string xVOApiKey, string team, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?));

        /// <summary>
        /// Get a team&#39;s on-call schedule
        /// </summary>
        /// <remarks>
        /// __NOTE: This call is deprecated. Please use &#x60;GET /api-public/v2/team/{team}/oncall/schedule&#x60;.__  Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>Task of ApiResponse (OnCallAndOverrides)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnCallAndOverrides>> ApiPublicV1TeamTeamOncallScheduleGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?));
        /// <summary>
        /// Create an on-call override (take on-call)
        /// </summary>
        /// <remarks>
        /// __NOTE: This API call is deprecated. Please use &#x60;PATCH /api-public/v2/policies/{policy}/oncall/user&#x60;__  Replaces a currently on-call user on the team with another.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="body">The take on-call payload</param>
        /// <returns>Task of TakeResult</returns>
        System.Threading.Tasks.Task<TakeResult> ApiPublicV1TeamTeamOncallUserPatchAsync (string xVOApiId, string xVOApiKey, string team, TakeRequest body);

        /// <summary>
        /// Create an on-call override (take on-call)
        /// </summary>
        /// <remarks>
        /// __NOTE: This API call is deprecated. Please use &#x60;PATCH /api-public/v2/policies/{policy}/oncall/user&#x60;__  Replaces a currently on-call user on the team with another.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="body">The take on-call payload</param>
        /// <returns>Task of ApiResponse (TakeResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<TakeResult>> ApiPublicV1TeamTeamOncallUserPatchAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team, TakeRequest body);
        /// <summary>
        /// Get a user&#39;s on-call schedule
        /// </summary>
        /// <remarks>
        /// __NOTE: This call is deprecated. Please use &#x60;GET /api-public/v2/user/{user}/oncall/schedule&#x60;.__  Get the on-call schedule for a user for all teams, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>Task of List&lt;OnCallAndOverrides&gt;</returns>
        System.Threading.Tasks.Task<List<OnCallAndOverrides>> ApiPublicV1UserUserOncallScheduleGetAsync (string xVOApiId, string xVOApiKey, string user, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?));

        /// <summary>
        /// Get a user&#39;s on-call schedule
        /// </summary>
        /// <remarks>
        /// __NOTE: This call is deprecated. Please use &#x60;GET /api-public/v2/user/{user}/oncall/schedule&#x60;.__  Get the on-call schedule for a user for all teams, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>Task of ApiResponse (List&lt;OnCallAndOverrides&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OnCallAndOverrides>>> ApiPublicV1UserUserOncallScheduleGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?));
        /// <summary>
        /// Get a team&#39;s on-call schedule
        /// </summary>
        /// <remarks>
        /// Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>Task of TeamSchedule</returns>
        System.Threading.Tasks.Task<TeamSchedule> ApiPublicV2TeamTeamOncallScheduleGetAsync (string xVOApiId, string xVOApiKey, string team, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?));

        /// <summary>
        /// Get a team&#39;s on-call schedule
        /// </summary>
        /// <remarks>
        /// Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>Task of ApiResponse (TeamSchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamSchedule>> ApiPublicV2TeamTeamOncallScheduleGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?));
        /// <summary>
        /// Get a user&#39;s on-call schedule
        /// </summary>
        /// <remarks>
        /// Get the on-call schedule for a user for all teams the user is on, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>Task of UserSchedule</returns>
        System.Threading.Tasks.Task<UserSchedule> ApiPublicV2UserUserOncallScheduleGetAsync (string xVOApiId, string xVOApiKey, string user, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?));

        /// <summary>
        /// Get a user&#39;s on-call schedule
        /// </summary>
        /// <remarks>
        /// Get the on-call schedule for a user for all teams the user is on, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>Task of ApiResponse (UserSchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSchedule>> ApiPublicV2UserUserOncallScheduleGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOnCallApi : IOnCallApiSync, IOnCallApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OnCallApi : IOnCallApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OnCallApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OnCallApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnCallApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OnCallApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnCallApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OnCallApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OnCallApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OnCallApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get an organization&#39;s on-call users Get all on-call users/teams for your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 ApiPublicV1OncallCurrentGet (string xVOApiId, string xVOApiKey)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse2007> localVarResponse = ApiPublicV1OncallCurrentGetWithHttpInfo(xVOApiId, xVOApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an organization&#39;s on-call users Get all on-call users/teams for your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public Org.OpenAPITools.Client.ApiResponse< InlineResponse2007 > ApiPublicV1OncallCurrentGetWithHttpInfo (string xVOApiId, string xVOApiKey)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling OnCallApi->ApiPublicV1OncallCurrentGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling OnCallApi->ApiPublicV1OncallCurrentGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2007 >("/api-public/v1/oncall/current", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OncallCurrentGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an organization&#39;s on-call users Get all on-call users/teams for your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> ApiPublicV1OncallCurrentGetAsync (string xVOApiId, string xVOApiKey)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse2007> localVarResponse = await ApiPublicV1OncallCurrentGetAsyncWithHttpInfo(xVOApiId, xVOApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an organization&#39;s on-call users Get all on-call users/teams for your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InlineResponse2007>> ApiPublicV1OncallCurrentGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling OnCallApi->ApiPublicV1OncallCurrentGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling OnCallApi->ApiPublicV1OncallCurrentGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2007>("/api-public/v1/oncall/current", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OncallCurrentGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an on-call override (take on-call) Replaces a currently on-call user in the escalation policy with another.  In many cases, the policy slug will match the slug of the team that contains it.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="policy">The VictorOps policy &#39;slug&#39;</param>
        /// <param name="body">The take on-call payload</param>
        /// <returns>TakeResult</returns>
        public TakeResult ApiPublicV1PoliciesPolicyOncallUserPatch (string xVOApiId, string xVOApiKey, string policy, TakeRequest body)
        {
             Org.OpenAPITools.Client.ApiResponse<TakeResult> localVarResponse = ApiPublicV1PoliciesPolicyOncallUserPatchWithHttpInfo(xVOApiId, xVOApiKey, policy, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an on-call override (take on-call) Replaces a currently on-call user in the escalation policy with another.  In many cases, the policy slug will match the slug of the team that contains it.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="policy">The VictorOps policy &#39;slug&#39;</param>
        /// <param name="body">The take on-call payload</param>
        /// <returns>ApiResponse of TakeResult</returns>
        public Org.OpenAPITools.Client.ApiResponse< TakeResult > ApiPublicV1PoliciesPolicyOncallUserPatchWithHttpInfo (string xVOApiId, string xVOApiKey, string policy, TakeRequest body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling OnCallApi->ApiPublicV1PoliciesPolicyOncallUserPatch");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling OnCallApi->ApiPublicV1PoliciesPolicyOncallUserPatch");

            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policy' when calling OnCallApi->ApiPublicV1PoliciesPolicyOncallUserPatch");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling OnCallApi->ApiPublicV1PoliciesPolicyOncallUserPatch");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (policy != null)
                localVarRequestOptions.PathParameters.Add("policy", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policy)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Patch< TakeResult >("/api-public/v1/policies/{policy}/oncall/user", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1PoliciesPolicyOncallUserPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an on-call override (take on-call) Replaces a currently on-call user in the escalation policy with another.  In many cases, the policy slug will match the slug of the team that contains it.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="policy">The VictorOps policy &#39;slug&#39;</param>
        /// <param name="body">The take on-call payload</param>
        /// <returns>Task of TakeResult</returns>
        public async System.Threading.Tasks.Task<TakeResult> ApiPublicV1PoliciesPolicyOncallUserPatchAsync (string xVOApiId, string xVOApiKey, string policy, TakeRequest body)
        {
             Org.OpenAPITools.Client.ApiResponse<TakeResult> localVarResponse = await ApiPublicV1PoliciesPolicyOncallUserPatchAsyncWithHttpInfo(xVOApiId, xVOApiKey, policy, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an on-call override (take on-call) Replaces a currently on-call user in the escalation policy with another.  In many cases, the policy slug will match the slug of the team that contains it.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="policy">The VictorOps policy &#39;slug&#39;</param>
        /// <param name="body">The take on-call payload</param>
        /// <returns>Task of ApiResponse (TakeResult)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TakeResult>> ApiPublicV1PoliciesPolicyOncallUserPatchAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string policy, TakeRequest body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling OnCallApi->ApiPublicV1PoliciesPolicyOncallUserPatch");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling OnCallApi->ApiPublicV1PoliciesPolicyOncallUserPatch");

            // verify the required parameter 'policy' is set
            if (policy == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policy' when calling OnCallApi->ApiPublicV1PoliciesPolicyOncallUserPatch");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling OnCallApi->ApiPublicV1PoliciesPolicyOncallUserPatch");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (policy != null)
                localVarRequestOptions.PathParameters.Add("policy", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policy)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<TakeResult>("/api-public/v1/policies/{policy}/oncall/user", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1PoliciesPolicyOncallUserPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a team&#39;s on-call schedule __NOTE: This call is deprecated. Please use &#x60;GET /api-public/v2/team/{team}/oncall/schedule&#x60;.__  Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>OnCallAndOverrides</returns>
        public OnCallAndOverrides ApiPublicV1TeamTeamOncallScheduleGet (string xVOApiId, string xVOApiKey, string team, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?))
        {
             Org.OpenAPITools.Client.ApiResponse<OnCallAndOverrides> localVarResponse = ApiPublicV1TeamTeamOncallScheduleGetWithHttpInfo(xVOApiId, xVOApiKey, team, daysForward, daysSkip, step);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a team&#39;s on-call schedule __NOTE: This call is deprecated. Please use &#x60;GET /api-public/v2/team/{team}/oncall/schedule&#x60;.__  Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>ApiResponse of OnCallAndOverrides</returns>
        public Org.OpenAPITools.Client.ApiResponse< OnCallAndOverrides > ApiPublicV1TeamTeamOncallScheduleGetWithHttpInfo (string xVOApiId, string xVOApiKey, string team, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?))
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling OnCallApi->ApiPublicV1TeamTeamOncallScheduleGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling OnCallApi->ApiPublicV1TeamTeamOncallScheduleGet");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling OnCallApi->ApiPublicV1TeamTeamOncallScheduleGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (daysForward != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daysForward", daysForward))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (daysSkip != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daysSkip", daysSkip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (step != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "step", step))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< OnCallAndOverrides >("/api-public/v1/team/{team}/oncall/schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamOncallScheduleGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a team&#39;s on-call schedule __NOTE: This call is deprecated. Please use &#x60;GET /api-public/v2/team/{team}/oncall/schedule&#x60;.__  Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>Task of OnCallAndOverrides</returns>
        public async System.Threading.Tasks.Task<OnCallAndOverrides> ApiPublicV1TeamTeamOncallScheduleGetAsync (string xVOApiId, string xVOApiKey, string team, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?))
        {
             Org.OpenAPITools.Client.ApiResponse<OnCallAndOverrides> localVarResponse = await ApiPublicV1TeamTeamOncallScheduleGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, team, daysForward, daysSkip, step);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a team&#39;s on-call schedule __NOTE: This call is deprecated. Please use &#x60;GET /api-public/v2/team/{team}/oncall/schedule&#x60;.__  Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>Task of ApiResponse (OnCallAndOverrides)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OnCallAndOverrides>> ApiPublicV1TeamTeamOncallScheduleGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?))
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling OnCallApi->ApiPublicV1TeamTeamOncallScheduleGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling OnCallApi->ApiPublicV1TeamTeamOncallScheduleGet");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling OnCallApi->ApiPublicV1TeamTeamOncallScheduleGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (daysForward != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daysForward", daysForward))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (daysSkip != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daysSkip", daysSkip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (step != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "step", step))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OnCallAndOverrides>("/api-public/v1/team/{team}/oncall/schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamOncallScheduleGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an on-call override (take on-call) __NOTE: This API call is deprecated. Please use &#x60;PATCH /api-public/v2/policies/{policy}/oncall/user&#x60;__  Replaces a currently on-call user on the team with another.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="body">The take on-call payload</param>
        /// <returns>TakeResult</returns>
        public TakeResult ApiPublicV1TeamTeamOncallUserPatch (string xVOApiId, string xVOApiKey, string team, TakeRequest body)
        {
             Org.OpenAPITools.Client.ApiResponse<TakeResult> localVarResponse = ApiPublicV1TeamTeamOncallUserPatchWithHttpInfo(xVOApiId, xVOApiKey, team, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an on-call override (take on-call) __NOTE: This API call is deprecated. Please use &#x60;PATCH /api-public/v2/policies/{policy}/oncall/user&#x60;__  Replaces a currently on-call user on the team with another.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="body">The take on-call payload</param>
        /// <returns>ApiResponse of TakeResult</returns>
        public Org.OpenAPITools.Client.ApiResponse< TakeResult > ApiPublicV1TeamTeamOncallUserPatchWithHttpInfo (string xVOApiId, string xVOApiKey, string team, TakeRequest body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling OnCallApi->ApiPublicV1TeamTeamOncallUserPatch");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling OnCallApi->ApiPublicV1TeamTeamOncallUserPatch");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling OnCallApi->ApiPublicV1TeamTeamOncallUserPatch");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling OnCallApi->ApiPublicV1TeamTeamOncallUserPatch");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Patch< TakeResult >("/api-public/v1/team/{team}/oncall/user", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamOncallUserPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an on-call override (take on-call) __NOTE: This API call is deprecated. Please use &#x60;PATCH /api-public/v2/policies/{policy}/oncall/user&#x60;__  Replaces a currently on-call user on the team with another.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="body">The take on-call payload</param>
        /// <returns>Task of TakeResult</returns>
        public async System.Threading.Tasks.Task<TakeResult> ApiPublicV1TeamTeamOncallUserPatchAsync (string xVOApiId, string xVOApiKey, string team, TakeRequest body)
        {
             Org.OpenAPITools.Client.ApiResponse<TakeResult> localVarResponse = await ApiPublicV1TeamTeamOncallUserPatchAsyncWithHttpInfo(xVOApiId, xVOApiKey, team, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an on-call override (take on-call) __NOTE: This API call is deprecated. Please use &#x60;PATCH /api-public/v2/policies/{policy}/oncall/user&#x60;__  Replaces a currently on-call user on the team with another.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="body">The take on-call payload</param>
        /// <returns>Task of ApiResponse (TakeResult)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TakeResult>> ApiPublicV1TeamTeamOncallUserPatchAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team, TakeRequest body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling OnCallApi->ApiPublicV1TeamTeamOncallUserPatch");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling OnCallApi->ApiPublicV1TeamTeamOncallUserPatch");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling OnCallApi->ApiPublicV1TeamTeamOncallUserPatch");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling OnCallApi->ApiPublicV1TeamTeamOncallUserPatch");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<TakeResult>("/api-public/v1/team/{team}/oncall/user", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamOncallUserPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a user&#39;s on-call schedule __NOTE: This call is deprecated. Please use &#x60;GET /api-public/v2/user/{user}/oncall/schedule&#x60;.__  Get the on-call schedule for a user for all teams, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>List&lt;OnCallAndOverrides&gt;</returns>
        public List<OnCallAndOverrides> ApiPublicV1UserUserOncallScheduleGet (string xVOApiId, string xVOApiKey, string user, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?))
        {
             Org.OpenAPITools.Client.ApiResponse<List<OnCallAndOverrides>> localVarResponse = ApiPublicV1UserUserOncallScheduleGetWithHttpInfo(xVOApiId, xVOApiKey, user, daysForward, daysSkip, step);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user&#39;s on-call schedule __NOTE: This call is deprecated. Please use &#x60;GET /api-public/v2/user/{user}/oncall/schedule&#x60;.__  Get the on-call schedule for a user for all teams, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>ApiResponse of List&lt;OnCallAndOverrides&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse< List<OnCallAndOverrides> > ApiPublicV1UserUserOncallScheduleGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?))
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling OnCallApi->ApiPublicV1UserUserOncallScheduleGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling OnCallApi->ApiPublicV1UserUserOncallScheduleGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling OnCallApi->ApiPublicV1UserUserOncallScheduleGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (daysForward != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daysForward", daysForward))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (daysSkip != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daysSkip", daysSkip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (step != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "step", step))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<OnCallAndOverrides> >("/api-public/v1/user/{user}/oncall/schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserOncallScheduleGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a user&#39;s on-call schedule __NOTE: This call is deprecated. Please use &#x60;GET /api-public/v2/user/{user}/oncall/schedule&#x60;.__  Get the on-call schedule for a user for all teams, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>Task of List&lt;OnCallAndOverrides&gt;</returns>
        public async System.Threading.Tasks.Task<List<OnCallAndOverrides>> ApiPublicV1UserUserOncallScheduleGetAsync (string xVOApiId, string xVOApiKey, string user, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?))
        {
             Org.OpenAPITools.Client.ApiResponse<List<OnCallAndOverrides>> localVarResponse = await ApiPublicV1UserUserOncallScheduleGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, user, daysForward, daysSkip, step);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user&#39;s on-call schedule __NOTE: This call is deprecated. Please use &#x60;GET /api-public/v2/user/{user}/oncall/schedule&#x60;.__  Get the on-call schedule for a user for all teams, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>Task of ApiResponse (List&lt;OnCallAndOverrides&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<OnCallAndOverrides>>> ApiPublicV1UserUserOncallScheduleGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?))
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling OnCallApi->ApiPublicV1UserUserOncallScheduleGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling OnCallApi->ApiPublicV1UserUserOncallScheduleGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling OnCallApi->ApiPublicV1UserUserOncallScheduleGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (daysForward != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daysForward", daysForward))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (daysSkip != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daysSkip", daysSkip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (step != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "step", step))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OnCallAndOverrides>>("/api-public/v1/user/{user}/oncall/schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserOncallScheduleGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a team&#39;s on-call schedule Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>TeamSchedule</returns>
        public TeamSchedule ApiPublicV2TeamTeamOncallScheduleGet (string xVOApiId, string xVOApiKey, string team, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?))
        {
             Org.OpenAPITools.Client.ApiResponse<TeamSchedule> localVarResponse = ApiPublicV2TeamTeamOncallScheduleGetWithHttpInfo(xVOApiId, xVOApiKey, team, daysForward, daysSkip, step);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a team&#39;s on-call schedule Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>ApiResponse of TeamSchedule</returns>
        public Org.OpenAPITools.Client.ApiResponse< TeamSchedule > ApiPublicV2TeamTeamOncallScheduleGetWithHttpInfo (string xVOApiId, string xVOApiKey, string team, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?))
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling OnCallApi->ApiPublicV2TeamTeamOncallScheduleGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling OnCallApi->ApiPublicV2TeamTeamOncallScheduleGet");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling OnCallApi->ApiPublicV2TeamTeamOncallScheduleGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (daysForward != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daysForward", daysForward))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (daysSkip != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daysSkip", daysSkip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (step != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "step", step))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< TeamSchedule >("/api-public/v2/team/{team}/oncall/schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV2TeamTeamOncallScheduleGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a team&#39;s on-call schedule Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>Task of TeamSchedule</returns>
        public async System.Threading.Tasks.Task<TeamSchedule> ApiPublicV2TeamTeamOncallScheduleGetAsync (string xVOApiId, string xVOApiKey, string team, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?))
        {
             Org.OpenAPITools.Client.ApiResponse<TeamSchedule> localVarResponse = await ApiPublicV2TeamTeamOncallScheduleGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, team, daysForward, daysSkip, step);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a team&#39;s on-call schedule Get the on-call schedule for a team, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team &#39;slug&#39;</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>Task of ApiResponse (TeamSchedule)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TeamSchedule>> ApiPublicV2TeamTeamOncallScheduleGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?))
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling OnCallApi->ApiPublicV2TeamTeamOncallScheduleGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling OnCallApi->ApiPublicV2TeamTeamOncallScheduleGet");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling OnCallApi->ApiPublicV2TeamTeamOncallScheduleGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (daysForward != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daysForward", daysForward))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (daysSkip != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daysSkip", daysSkip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (step != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "step", step))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TeamSchedule>("/api-public/v2/team/{team}/oncall/schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV2TeamTeamOncallScheduleGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a user&#39;s on-call schedule Get the on-call schedule for a user for all teams the user is on, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>UserSchedule</returns>
        public UserSchedule ApiPublicV2UserUserOncallScheduleGet (string xVOApiId, string xVOApiKey, string user, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?))
        {
             Org.OpenAPITools.Client.ApiResponse<UserSchedule> localVarResponse = ApiPublicV2UserUserOncallScheduleGetWithHttpInfo(xVOApiId, xVOApiKey, user, daysForward, daysSkip, step);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user&#39;s on-call schedule Get the on-call schedule for a user for all teams the user is on, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>ApiResponse of UserSchedule</returns>
        public Org.OpenAPITools.Client.ApiResponse< UserSchedule > ApiPublicV2UserUserOncallScheduleGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?))
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling OnCallApi->ApiPublicV2UserUserOncallScheduleGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling OnCallApi->ApiPublicV2UserUserOncallScheduleGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling OnCallApi->ApiPublicV2UserUserOncallScheduleGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (daysForward != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daysForward", daysForward))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (daysSkip != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daysSkip", daysSkip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (step != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "step", step))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< UserSchedule >("/api-public/v2/user/{user}/oncall/schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV2UserUserOncallScheduleGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a user&#39;s on-call schedule Get the on-call schedule for a user for all teams the user is on, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>Task of UserSchedule</returns>
        public async System.Threading.Tasks.Task<UserSchedule> ApiPublicV2UserUserOncallScheduleGetAsync (string xVOApiId, string xVOApiKey, string user, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?))
        {
             Org.OpenAPITools.Client.ApiResponse<UserSchedule> localVarResponse = await ApiPublicV2UserUserOncallScheduleGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, user, daysForward, daysSkip, step);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user&#39;s on-call schedule Get the on-call schedule for a user for all teams the user is on, including on-call overrides.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="daysForward">Days to include in returned schedule (30 max) (optional, default to 14.0M)</param>
        /// <param name="daysSkip">Days to skip before computing schedule to return (90 max) (optional, default to 0.0M)</param>
        /// <param name="step">Step of escalation policy (3 max) (optional, default to 0.0M)</param>
        /// <returns>Task of ApiResponse (UserSchedule)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserSchedule>> ApiPublicV2UserUserOncallScheduleGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, decimal? daysForward = default(decimal?), decimal? daysSkip = default(decimal?), decimal? step = default(decimal?))
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling OnCallApi->ApiPublicV2UserUserOncallScheduleGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling OnCallApi->ApiPublicV2UserUserOncallScheduleGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling OnCallApi->ApiPublicV2UserUserOncallScheduleGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (daysForward != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daysForward", daysForward))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (daysSkip != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "daysSkip", daysSkip))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (step != null)
            {
                foreach (var _kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "step", step))
                {
                    foreach (var _kvpValue in _kvp.Value)
                    {
                        localVarRequestOptions.QueryParameters.Add(_kvp.Key, _kvpValue);
                    }
                }
            }
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserSchedule>("/api-public/v2/user/{user}/oncall/schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV2UserUserOncallScheduleGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
