/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScheduledOverridesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List the scheduled overrides
        /// </summary>
        /// <remarks>
        /// List all the scheduled overrides on the organization  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 ApiPublicV1OverridesGet (string xVOApiId, string xVOApiKey);

        /// <summary>
        /// List the scheduled overrides
        /// </summary>
        /// <remarks>
        /// List all the scheduled overrides on the organization  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> ApiPublicV1OverridesGetWithHttpInfo (string xVOApiId, string xVOApiKey);
        /// <summary>
        /// Creates a new scheduled override
        /// </summary>
        /// <remarks>
        /// Creates a new scheduled override. Start and end dates are in ISO8601 format. E.g. &#x60;2018-09-28&#39;T&#39;05:00:00Z&#x60;  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body"></param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 ApiPublicV1OverridesPost (string xVOApiId, string xVOApiKey, ScheduledOverridePayload body);

        /// <summary>
        /// Creates a new scheduled override
        /// </summary>
        /// <remarks>
        /// Creates a new scheduled override. Start and end dates are in ISO8601 format. E.g. &#x60;2018-09-28&#39;T&#39;05:00:00Z&#x60;  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> ApiPublicV1OverridesPostWithHttpInfo (string xVOApiId, string xVOApiKey, ScheduledOverridePayload body);
        /// <summary>
        /// Get the specified scheduled override
        /// </summary>
        /// <remarks>
        /// Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>List&lt;Assignment&gt;</returns>
        List<Assignment> ApiPublicV1OverridesPublicIdAssignmentsGet (string xVOApiId, string xVOApiKey, string publicId);

        /// <summary>
        /// Get the specified scheduled override
        /// </summary>
        /// <remarks>
        /// Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>ApiResponse of List&lt;Assignment&gt;</returns>
        ApiResponse<List<Assignment>> ApiPublicV1OverridesPublicIdAssignmentsGetWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId);
        /// <summary>
        /// Delete the scheduled override assignment
        /// </summary>
        /// <remarks>
        /// Delete the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <returns>Assignment</returns>
        Assignment ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete (string xVOApiId, string xVOApiKey, string publicId, string policySlug);

        /// <summary>
        /// Delete the scheduled override assignment
        /// </summary>
        /// <remarks>
        /// Delete the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <returns>ApiResponse of Assignment</returns>
        ApiResponse<Assignment> ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId, string policySlug);
        /// <summary>
        /// Get the specified scheduled override assignment
        /// </summary>
        /// <remarks>
        /// Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <returns>Assignment</returns>
        Assignment ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGet (string xVOApiId, string xVOApiKey, string publicId, string policySlug);

        /// <summary>
        /// Get the specified scheduled override assignment
        /// </summary>
        /// <remarks>
        /// Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <returns>ApiResponse of Assignment</returns>
        ApiResponse<Assignment> ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGetWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId, string policySlug);
        /// <summary>
        /// Update the scheduled override assignment
        /// </summary>
        /// <remarks>
        /// Update the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <param name="body">The policy and username we are assigning</param>
        /// <returns>Assignment</returns>
        Assignment ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPut (string xVOApiId, string xVOApiKey, string publicId, string policySlug, UpdateAssignment body);

        /// <summary>
        /// Update the scheduled override assignment
        /// </summary>
        /// <remarks>
        /// Update the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <param name="body">The policy and username we are assigning</param>
        /// <returns>ApiResponse of Assignment</returns>
        ApiResponse<Assignment> ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPutWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId, string policySlug, UpdateAssignment body);
        /// <summary>
        /// Deletes a scheduled override
        /// </summary>
        /// <remarks>
        /// Deletes a scheduled override  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns></returns>
        void ApiPublicV1OverridesPublicIdDelete (string xVOApiId, string xVOApiKey, string publicId);

        /// <summary>
        /// Deletes a scheduled override
        /// </summary>
        /// <remarks>
        /// Deletes a scheduled override  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiPublicV1OverridesPublicIdDeleteWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId);
        /// <summary>
        /// Get the specified scheduled override
        /// </summary>
        /// <remarks>
        /// Get the specified scheduled override  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 ApiPublicV1OverridesPublicIdGet (string xVOApiId, string xVOApiKey, string publicId);

        /// <summary>
        /// Get the specified scheduled override
        /// </summary>
        /// <remarks>
        /// Get the specified scheduled override  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> ApiPublicV1OverridesPublicIdGetWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScheduledOverridesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List the scheduled overrides
        /// </summary>
        /// <remarks>
        /// List all the scheduled overrides on the organization  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> ApiPublicV1OverridesGetAsync (string xVOApiId, string xVOApiKey);

        /// <summary>
        /// List the scheduled overrides
        /// </summary>
        /// <remarks>
        /// List all the scheduled overrides on the organization  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> ApiPublicV1OverridesGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey);
        /// <summary>
        /// Creates a new scheduled override
        /// </summary>
        /// <remarks>
        /// Creates a new scheduled override. Start and end dates are in ISO8601 format. E.g. &#x60;2018-09-28&#39;T&#39;05:00:00Z&#x60;  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> ApiPublicV1OverridesPostAsync (string xVOApiId, string xVOApiKey, ScheduledOverridePayload body);

        /// <summary>
        /// Creates a new scheduled override
        /// </summary>
        /// <remarks>
        /// Creates a new scheduled override. Start and end dates are in ISO8601 format. E.g. &#x60;2018-09-28&#39;T&#39;05:00:00Z&#x60;  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> ApiPublicV1OverridesPostAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, ScheduledOverridePayload body);
        /// <summary>
        /// Get the specified scheduled override
        /// </summary>
        /// <remarks>
        /// Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>Task of List&lt;Assignment&gt;</returns>
        System.Threading.Tasks.Task<List<Assignment>> ApiPublicV1OverridesPublicIdAssignmentsGetAsync (string xVOApiId, string xVOApiKey, string publicId);

        /// <summary>
        /// Get the specified scheduled override
        /// </summary>
        /// <remarks>
        /// Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>Task of ApiResponse (List&lt;Assignment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Assignment>>> ApiPublicV1OverridesPublicIdAssignmentsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId);
        /// <summary>
        /// Delete the scheduled override assignment
        /// </summary>
        /// <remarks>
        /// Delete the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <returns>Task of Assignment</returns>
        System.Threading.Tasks.Task<Assignment> ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteAsync (string xVOApiId, string xVOApiKey, string publicId, string policySlug);

        /// <summary>
        /// Delete the scheduled override assignment
        /// </summary>
        /// <remarks>
        /// Delete the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <returns>Task of ApiResponse (Assignment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Assignment>> ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId, string policySlug);
        /// <summary>
        /// Get the specified scheduled override assignment
        /// </summary>
        /// <remarks>
        /// Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <returns>Task of Assignment</returns>
        System.Threading.Tasks.Task<Assignment> ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGetAsync (string xVOApiId, string xVOApiKey, string publicId, string policySlug);

        /// <summary>
        /// Get the specified scheduled override assignment
        /// </summary>
        /// <remarks>
        /// Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <returns>Task of ApiResponse (Assignment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Assignment>> ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId, string policySlug);
        /// <summary>
        /// Update the scheduled override assignment
        /// </summary>
        /// <remarks>
        /// Update the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <param name="body">The policy and username we are assigning</param>
        /// <returns>Task of Assignment</returns>
        System.Threading.Tasks.Task<Assignment> ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPutAsync (string xVOApiId, string xVOApiKey, string publicId, string policySlug, UpdateAssignment body);

        /// <summary>
        /// Update the scheduled override assignment
        /// </summary>
        /// <remarks>
        /// Update the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <param name="body">The policy and username we are assigning</param>
        /// <returns>Task of ApiResponse (Assignment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Assignment>> ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPutAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId, string policySlug, UpdateAssignment body);
        /// <summary>
        /// Deletes a scheduled override
        /// </summary>
        /// <remarks>
        /// Deletes a scheduled override  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiPublicV1OverridesPublicIdDeleteAsync (string xVOApiId, string xVOApiKey, string publicId);

        /// <summary>
        /// Deletes a scheduled override
        /// </summary>
        /// <remarks>
        /// Deletes a scheduled override  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiPublicV1OverridesPublicIdDeleteAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId);
        /// <summary>
        /// Get the specified scheduled override
        /// </summary>
        /// <remarks>
        /// Get the specified scheduled override  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> ApiPublicV1OverridesPublicIdGetAsync (string xVOApiId, string xVOApiKey, string publicId);

        /// <summary>
        /// Get the specified scheduled override
        /// </summary>
        /// <remarks>
        /// Get the specified scheduled override  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> ApiPublicV1OverridesPublicIdGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScheduledOverridesApi : IScheduledOverridesApiSync, IScheduledOverridesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ScheduledOverridesApi : IScheduledOverridesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledOverridesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScheduledOverridesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledOverridesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScheduledOverridesApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledOverridesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScheduledOverridesApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduledOverridesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ScheduledOverridesApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List the scheduled overrides List all the scheduled overrides on the organization  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 ApiPublicV1OverridesGet (string xVOApiId, string xVOApiKey)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse2008> localVarResponse = ApiPublicV1OverridesGetWithHttpInfo(xVOApiId, xVOApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the scheduled overrides List all the scheduled overrides on the organization  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public Org.OpenAPITools.Client.ApiResponse< InlineResponse2008 > ApiPublicV1OverridesGetWithHttpInfo (string xVOApiId, string xVOApiKey)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ScheduledOverridesApi->ApiPublicV1OverridesGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ScheduledOverridesApi->ApiPublicV1OverridesGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2008 >("/api-public/v1/overrides", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OverridesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List the scheduled overrides List all the scheduled overrides on the organization  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> ApiPublicV1OverridesGetAsync (string xVOApiId, string xVOApiKey)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse2008> localVarResponse = await ApiPublicV1OverridesGetAsyncWithHttpInfo(xVOApiId, xVOApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the scheduled overrides List all the scheduled overrides on the organization  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InlineResponse2008>> ApiPublicV1OverridesGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ScheduledOverridesApi->ApiPublicV1OverridesGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ScheduledOverridesApi->ApiPublicV1OverridesGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2008>("/api-public/v1/overrides", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OverridesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new scheduled override Creates a new scheduled override. Start and end dates are in ISO8601 format. E.g. &#x60;2018-09-28&#39;T&#39;05:00:00Z&#x60;  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body"></param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 ApiPublicV1OverridesPost (string xVOApiId, string xVOApiKey, ScheduledOverridePayload body)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse2009> localVarResponse = ApiPublicV1OverridesPostWithHttpInfo(xVOApiId, xVOApiKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new scheduled override Creates a new scheduled override. Start and end dates are in ISO8601 format. E.g. &#x60;2018-09-28&#39;T&#39;05:00:00Z&#x60;  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public Org.OpenAPITools.Client.ApiResponse< InlineResponse2009 > ApiPublicV1OverridesPostWithHttpInfo (string xVOApiId, string xVOApiKey, ScheduledOverridePayload body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPost");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ScheduledOverridesApi->ApiPublicV1OverridesPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling ScheduledOverridesApi->ApiPublicV1OverridesPost");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse2009 >("/api-public/v1/overrides", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OverridesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new scheduled override Creates a new scheduled override. Start and end dates are in ISO8601 format. E.g. &#x60;2018-09-28&#39;T&#39;05:00:00Z&#x60;  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> ApiPublicV1OverridesPostAsync (string xVOApiId, string xVOApiKey, ScheduledOverridePayload body)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse2009> localVarResponse = await ApiPublicV1OverridesPostAsyncWithHttpInfo(xVOApiId, xVOApiKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new scheduled override Creates a new scheduled override. Start and end dates are in ISO8601 format. E.g. &#x60;2018-09-28&#39;T&#39;05:00:00Z&#x60;  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InlineResponse2009>> ApiPublicV1OverridesPostAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, ScheduledOverridePayload body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPost");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ScheduledOverridesApi->ApiPublicV1OverridesPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling ScheduledOverridesApi->ApiPublicV1OverridesPost");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse2009>("/api-public/v1/overrides", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OverridesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the specified scheduled override Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>List&lt;Assignment&gt;</returns>
        public List<Assignment> ApiPublicV1OverridesPublicIdAssignmentsGet (string xVOApiId, string xVOApiKey, string publicId)
        {
             Org.OpenAPITools.Client.ApiResponse<List<Assignment>> localVarResponse = ApiPublicV1OverridesPublicIdAssignmentsGetWithHttpInfo(xVOApiId, xVOApiKey, publicId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the specified scheduled override Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>ApiResponse of List&lt;Assignment&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse< List<Assignment> > ApiPublicV1OverridesPublicIdAssignmentsGetWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsGet");

            // verify the required parameter 'publicId' is set
            if (publicId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'publicId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (publicId != null)
                localVarRequestOptions.PathParameters.Add("publicId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<Assignment> >("/api-public/v1/overrides/{publicId}/assignments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OverridesPublicIdAssignmentsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the specified scheduled override Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>Task of List&lt;Assignment&gt;</returns>
        public async System.Threading.Tasks.Task<List<Assignment>> ApiPublicV1OverridesPublicIdAssignmentsGetAsync (string xVOApiId, string xVOApiKey, string publicId)
        {
             Org.OpenAPITools.Client.ApiResponse<List<Assignment>> localVarResponse = await ApiPublicV1OverridesPublicIdAssignmentsGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, publicId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the specified scheduled override Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>Task of ApiResponse (List&lt;Assignment&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Assignment>>> ApiPublicV1OverridesPublicIdAssignmentsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsGet");

            // verify the required parameter 'publicId' is set
            if (publicId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'publicId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (publicId != null)
                localVarRequestOptions.PathParameters.Add("publicId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Assignment>>("/api-public/v1/overrides/{publicId}/assignments", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OverridesPublicIdAssignmentsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the scheduled override assignment Delete the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <returns>Assignment</returns>
        public Assignment ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete (string xVOApiId, string xVOApiKey, string publicId, string policySlug)
        {
             Org.OpenAPITools.Client.ApiResponse<Assignment> localVarResponse = ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteWithHttpInfo(xVOApiId, xVOApiKey, publicId, policySlug);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the scheduled override assignment Delete the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <returns>ApiResponse of Assignment</returns>
        public Org.OpenAPITools.Client.ApiResponse< Assignment > ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId, string policySlug)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete");

            // verify the required parameter 'publicId' is set
            if (publicId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'publicId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete");

            // verify the required parameter 'policySlug' is set
            if (policySlug == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policySlug' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (publicId != null)
                localVarRequestOptions.PathParameters.Add("publicId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            if (policySlug != null)
                localVarRequestOptions.PathParameters.Add("policySlug", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policySlug)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete< Assignment >("/api-public/v1/overrides/{publicId}/assignments/{policySlug}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete the scheduled override assignment Delete the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <returns>Task of Assignment</returns>
        public async System.Threading.Tasks.Task<Assignment> ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteAsync (string xVOApiId, string xVOApiKey, string publicId, string policySlug)
        {
             Org.OpenAPITools.Client.ApiResponse<Assignment> localVarResponse = await ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteAsyncWithHttpInfo(xVOApiId, xVOApiKey, publicId, policySlug);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete the scheduled override assignment Delete the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <returns>Task of ApiResponse (Assignment)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Assignment>> ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDeleteAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId, string policySlug)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete");

            // verify the required parameter 'publicId' is set
            if (publicId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'publicId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete");

            // verify the required parameter 'policySlug' is set
            if (policySlug == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policySlug' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (publicId != null)
                localVarRequestOptions.PathParameters.Add("publicId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            if (policySlug != null)
                localVarRequestOptions.PathParameters.Add("policySlug", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policySlug)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Assignment>("/api-public/v1/overrides/{publicId}/assignments/{policySlug}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OverridesPublicIdAssignmentsPolicySlugDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the specified scheduled override assignment Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <returns>Assignment</returns>
        public Assignment ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGet (string xVOApiId, string xVOApiKey, string publicId, string policySlug)
        {
             Org.OpenAPITools.Client.ApiResponse<Assignment> localVarResponse = ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGetWithHttpInfo(xVOApiId, xVOApiKey, publicId, policySlug);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the specified scheduled override assignment Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <returns>ApiResponse of Assignment</returns>
        public Org.OpenAPITools.Client.ApiResponse< Assignment > ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGetWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId, string policySlug)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGet");

            // verify the required parameter 'publicId' is set
            if (publicId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'publicId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGet");

            // verify the required parameter 'policySlug' is set
            if (policySlug == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policySlug' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (publicId != null)
                localVarRequestOptions.PathParameters.Add("publicId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            if (policySlug != null)
                localVarRequestOptions.PathParameters.Add("policySlug", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policySlug)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< Assignment >("/api-public/v1/overrides/{publicId}/assignments/{policySlug}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the specified scheduled override assignment Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <returns>Task of Assignment</returns>
        public async System.Threading.Tasks.Task<Assignment> ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGetAsync (string xVOApiId, string xVOApiKey, string publicId, string policySlug)
        {
             Org.OpenAPITools.Client.ApiResponse<Assignment> localVarResponse = await ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, publicId, policySlug);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the specified scheduled override assignment Get the specified scheduled override assignments  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <returns>Task of ApiResponse (Assignment)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Assignment>> ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId, string policySlug)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGet");

            // verify the required parameter 'publicId' is set
            if (publicId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'publicId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGet");

            // verify the required parameter 'policySlug' is set
            if (policySlug == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policySlug' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (publicId != null)
                localVarRequestOptions.PathParameters.Add("publicId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            if (policySlug != null)
                localVarRequestOptions.PathParameters.Add("policySlug", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policySlug)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Assignment>("/api-public/v1/overrides/{publicId}/assignments/{policySlug}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OverridesPublicIdAssignmentsPolicySlugGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the scheduled override assignment Update the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <param name="body">The policy and username we are assigning</param>
        /// <returns>Assignment</returns>
        public Assignment ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPut (string xVOApiId, string xVOApiKey, string publicId, string policySlug, UpdateAssignment body)
        {
             Org.OpenAPITools.Client.ApiResponse<Assignment> localVarResponse = ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPutWithHttpInfo(xVOApiId, xVOApiKey, publicId, policySlug, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the scheduled override assignment Update the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <param name="body">The policy and username we are assigning</param>
        /// <returns>ApiResponse of Assignment</returns>
        public Org.OpenAPITools.Client.ApiResponse< Assignment > ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPutWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId, string policySlug, UpdateAssignment body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPut");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPut");

            // verify the required parameter 'publicId' is set
            if (publicId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'publicId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPut");

            // verify the required parameter 'policySlug' is set
            if (policySlug == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policySlug' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPut");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (publicId != null)
                localVarRequestOptions.PathParameters.Add("publicId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            if (policySlug != null)
                localVarRequestOptions.PathParameters.Add("policySlug", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policySlug)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put< Assignment >("/api-public/v1/overrides/{publicId}/assignments/{policySlug}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the scheduled override assignment Update the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <param name="body">The policy and username we are assigning</param>
        /// <returns>Task of Assignment</returns>
        public async System.Threading.Tasks.Task<Assignment> ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPutAsync (string xVOApiId, string xVOApiKey, string publicId, string policySlug, UpdateAssignment body)
        {
             Org.OpenAPITools.Client.ApiResponse<Assignment> localVarResponse = await ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPutAsyncWithHttpInfo(xVOApiId, xVOApiKey, publicId, policySlug, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the scheduled override assignment Update the scheduled override assignment  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <param name="policySlug">The policySlug of the assignment</param>
        /// <param name="body">The policy and username we are assigning</param>
        /// <returns>Task of ApiResponse (Assignment)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Assignment>> ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPutAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId, string policySlug, UpdateAssignment body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPut");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPut");

            // verify the required parameter 'publicId' is set
            if (publicId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'publicId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPut");

            // verify the required parameter 'policySlug' is set
            if (policySlug == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'policySlug' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPut");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (publicId != null)
                localVarRequestOptions.PathParameters.Add("publicId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            if (policySlug != null)
                localVarRequestOptions.PathParameters.Add("policySlug", Org.OpenAPITools.Client.ClientUtils.ParameterToString(policySlug)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Assignment>("/api-public/v1/overrides/{publicId}/assignments/{policySlug}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OverridesPublicIdAssignmentsPolicySlugPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a scheduled override Deletes a scheduled override  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns></returns>
        public void ApiPublicV1OverridesPublicIdDelete (string xVOApiId, string xVOApiKey, string publicId)
        {
             ApiPublicV1OverridesPublicIdDeleteWithHttpInfo(xVOApiId, xVOApiKey, publicId);
        }

        /// <summary>
        /// Deletes a scheduled override Deletes a scheduled override  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ApiPublicV1OverridesPublicIdDeleteWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdDelete");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdDelete");

            // verify the required parameter 'publicId' is set
            if (publicId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'publicId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdDelete");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (publicId != null)
                localVarRequestOptions.PathParameters.Add("publicId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api-public/v1/overrides/{publicId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OverridesPublicIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a scheduled override Deletes a scheduled override  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiPublicV1OverridesPublicIdDeleteAsync (string xVOApiId, string xVOApiKey, string publicId)
        {
             await ApiPublicV1OverridesPublicIdDeleteAsyncWithHttpInfo(xVOApiId, xVOApiKey, publicId);

        }

        /// <summary>
        /// Deletes a scheduled override Deletes a scheduled override  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ApiPublicV1OverridesPublicIdDeleteAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdDelete");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdDelete");

            // verify the required parameter 'publicId' is set
            if (publicId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'publicId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdDelete");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (publicId != null)
                localVarRequestOptions.PathParameters.Add("publicId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api-public/v1/overrides/{publicId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OverridesPublicIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the specified scheduled override Get the specified scheduled override  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 ApiPublicV1OverridesPublicIdGet (string xVOApiId, string xVOApiKey, string publicId)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse20010> localVarResponse = ApiPublicV1OverridesPublicIdGetWithHttpInfo(xVOApiId, xVOApiKey, publicId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the specified scheduled override Get the specified scheduled override  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public Org.OpenAPITools.Client.ApiResponse< InlineResponse20010 > ApiPublicV1OverridesPublicIdGetWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdGet");

            // verify the required parameter 'publicId' is set
            if (publicId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'publicId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (publicId != null)
                localVarRequestOptions.PathParameters.Add("publicId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20010 >("/api-public/v1/overrides/{publicId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OverridesPublicIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the specified scheduled override Get the specified scheduled override  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> ApiPublicV1OverridesPublicIdGetAsync (string xVOApiId, string xVOApiKey, string publicId)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse20010> localVarResponse = await ApiPublicV1OverridesPublicIdGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, publicId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the specified scheduled override Get the specified scheduled override  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="publicId">The publicId of the scheduled override</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InlineResponse20010>> ApiPublicV1OverridesPublicIdGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string publicId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdGet");

            // verify the required parameter 'publicId' is set
            if (publicId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'publicId' when calling ScheduledOverridesApi->ApiPublicV1OverridesPublicIdGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (publicId != null)
                localVarRequestOptions.PathParameters.Add("publicId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(publicId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20010>("/api-public/v1/overrides/{publicId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1OverridesPublicIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
