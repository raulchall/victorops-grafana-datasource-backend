/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserContactMethodsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a contact device for a user
        /// </summary>
        /// <remarks>
        /// Delete a contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>ContactDevice</returns>
        ContactDevice ApiPublicV1UserUserContactMethodsDevicesContactIdDelete (string xVOApiId, string xVOApiKey, string user, string contactId);

        /// <summary>
        /// Delete a contact device for a user
        /// </summary>
        /// <remarks>
        /// Delete a contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>ApiResponse of ContactDevice</returns>
        ApiResponse<ContactDevice> ApiPublicV1UserUserContactMethodsDevicesContactIdDeleteWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId);
        /// <summary>
        /// Get the indicated contact device for a user
        /// </summary>
        /// <remarks>
        /// Get the indicated contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>List&lt;ContactDevice&gt;</returns>
        List<ContactDevice> ApiPublicV1UserUserContactMethodsDevicesContactIdGet (string xVOApiId, string xVOApiKey, string user, string contactId);

        /// <summary>
        /// Get the indicated contact device for a user
        /// </summary>
        /// <remarks>
        /// Get the indicated contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>ApiResponse of List&lt;ContactDevice&gt;</returns>
        ApiResponse<List<ContactDevice>> ApiPublicV1UserUserContactMethodsDevicesContactIdGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId);
        /// <summary>
        /// Update a contact device for a user
        /// </summary>
        /// <remarks>
        /// Update a contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <param name="body">The contact device</param>
        /// <returns>ContactDevice</returns>
        ContactDevice ApiPublicV1UserUserContactMethodsDevicesContactIdPut (string xVOApiId, string xVOApiKey, string user, string contactId, ContactDeviceAdd body);

        /// <summary>
        /// Update a contact device for a user
        /// </summary>
        /// <remarks>
        /// Update a contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <param name="body">The contact device</param>
        /// <returns>ApiResponse of ContactDevice</returns>
        ApiResponse<ContactDevice> ApiPublicV1UserUserContactMethodsDevicesContactIdPutWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId, ContactDeviceAdd body);
        /// <summary>
        /// Get a list of all contact devices for a user
        /// </summary>
        /// <remarks>
        /// Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>List&lt;ContactDevice&gt;</returns>
        List<ContactDevice> ApiPublicV1UserUserContactMethodsDevicesGet (string xVOApiId, string xVOApiKey, string user);

        /// <summary>
        /// Get a list of all contact devices for a user
        /// </summary>
        /// <remarks>
        /// Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>ApiResponse of List&lt;ContactDevice&gt;</returns>
        ApiResponse<List<ContactDevice>> ApiPublicV1UserUserContactMethodsDevicesGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user);
        /// <summary>
        /// Delete a contact email for a user
        /// </summary>
        /// <remarks>
        /// Delete the indicated contact email for the user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>UserContact</returns>
        UserContact ApiPublicV1UserUserContactMethodsEmailsContactIdDelete (string xVOApiId, string xVOApiKey, string user, string contactId);

        /// <summary>
        /// Delete a contact email for a user
        /// </summary>
        /// <remarks>
        /// Delete the indicated contact email for the user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>ApiResponse of UserContact</returns>
        ApiResponse<UserContact> ApiPublicV1UserUserContactMethodsEmailsContactIdDeleteWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId);
        /// <summary>
        /// Get the indicated contact email for a user
        /// </summary>
        /// <remarks>
        /// Get the indicated contact email for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>List&lt;UserContact&gt;</returns>
        List<UserContact> ApiPublicV1UserUserContactMethodsEmailsContactIdGet (string xVOApiId, string xVOApiKey, string user, string contactId);

        /// <summary>
        /// Get the indicated contact email for a user
        /// </summary>
        /// <remarks>
        /// Get the indicated contact email for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>ApiResponse of List&lt;UserContact&gt;</returns>
        ApiResponse<List<UserContact>> ApiPublicV1UserUserContactMethodsEmailsContactIdGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId);
        /// <summary>
        /// Get a list of all contact emails for a user
        /// </summary>
        /// <remarks>
        /// Get the contact emails for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>List&lt;UserContact&gt;</returns>
        List<UserContact> ApiPublicV1UserUserContactMethodsEmailsGet (string xVOApiId, string xVOApiKey, string user);

        /// <summary>
        /// Get a list of all contact emails for a user
        /// </summary>
        /// <remarks>
        /// Get the contact emails for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>ApiResponse of List&lt;UserContact&gt;</returns>
        ApiResponse<List<UserContact>> ApiPublicV1UserUserContactMethodsEmailsGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user);
        /// <summary>
        /// Create a contact emails for a user
        /// </summary>
        /// <remarks>
        /// Create a contact email for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="body">The contact email</param>
        /// <returns>UserContact</returns>
        UserContact ApiPublicV1UserUserContactMethodsEmailsPost (string xVOApiId, string xVOApiKey, string user, ContactEmailAdd body);

        /// <summary>
        /// Create a contact emails for a user
        /// </summary>
        /// <remarks>
        /// Create a contact email for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="body">The contact email</param>
        /// <returns>ApiResponse of UserContact</returns>
        ApiResponse<UserContact> ApiPublicV1UserUserContactMethodsEmailsPostWithHttpInfo (string xVOApiId, string xVOApiKey, string user, ContactEmailAdd body);
        /// <summary>
        /// Get a list of all contact methods for a user
        /// </summary>
        /// <remarks>
        /// Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 ApiPublicV1UserUserContactMethodsGet (string xVOApiId, string xVOApiKey, string user);

        /// <summary>
        /// Get a list of all contact methods for a user
        /// </summary>
        /// <remarks>
        /// Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> ApiPublicV1UserUserContactMethodsGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user);
        /// <summary>
        /// Delete a contact phone for a user
        /// </summary>
        /// <remarks>
        /// Delete the indicated contact phone for the user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>UserContact</returns>
        UserContact ApiPublicV1UserUserContactMethodsPhonesContactIdDelete (string xVOApiId, string xVOApiKey, string user, string contactId);

        /// <summary>
        /// Delete a contact phone for a user
        /// </summary>
        /// <remarks>
        /// Delete the indicated contact phone for the user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>ApiResponse of UserContact</returns>
        ApiResponse<UserContact> ApiPublicV1UserUserContactMethodsPhonesContactIdDeleteWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId);
        /// <summary>
        /// Get the indicated contact phone for a user
        /// </summary>
        /// <remarks>
        /// Get the indicated contact phone for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>List&lt;UserContact&gt;</returns>
        List<UserContact> ApiPublicV1UserUserContactMethodsPhonesContactIdGet (string xVOApiId, string xVOApiKey, string user, string contactId);

        /// <summary>
        /// Get the indicated contact phone for a user
        /// </summary>
        /// <remarks>
        /// Get the indicated contact phone for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>ApiResponse of List&lt;UserContact&gt;</returns>
        ApiResponse<List<UserContact>> ApiPublicV1UserUserContactMethodsPhonesContactIdGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId);
        /// <summary>
        /// Get a list of all contact phones for a user
        /// </summary>
        /// <remarks>
        /// Get the contact phones for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>List&lt;UserContact&gt;</returns>
        List<UserContact> ApiPublicV1UserUserContactMethodsPhonesGet (string xVOApiId, string xVOApiKey, string user);

        /// <summary>
        /// Get a list of all contact phones for a user
        /// </summary>
        /// <remarks>
        /// Get the contact phones for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>ApiResponse of List&lt;UserContact&gt;</returns>
        ApiResponse<List<UserContact>> ApiPublicV1UserUserContactMethodsPhonesGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user);
        /// <summary>
        /// Create a contact phones for a user
        /// </summary>
        /// <remarks>
        /// Create a contact phone for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="body">The contact phone</param>
        /// <returns>UserContact</returns>
        UserContact ApiPublicV1UserUserContactMethodsPhonesPost (string xVOApiId, string xVOApiKey, string user, ContactPhoneAdd body);

        /// <summary>
        /// Create a contact phones for a user
        /// </summary>
        /// <remarks>
        /// Create a contact phone for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="body">The contact phone</param>
        /// <returns>ApiResponse of UserContact</returns>
        ApiResponse<UserContact> ApiPublicV1UserUserContactMethodsPhonesPostWithHttpInfo (string xVOApiId, string xVOApiKey, string user, ContactPhoneAdd body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserContactMethodsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a contact device for a user
        /// </summary>
        /// <remarks>
        /// Delete a contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of ContactDevice</returns>
        System.Threading.Tasks.Task<ContactDevice> ApiPublicV1UserUserContactMethodsDevicesContactIdDeleteAsync (string xVOApiId, string xVOApiKey, string user, string contactId);

        /// <summary>
        /// Delete a contact device for a user
        /// </summary>
        /// <remarks>
        /// Delete a contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of ApiResponse (ContactDevice)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactDevice>> ApiPublicV1UserUserContactMethodsDevicesContactIdDeleteAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId);
        /// <summary>
        /// Get the indicated contact device for a user
        /// </summary>
        /// <remarks>
        /// Get the indicated contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of List&lt;ContactDevice&gt;</returns>
        System.Threading.Tasks.Task<List<ContactDevice>> ApiPublicV1UserUserContactMethodsDevicesContactIdGetAsync (string xVOApiId, string xVOApiKey, string user, string contactId);

        /// <summary>
        /// Get the indicated contact device for a user
        /// </summary>
        /// <remarks>
        /// Get the indicated contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of ApiResponse (List&lt;ContactDevice&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactDevice>>> ApiPublicV1UserUserContactMethodsDevicesContactIdGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId);
        /// <summary>
        /// Update a contact device for a user
        /// </summary>
        /// <remarks>
        /// Update a contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <param name="body">The contact device</param>
        /// <returns>Task of ContactDevice</returns>
        System.Threading.Tasks.Task<ContactDevice> ApiPublicV1UserUserContactMethodsDevicesContactIdPutAsync (string xVOApiId, string xVOApiKey, string user, string contactId, ContactDeviceAdd body);

        /// <summary>
        /// Update a contact device for a user
        /// </summary>
        /// <remarks>
        /// Update a contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <param name="body">The contact device</param>
        /// <returns>Task of ApiResponse (ContactDevice)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactDevice>> ApiPublicV1UserUserContactMethodsDevicesContactIdPutAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId, ContactDeviceAdd body);
        /// <summary>
        /// Get a list of all contact devices for a user
        /// </summary>
        /// <remarks>
        /// Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>Task of List&lt;ContactDevice&gt;</returns>
        System.Threading.Tasks.Task<List<ContactDevice>> ApiPublicV1UserUserContactMethodsDevicesGetAsync (string xVOApiId, string xVOApiKey, string user);

        /// <summary>
        /// Get a list of all contact devices for a user
        /// </summary>
        /// <remarks>
        /// Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>Task of ApiResponse (List&lt;ContactDevice&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContactDevice>>> ApiPublicV1UserUserContactMethodsDevicesGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user);
        /// <summary>
        /// Delete a contact email for a user
        /// </summary>
        /// <remarks>
        /// Delete the indicated contact email for the user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of UserContact</returns>
        System.Threading.Tasks.Task<UserContact> ApiPublicV1UserUserContactMethodsEmailsContactIdDeleteAsync (string xVOApiId, string xVOApiKey, string user, string contactId);

        /// <summary>
        /// Delete a contact email for a user
        /// </summary>
        /// <remarks>
        /// Delete the indicated contact email for the user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of ApiResponse (UserContact)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserContact>> ApiPublicV1UserUserContactMethodsEmailsContactIdDeleteAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId);
        /// <summary>
        /// Get the indicated contact email for a user
        /// </summary>
        /// <remarks>
        /// Get the indicated contact email for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of List&lt;UserContact&gt;</returns>
        System.Threading.Tasks.Task<List<UserContact>> ApiPublicV1UserUserContactMethodsEmailsContactIdGetAsync (string xVOApiId, string xVOApiKey, string user, string contactId);

        /// <summary>
        /// Get the indicated contact email for a user
        /// </summary>
        /// <remarks>
        /// Get the indicated contact email for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of ApiResponse (List&lt;UserContact&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserContact>>> ApiPublicV1UserUserContactMethodsEmailsContactIdGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId);
        /// <summary>
        /// Get a list of all contact emails for a user
        /// </summary>
        /// <remarks>
        /// Get the contact emails for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>Task of List&lt;UserContact&gt;</returns>
        System.Threading.Tasks.Task<List<UserContact>> ApiPublicV1UserUserContactMethodsEmailsGetAsync (string xVOApiId, string xVOApiKey, string user);

        /// <summary>
        /// Get a list of all contact emails for a user
        /// </summary>
        /// <remarks>
        /// Get the contact emails for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>Task of ApiResponse (List&lt;UserContact&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserContact>>> ApiPublicV1UserUserContactMethodsEmailsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user);
        /// <summary>
        /// Create a contact emails for a user
        /// </summary>
        /// <remarks>
        /// Create a contact email for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="body">The contact email</param>
        /// <returns>Task of UserContact</returns>
        System.Threading.Tasks.Task<UserContact> ApiPublicV1UserUserContactMethodsEmailsPostAsync (string xVOApiId, string xVOApiKey, string user, ContactEmailAdd body);

        /// <summary>
        /// Create a contact emails for a user
        /// </summary>
        /// <remarks>
        /// Create a contact email for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="body">The contact email</param>
        /// <returns>Task of ApiResponse (UserContact)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserContact>> ApiPublicV1UserUserContactMethodsEmailsPostAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, ContactEmailAdd body);
        /// <summary>
        /// Get a list of all contact methods for a user
        /// </summary>
        /// <remarks>
        /// Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> ApiPublicV1UserUserContactMethodsGetAsync (string xVOApiId, string xVOApiKey, string user);

        /// <summary>
        /// Get a list of all contact methods for a user
        /// </summary>
        /// <remarks>
        /// Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ApiPublicV1UserUserContactMethodsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user);
        /// <summary>
        /// Delete a contact phone for a user
        /// </summary>
        /// <remarks>
        /// Delete the indicated contact phone for the user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of UserContact</returns>
        System.Threading.Tasks.Task<UserContact> ApiPublicV1UserUserContactMethodsPhonesContactIdDeleteAsync (string xVOApiId, string xVOApiKey, string user, string contactId);

        /// <summary>
        /// Delete a contact phone for a user
        /// </summary>
        /// <remarks>
        /// Delete the indicated contact phone for the user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of ApiResponse (UserContact)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserContact>> ApiPublicV1UserUserContactMethodsPhonesContactIdDeleteAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId);
        /// <summary>
        /// Get the indicated contact phone for a user
        /// </summary>
        /// <remarks>
        /// Get the indicated contact phone for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of List&lt;UserContact&gt;</returns>
        System.Threading.Tasks.Task<List<UserContact>> ApiPublicV1UserUserContactMethodsPhonesContactIdGetAsync (string xVOApiId, string xVOApiKey, string user, string contactId);

        /// <summary>
        /// Get the indicated contact phone for a user
        /// </summary>
        /// <remarks>
        /// Get the indicated contact phone for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of ApiResponse (List&lt;UserContact&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserContact>>> ApiPublicV1UserUserContactMethodsPhonesContactIdGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId);
        /// <summary>
        /// Get a list of all contact phones for a user
        /// </summary>
        /// <remarks>
        /// Get the contact phones for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>Task of List&lt;UserContact&gt;</returns>
        System.Threading.Tasks.Task<List<UserContact>> ApiPublicV1UserUserContactMethodsPhonesGetAsync (string xVOApiId, string xVOApiKey, string user);

        /// <summary>
        /// Get a list of all contact phones for a user
        /// </summary>
        /// <remarks>
        /// Get the contact phones for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>Task of ApiResponse (List&lt;UserContact&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserContact>>> ApiPublicV1UserUserContactMethodsPhonesGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user);
        /// <summary>
        /// Create a contact phones for a user
        /// </summary>
        /// <remarks>
        /// Create a contact phone for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="body">The contact phone</param>
        /// <returns>Task of UserContact</returns>
        System.Threading.Tasks.Task<UserContact> ApiPublicV1UserUserContactMethodsPhonesPostAsync (string xVOApiId, string xVOApiKey, string user, ContactPhoneAdd body);

        /// <summary>
        /// Create a contact phones for a user
        /// </summary>
        /// <remarks>
        /// Create a contact phone for a user  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="body">The contact phone</param>
        /// <returns>Task of ApiResponse (UserContact)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserContact>> ApiPublicV1UserUserContactMethodsPhonesPostAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, ContactPhoneAdd body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserContactMethodsApi : IUserContactMethodsApiSync, IUserContactMethodsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserContactMethodsApi : IUserContactMethodsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserContactMethodsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserContactMethodsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserContactMethodsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserContactMethodsApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserContactMethodsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserContactMethodsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserContactMethodsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserContactMethodsApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a contact device for a user Delete a contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>ContactDevice</returns>
        public ContactDevice ApiPublicV1UserUserContactMethodsDevicesContactIdDelete (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
             Org.OpenAPITools.Client.ApiResponse<ContactDevice> localVarResponse = ApiPublicV1UserUserContactMethodsDevicesContactIdDeleteWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a contact device for a user Delete a contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>ApiResponse of ContactDevice</returns>
        public Org.OpenAPITools.Client.ApiResponse< ContactDevice > ApiPublicV1UserUserContactMethodsDevicesContactIdDeleteWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdDelete");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdDelete");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdDelete");

            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdDelete");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (contactId != null)
                localVarRequestOptions.PathParameters.Add("contactId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete< ContactDevice >("/api-public/v1/user/{user}/contact-methods/devices/{contactId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsDevicesContactIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a contact device for a user Delete a contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of ContactDevice</returns>
        public async System.Threading.Tasks.Task<ContactDevice> ApiPublicV1UserUserContactMethodsDevicesContactIdDeleteAsync (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
             Org.OpenAPITools.Client.ApiResponse<ContactDevice> localVarResponse = await ApiPublicV1UserUserContactMethodsDevicesContactIdDeleteAsyncWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a contact device for a user Delete a contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of ApiResponse (ContactDevice)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ContactDevice>> ApiPublicV1UserUserContactMethodsDevicesContactIdDeleteAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdDelete");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdDelete");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdDelete");

            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdDelete");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (contactId != null)
                localVarRequestOptions.PathParameters.Add("contactId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ContactDevice>("/api-public/v1/user/{user}/contact-methods/devices/{contactId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsDevicesContactIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the indicated contact device for a user Get the indicated contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>List&lt;ContactDevice&gt;</returns>
        public List<ContactDevice> ApiPublicV1UserUserContactMethodsDevicesContactIdGet (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
             Org.OpenAPITools.Client.ApiResponse<List<ContactDevice>> localVarResponse = ApiPublicV1UserUserContactMethodsDevicesContactIdGetWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the indicated contact device for a user Get the indicated contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>ApiResponse of List&lt;ContactDevice&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse< List<ContactDevice> > ApiPublicV1UserUserContactMethodsDevicesContactIdGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdGet");

            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (contactId != null)
                localVarRequestOptions.PathParameters.Add("contactId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ContactDevice> >("/api-public/v1/user/{user}/contact-methods/devices/{contactId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsDevicesContactIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the indicated contact device for a user Get the indicated contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of List&lt;ContactDevice&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactDevice>> ApiPublicV1UserUserContactMethodsDevicesContactIdGetAsync (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
             Org.OpenAPITools.Client.ApiResponse<List<ContactDevice>> localVarResponse = await ApiPublicV1UserUserContactMethodsDevicesContactIdGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the indicated contact device for a user Get the indicated contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of ApiResponse (List&lt;ContactDevice&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<ContactDevice>>> ApiPublicV1UserUserContactMethodsDevicesContactIdGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdGet");

            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (contactId != null)
                localVarRequestOptions.PathParameters.Add("contactId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ContactDevice>>("/api-public/v1/user/{user}/contact-methods/devices/{contactId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsDevicesContactIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a contact device for a user Update a contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <param name="body">The contact device</param>
        /// <returns>ContactDevice</returns>
        public ContactDevice ApiPublicV1UserUserContactMethodsDevicesContactIdPut (string xVOApiId, string xVOApiKey, string user, string contactId, ContactDeviceAdd body)
        {
             Org.OpenAPITools.Client.ApiResponse<ContactDevice> localVarResponse = ApiPublicV1UserUserContactMethodsDevicesContactIdPutWithHttpInfo(xVOApiId, xVOApiKey, user, contactId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a contact device for a user Update a contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <param name="body">The contact device</param>
        /// <returns>ApiResponse of ContactDevice</returns>
        public Org.OpenAPITools.Client.ApiResponse< ContactDevice > ApiPublicV1UserUserContactMethodsDevicesContactIdPutWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId, ContactDeviceAdd body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdPut");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdPut");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdPut");

            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdPut");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (contactId != null)
                localVarRequestOptions.PathParameters.Add("contactId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put< ContactDevice >("/api-public/v1/user/{user}/contact-methods/devices/{contactId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsDevicesContactIdPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a contact device for a user Update a contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <param name="body">The contact device</param>
        /// <returns>Task of ContactDevice</returns>
        public async System.Threading.Tasks.Task<ContactDevice> ApiPublicV1UserUserContactMethodsDevicesContactIdPutAsync (string xVOApiId, string xVOApiKey, string user, string contactId, ContactDeviceAdd body)
        {
             Org.OpenAPITools.Client.ApiResponse<ContactDevice> localVarResponse = await ApiPublicV1UserUserContactMethodsDevicesContactIdPutAsyncWithHttpInfo(xVOApiId, xVOApiKey, user, contactId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a contact device for a user Update a contact device for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <param name="body">The contact device</param>
        /// <returns>Task of ApiResponse (ContactDevice)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ContactDevice>> ApiPublicV1UserUserContactMethodsDevicesContactIdPutAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId, ContactDeviceAdd body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdPut");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdPut");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdPut");

            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesContactIdPut");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (contactId != null)
                localVarRequestOptions.PathParameters.Add("contactId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ContactDevice>("/api-public/v1/user/{user}/contact-methods/devices/{contactId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsDevicesContactIdPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all contact devices for a user Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>List&lt;ContactDevice&gt;</returns>
        public List<ContactDevice> ApiPublicV1UserUserContactMethodsDevicesGet (string xVOApiId, string xVOApiKey, string user)
        {
             Org.OpenAPITools.Client.ApiResponse<List<ContactDevice>> localVarResponse = ApiPublicV1UserUserContactMethodsDevicesGetWithHttpInfo(xVOApiId, xVOApiKey, user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all contact devices for a user Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>ApiResponse of List&lt;ContactDevice&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse< List<ContactDevice> > ApiPublicV1UserUserContactMethodsDevicesGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<ContactDevice> >("/api-public/v1/user/{user}/contact-methods/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsDevicesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all contact devices for a user Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>Task of List&lt;ContactDevice&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContactDevice>> ApiPublicV1UserUserContactMethodsDevicesGetAsync (string xVOApiId, string xVOApiKey, string user)
        {
             Org.OpenAPITools.Client.ApiResponse<List<ContactDevice>> localVarResponse = await ApiPublicV1UserUserContactMethodsDevicesGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all contact devices for a user Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>Task of ApiResponse (List&lt;ContactDevice&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<ContactDevice>>> ApiPublicV1UserUserContactMethodsDevicesGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsDevicesGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ContactDevice>>("/api-public/v1/user/{user}/contact-methods/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsDevicesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a contact email for a user Delete the indicated contact email for the user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>UserContact</returns>
        public UserContact ApiPublicV1UserUserContactMethodsEmailsContactIdDelete (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
             Org.OpenAPITools.Client.ApiResponse<UserContact> localVarResponse = ApiPublicV1UserUserContactMethodsEmailsContactIdDeleteWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a contact email for a user Delete the indicated contact email for the user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>ApiResponse of UserContact</returns>
        public Org.OpenAPITools.Client.ApiResponse< UserContact > ApiPublicV1UserUserContactMethodsEmailsContactIdDeleteWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsContactIdDelete");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsContactIdDelete");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsContactIdDelete");

            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsContactIdDelete");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (contactId != null)
                localVarRequestOptions.PathParameters.Add("contactId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete< UserContact >("/api-public/v1/user/{user}/contact-methods/emails/{contactId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsEmailsContactIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a contact email for a user Delete the indicated contact email for the user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of UserContact</returns>
        public async System.Threading.Tasks.Task<UserContact> ApiPublicV1UserUserContactMethodsEmailsContactIdDeleteAsync (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
             Org.OpenAPITools.Client.ApiResponse<UserContact> localVarResponse = await ApiPublicV1UserUserContactMethodsEmailsContactIdDeleteAsyncWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a contact email for a user Delete the indicated contact email for the user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of ApiResponse (UserContact)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserContact>> ApiPublicV1UserUserContactMethodsEmailsContactIdDeleteAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsContactIdDelete");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsContactIdDelete");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsContactIdDelete");

            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsContactIdDelete");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (contactId != null)
                localVarRequestOptions.PathParameters.Add("contactId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<UserContact>("/api-public/v1/user/{user}/contact-methods/emails/{contactId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsEmailsContactIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the indicated contact email for a user Get the indicated contact email for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>List&lt;UserContact&gt;</returns>
        public List<UserContact> ApiPublicV1UserUserContactMethodsEmailsContactIdGet (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
             Org.OpenAPITools.Client.ApiResponse<List<UserContact>> localVarResponse = ApiPublicV1UserUserContactMethodsEmailsContactIdGetWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the indicated contact email for a user Get the indicated contact email for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>ApiResponse of List&lt;UserContact&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse< List<UserContact> > ApiPublicV1UserUserContactMethodsEmailsContactIdGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsContactIdGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsContactIdGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsContactIdGet");

            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsContactIdGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (contactId != null)
                localVarRequestOptions.PathParameters.Add("contactId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<UserContact> >("/api-public/v1/user/{user}/contact-methods/emails/{contactId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsEmailsContactIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the indicated contact email for a user Get the indicated contact email for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of List&lt;UserContact&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserContact>> ApiPublicV1UserUserContactMethodsEmailsContactIdGetAsync (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
             Org.OpenAPITools.Client.ApiResponse<List<UserContact>> localVarResponse = await ApiPublicV1UserUserContactMethodsEmailsContactIdGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the indicated contact email for a user Get the indicated contact email for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of ApiResponse (List&lt;UserContact&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<UserContact>>> ApiPublicV1UserUserContactMethodsEmailsContactIdGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsContactIdGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsContactIdGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsContactIdGet");

            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsContactIdGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (contactId != null)
                localVarRequestOptions.PathParameters.Add("contactId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserContact>>("/api-public/v1/user/{user}/contact-methods/emails/{contactId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsEmailsContactIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all contact emails for a user Get the contact emails for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>List&lt;UserContact&gt;</returns>
        public List<UserContact> ApiPublicV1UserUserContactMethodsEmailsGet (string xVOApiId, string xVOApiKey, string user)
        {
             Org.OpenAPITools.Client.ApiResponse<List<UserContact>> localVarResponse = ApiPublicV1UserUserContactMethodsEmailsGetWithHttpInfo(xVOApiId, xVOApiKey, user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all contact emails for a user Get the contact emails for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>ApiResponse of List&lt;UserContact&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse< List<UserContact> > ApiPublicV1UserUserContactMethodsEmailsGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<UserContact> >("/api-public/v1/user/{user}/contact-methods/emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsEmailsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all contact emails for a user Get the contact emails for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>Task of List&lt;UserContact&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserContact>> ApiPublicV1UserUserContactMethodsEmailsGetAsync (string xVOApiId, string xVOApiKey, string user)
        {
             Org.OpenAPITools.Client.ApiResponse<List<UserContact>> localVarResponse = await ApiPublicV1UserUserContactMethodsEmailsGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all contact emails for a user Get the contact emails for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>Task of ApiResponse (List&lt;UserContact&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<UserContact>>> ApiPublicV1UserUserContactMethodsEmailsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserContact>>("/api-public/v1/user/{user}/contact-methods/emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsEmailsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a contact emails for a user Create a contact email for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="body">The contact email</param>
        /// <returns>UserContact</returns>
        public UserContact ApiPublicV1UserUserContactMethodsEmailsPost (string xVOApiId, string xVOApiKey, string user, ContactEmailAdd body)
        {
             Org.OpenAPITools.Client.ApiResponse<UserContact> localVarResponse = ApiPublicV1UserUserContactMethodsEmailsPostWithHttpInfo(xVOApiId, xVOApiKey, user, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a contact emails for a user Create a contact email for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="body">The contact email</param>
        /// <returns>ApiResponse of UserContact</returns>
        public Org.OpenAPITools.Client.ApiResponse< UserContact > ApiPublicV1UserUserContactMethodsEmailsPostWithHttpInfo (string xVOApiId, string xVOApiKey, string user, ContactEmailAdd body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsPost");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsPost");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsPost");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UserContact >("/api-public/v1/user/{user}/contact-methods/emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsEmailsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a contact emails for a user Create a contact email for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="body">The contact email</param>
        /// <returns>Task of UserContact</returns>
        public async System.Threading.Tasks.Task<UserContact> ApiPublicV1UserUserContactMethodsEmailsPostAsync (string xVOApiId, string xVOApiKey, string user, ContactEmailAdd body)
        {
             Org.OpenAPITools.Client.ApiResponse<UserContact> localVarResponse = await ApiPublicV1UserUserContactMethodsEmailsPostAsyncWithHttpInfo(xVOApiId, xVOApiKey, user, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a contact emails for a user Create a contact email for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="body">The contact email</param>
        /// <returns>Task of ApiResponse (UserContact)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserContact>> ApiPublicV1UserUserContactMethodsEmailsPostAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, ContactEmailAdd body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsPost");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsPost");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsEmailsPost");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserContact>("/api-public/v1/user/{user}/contact-methods/emails", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsEmailsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all contact methods for a user Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 ApiPublicV1UserUserContactMethodsGet (string xVOApiId, string xVOApiKey, string user)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse2006> localVarResponse = ApiPublicV1UserUserContactMethodsGetWithHttpInfo(xVOApiId, xVOApiKey, user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all contact methods for a user Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public Org.OpenAPITools.Client.ApiResponse< InlineResponse2006 > ApiPublicV1UserUserContactMethodsGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2006 >("/api-public/v1/user/{user}/contact-methods", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all contact methods for a user Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> ApiPublicV1UserUserContactMethodsGetAsync (string xVOApiId, string xVOApiKey, string user)
        {
             Org.OpenAPITools.Client.ApiResponse<InlineResponse2006> localVarResponse = await ApiPublicV1UserUserContactMethodsGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all contact methods for a user Get the contact methods for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InlineResponse2006>> ApiPublicV1UserUserContactMethodsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2006>("/api-public/v1/user/{user}/contact-methods", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a contact phone for a user Delete the indicated contact phone for the user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>UserContact</returns>
        public UserContact ApiPublicV1UserUserContactMethodsPhonesContactIdDelete (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
             Org.OpenAPITools.Client.ApiResponse<UserContact> localVarResponse = ApiPublicV1UserUserContactMethodsPhonesContactIdDeleteWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a contact phone for a user Delete the indicated contact phone for the user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>ApiResponse of UserContact</returns>
        public Org.OpenAPITools.Client.ApiResponse< UserContact > ApiPublicV1UserUserContactMethodsPhonesContactIdDeleteWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesContactIdDelete");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesContactIdDelete");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesContactIdDelete");

            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesContactIdDelete");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (contactId != null)
                localVarRequestOptions.PathParameters.Add("contactId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete< UserContact >("/api-public/v1/user/{user}/contact-methods/phones/{contactId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsPhonesContactIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a contact phone for a user Delete the indicated contact phone for the user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of UserContact</returns>
        public async System.Threading.Tasks.Task<UserContact> ApiPublicV1UserUserContactMethodsPhonesContactIdDeleteAsync (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
             Org.OpenAPITools.Client.ApiResponse<UserContact> localVarResponse = await ApiPublicV1UserUserContactMethodsPhonesContactIdDeleteAsyncWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a contact phone for a user Delete the indicated contact phone for the user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of ApiResponse (UserContact)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserContact>> ApiPublicV1UserUserContactMethodsPhonesContactIdDeleteAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesContactIdDelete");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesContactIdDelete");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesContactIdDelete");

            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesContactIdDelete");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (contactId != null)
                localVarRequestOptions.PathParameters.Add("contactId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<UserContact>("/api-public/v1/user/{user}/contact-methods/phones/{contactId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsPhonesContactIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the indicated contact phone for a user Get the indicated contact phone for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>List&lt;UserContact&gt;</returns>
        public List<UserContact> ApiPublicV1UserUserContactMethodsPhonesContactIdGet (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
             Org.OpenAPITools.Client.ApiResponse<List<UserContact>> localVarResponse = ApiPublicV1UserUserContactMethodsPhonesContactIdGetWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the indicated contact phone for a user Get the indicated contact phone for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>ApiResponse of List&lt;UserContact&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse< List<UserContact> > ApiPublicV1UserUserContactMethodsPhonesContactIdGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesContactIdGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesContactIdGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesContactIdGet");

            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesContactIdGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (contactId != null)
                localVarRequestOptions.PathParameters.Add("contactId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<UserContact> >("/api-public/v1/user/{user}/contact-methods/phones/{contactId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsPhonesContactIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the indicated contact phone for a user Get the indicated contact phone for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of List&lt;UserContact&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserContact>> ApiPublicV1UserUserContactMethodsPhonesContactIdGetAsync (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
             Org.OpenAPITools.Client.ApiResponse<List<UserContact>> localVarResponse = await ApiPublicV1UserUserContactMethodsPhonesContactIdGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, user, contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the indicated contact phone for a user Get the indicated contact phone for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="contactId">The unique contact identifier</param>
        /// <returns>Task of ApiResponse (List&lt;UserContact&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<UserContact>>> ApiPublicV1UserUserContactMethodsPhonesContactIdGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, string contactId)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesContactIdGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesContactIdGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesContactIdGet");

            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contactId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesContactIdGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (contactId != null)
                localVarRequestOptions.PathParameters.Add("contactId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserContact>>("/api-public/v1/user/{user}/contact-methods/phones/{contactId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsPhonesContactIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all contact phones for a user Get the contact phones for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>List&lt;UserContact&gt;</returns>
        public List<UserContact> ApiPublicV1UserUserContactMethodsPhonesGet (string xVOApiId, string xVOApiKey, string user)
        {
             Org.OpenAPITools.Client.ApiResponse<List<UserContact>> localVarResponse = ApiPublicV1UserUserContactMethodsPhonesGetWithHttpInfo(xVOApiId, xVOApiKey, user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of all contact phones for a user Get the contact phones for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>ApiResponse of List&lt;UserContact&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse< List<UserContact> > ApiPublicV1UserUserContactMethodsPhonesGetWithHttpInfo (string xVOApiId, string xVOApiKey, string user)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<UserContact> >("/api-public/v1/user/{user}/contact-methods/phones", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsPhonesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of all contact phones for a user Get the contact phones for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>Task of List&lt;UserContact&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserContact>> ApiPublicV1UserUserContactMethodsPhonesGetAsync (string xVOApiId, string xVOApiKey, string user)
        {
             Org.OpenAPITools.Client.ApiResponse<List<UserContact>> localVarResponse = await ApiPublicV1UserUserContactMethodsPhonesGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of all contact phones for a user Get the contact phones for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <returns>Task of ApiResponse (List&lt;UserContact&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<UserContact>>> ApiPublicV1UserUserContactMethodsPhonesGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesGet");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserContact>>("/api-public/v1/user/{user}/contact-methods/phones", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsPhonesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a contact phones for a user Create a contact phone for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="body">The contact phone</param>
        /// <returns>UserContact</returns>
        public UserContact ApiPublicV1UserUserContactMethodsPhonesPost (string xVOApiId, string xVOApiKey, string user, ContactPhoneAdd body)
        {
             Org.OpenAPITools.Client.ApiResponse<UserContact> localVarResponse = ApiPublicV1UserUserContactMethodsPhonesPostWithHttpInfo(xVOApiId, xVOApiKey, user, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a contact phones for a user Create a contact phone for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="body">The contact phone</param>
        /// <returns>ApiResponse of UserContact</returns>
        public Org.OpenAPITools.Client.ApiResponse< UserContact > ApiPublicV1UserUserContactMethodsPhonesPostWithHttpInfo (string xVOApiId, string xVOApiKey, string user, ContactPhoneAdd body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesPost");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesPost");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesPost");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< UserContact >("/api-public/v1/user/{user}/contact-methods/phones", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsPhonesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a contact phones for a user Create a contact phone for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="body">The contact phone</param>
        /// <returns>Task of UserContact</returns>
        public async System.Threading.Tasks.Task<UserContact> ApiPublicV1UserUserContactMethodsPhonesPostAsync (string xVOApiId, string xVOApiKey, string user, ContactPhoneAdd body)
        {
             Org.OpenAPITools.Client.ApiResponse<UserContact> localVarResponse = await ApiPublicV1UserUserContactMethodsPhonesPostAsyncWithHttpInfo(xVOApiId, xVOApiKey, user, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a contact phones for a user Create a contact phone for a user  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="user">The VictorOps user ID</param>
        /// <param name="body">The contact phone</param>
        /// <returns>Task of ApiResponse (UserContact)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<UserContact>> ApiPublicV1UserUserContactMethodsPhonesPostAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string user, ContactPhoneAdd body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesPost");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesPost");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling UserContactMethodsApi->ApiPublicV1UserUserContactMethodsPhonesPost");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserContact>("/api-public/v1/user/{user}/contact-methods/phones", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1UserUserContactMethodsPhonesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
