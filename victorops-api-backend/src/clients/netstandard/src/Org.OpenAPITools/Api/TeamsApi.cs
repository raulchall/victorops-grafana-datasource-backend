/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List teams
        /// </summary>
        /// <remarks>
        /// Get a list of teams for your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>List&lt;TeamDetail&gt;</returns>
        List<TeamDetail> ApiPublicV1TeamGet (string xVOApiId, string xVOApiKey);

        /// <summary>
        /// List teams
        /// </summary>
        /// <remarks>
        /// Get a list of teams for your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>ApiResponse of List&lt;TeamDetail&gt;</returns>
        ApiResponse<List<TeamDetail>> ApiPublicV1TeamGetWithHttpInfo (string xVOApiId, string xVOApiKey);
        /// <summary>
        /// Add a team
        /// </summary>
        /// <remarks>
        /// Add a team to your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The team information</param>
        /// <returns>TeamDetail</returns>
        TeamDetail ApiPublicV1TeamPost (string xVOApiId, string xVOApiKey, AddTeamPayload body);

        /// <summary>
        /// Add a team
        /// </summary>
        /// <remarks>
        /// Add a team to your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The team information</param>
        /// <returns>ApiResponse of TeamDetail</returns>
        ApiResponse<TeamDetail> ApiPublicV1TeamPostWithHttpInfo (string xVOApiId, string xVOApiKey, AddTeamPayload body);
        /// <summary>
        /// Retrieve a list of team admins for a team
        /// </summary>
        /// <remarks>
        /// Get the team admins for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team</param>
        /// <returns>TeamAdminsResponse</returns>
        TeamAdminsResponse ApiPublicV1TeamTeamAdminsGet (string xVOApiId, string xVOApiKey, string team);

        /// <summary>
        /// Retrieve a list of team admins for a team
        /// </summary>
        /// <remarks>
        /// Get the team admins for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team</param>
        /// <returns>ApiResponse of TeamAdminsResponse</returns>
        ApiResponse<TeamAdminsResponse> ApiPublicV1TeamTeamAdminsGetWithHttpInfo (string xVOApiId, string xVOApiKey, string team);
        /// <summary>
        /// Remove a team
        /// </summary>
        /// <remarks>
        /// Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be deleted</param>
        /// <returns></returns>
        void ApiPublicV1TeamTeamDelete (string xVOApiId, string xVOApiKey, string team);

        /// <summary>
        /// Remove a team
        /// </summary>
        /// <remarks>
        /// Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiPublicV1TeamTeamDeleteWithHttpInfo (string xVOApiId, string xVOApiKey, string team);
        /// <summary>
        /// Retrieve information for a team
        /// </summary>
        /// <remarks>
        /// Get the information for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>TeamDetail</returns>
        TeamDetail ApiPublicV1TeamTeamGet (string xVOApiId, string xVOApiKey, string team);

        /// <summary>
        /// Retrieve information for a team
        /// </summary>
        /// <remarks>
        /// Get the information for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>ApiResponse of TeamDetail</returns>
        ApiResponse<TeamDetail> ApiPublicV1TeamTeamGetWithHttpInfo (string xVOApiId, string xVOApiKey, string team);
        /// <summary>
        /// Retrieve a list of members for a team
        /// </summary>
        /// <remarks>
        /// Get the members for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>ListTeamMembersResponse</returns>
        ListTeamMembersResponse ApiPublicV1TeamTeamMembersGet (string xVOApiId, string xVOApiKey, string team);

        /// <summary>
        /// Retrieve a list of members for a team
        /// </summary>
        /// <remarks>
        /// Get the members for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>ApiResponse of ListTeamMembersResponse</returns>
        ApiResponse<ListTeamMembersResponse> ApiPublicV1TeamTeamMembersGetWithHttpInfo (string xVOApiId, string xVOApiKey, string team);
        /// <summary>
        /// Add a team member
        /// </summary>
        /// <remarks>
        /// Add a team member to your team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <param name="body"></param>
        /// <returns>ListTeamMembersResponse</returns>
        ListTeamMembersResponse ApiPublicV1TeamTeamMembersPost (string xVOApiId, string xVOApiKey, string team, AddTeamMemberPayload body);

        /// <summary>
        /// Add a team member
        /// </summary>
        /// <remarks>
        /// Add a team member to your team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListTeamMembersResponse</returns>
        ApiResponse<ListTeamMembersResponse> ApiPublicV1TeamTeamMembersPostWithHttpInfo (string xVOApiId, string xVOApiKey, string team, AddTeamMemberPayload body);
        /// <summary>
        /// Remove a team member
        /// </summary>
        /// <remarks>
        /// Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be deleted</param>
        /// <param name="user">The team member username</param>
        /// <param name="body">The user information</param>
        /// <returns></returns>
        void ApiPublicV1TeamTeamMembersUserDelete (string xVOApiId, string xVOApiKey, string team, string user, RemoveTeamMemberPayload body);

        /// <summary>
        /// Remove a team member
        /// </summary>
        /// <remarks>
        /// Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be deleted</param>
        /// <param name="user">The team member username</param>
        /// <param name="body">The user information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiPublicV1TeamTeamMembersUserDeleteWithHttpInfo (string xVOApiId, string xVOApiKey, string team, string user, RemoveTeamMemberPayload body);
        /// <summary>
        /// Retrieve a list of escalation policies for a team
        /// </summary>
        /// <remarks>
        /// Get the escalation policies for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>EscalationPolicyList</returns>
        EscalationPolicyList ApiPublicV1TeamTeamPoliciesGet (string xVOApiId, string xVOApiKey, string team);

        /// <summary>
        /// Retrieve a list of escalation policies for a team
        /// </summary>
        /// <remarks>
        /// Get the escalation policies for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>ApiResponse of EscalationPolicyList</returns>
        ApiResponse<EscalationPolicyList> ApiPublicV1TeamTeamPoliciesGetWithHttpInfo (string xVOApiId, string xVOApiKey, string team);
        /// <summary>
        /// Update a team
        /// </summary>
        /// <remarks>
        /// Update the designated team  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be updated</param>
        /// <param name="body">The team information</param>
        /// <returns>TeamDetail</returns>
        TeamDetail ApiPublicV1TeamTeamPut (string xVOApiId, string xVOApiKey, string team, AddTeamPayload body);

        /// <summary>
        /// Update a team
        /// </summary>
        /// <remarks>
        /// Update the designated team  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be updated</param>
        /// <param name="body">The team information</param>
        /// <returns>ApiResponse of TeamDetail</returns>
        ApiResponse<TeamDetail> ApiPublicV1TeamTeamPutWithHttpInfo (string xVOApiId, string xVOApiKey, string team, AddTeamPayload body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List teams
        /// </summary>
        /// <remarks>
        /// Get a list of teams for your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of List&lt;TeamDetail&gt;</returns>
        System.Threading.Tasks.Task<List<TeamDetail>> ApiPublicV1TeamGetAsync (string xVOApiId, string xVOApiKey);

        /// <summary>
        /// List teams
        /// </summary>
        /// <remarks>
        /// Get a list of teams for your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of ApiResponse (List&lt;TeamDetail&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamDetail>>> ApiPublicV1TeamGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey);
        /// <summary>
        /// Add a team
        /// </summary>
        /// <remarks>
        /// Add a team to your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The team information</param>
        /// <returns>Task of TeamDetail</returns>
        System.Threading.Tasks.Task<TeamDetail> ApiPublicV1TeamPostAsync (string xVOApiId, string xVOApiKey, AddTeamPayload body);

        /// <summary>
        /// Add a team
        /// </summary>
        /// <remarks>
        /// Add a team to your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The team information</param>
        /// <returns>Task of ApiResponse (TeamDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamDetail>> ApiPublicV1TeamPostAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, AddTeamPayload body);
        /// <summary>
        /// Retrieve a list of team admins for a team
        /// </summary>
        /// <remarks>
        /// Get the team admins for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team</param>
        /// <returns>Task of TeamAdminsResponse</returns>
        System.Threading.Tasks.Task<TeamAdminsResponse> ApiPublicV1TeamTeamAdminsGetAsync (string xVOApiId, string xVOApiKey, string team);

        /// <summary>
        /// Retrieve a list of team admins for a team
        /// </summary>
        /// <remarks>
        /// Get the team admins for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team</param>
        /// <returns>Task of ApiResponse (TeamAdminsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamAdminsResponse>> ApiPublicV1TeamTeamAdminsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team);
        /// <summary>
        /// Remove a team
        /// </summary>
        /// <remarks>
        /// Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be deleted</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiPublicV1TeamTeamDeleteAsync (string xVOApiId, string xVOApiKey, string team);

        /// <summary>
        /// Remove a team
        /// </summary>
        /// <remarks>
        /// Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiPublicV1TeamTeamDeleteAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team);
        /// <summary>
        /// Retrieve information for a team
        /// </summary>
        /// <remarks>
        /// Get the information for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>Task of TeamDetail</returns>
        System.Threading.Tasks.Task<TeamDetail> ApiPublicV1TeamTeamGetAsync (string xVOApiId, string xVOApiKey, string team);

        /// <summary>
        /// Retrieve information for a team
        /// </summary>
        /// <remarks>
        /// Get the information for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>Task of ApiResponse (TeamDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamDetail>> ApiPublicV1TeamTeamGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team);
        /// <summary>
        /// Retrieve a list of members for a team
        /// </summary>
        /// <remarks>
        /// Get the members for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>Task of ListTeamMembersResponse</returns>
        System.Threading.Tasks.Task<ListTeamMembersResponse> ApiPublicV1TeamTeamMembersGetAsync (string xVOApiId, string xVOApiKey, string team);

        /// <summary>
        /// Retrieve a list of members for a team
        /// </summary>
        /// <remarks>
        /// Get the members for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>Task of ApiResponse (ListTeamMembersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListTeamMembersResponse>> ApiPublicV1TeamTeamMembersGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team);
        /// <summary>
        /// Add a team member
        /// </summary>
        /// <remarks>
        /// Add a team member to your team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <param name="body"></param>
        /// <returns>Task of ListTeamMembersResponse</returns>
        System.Threading.Tasks.Task<ListTeamMembersResponse> ApiPublicV1TeamTeamMembersPostAsync (string xVOApiId, string xVOApiKey, string team, AddTeamMemberPayload body);

        /// <summary>
        /// Add a team member
        /// </summary>
        /// <remarks>
        /// Add a team member to your team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ListTeamMembersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListTeamMembersResponse>> ApiPublicV1TeamTeamMembersPostAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team, AddTeamMemberPayload body);
        /// <summary>
        /// Remove a team member
        /// </summary>
        /// <remarks>
        /// Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be deleted</param>
        /// <param name="user">The team member username</param>
        /// <param name="body">The user information</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiPublicV1TeamTeamMembersUserDeleteAsync (string xVOApiId, string xVOApiKey, string team, string user, RemoveTeamMemberPayload body);

        /// <summary>
        /// Remove a team member
        /// </summary>
        /// <remarks>
        /// Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be deleted</param>
        /// <param name="user">The team member username</param>
        /// <param name="body">The user information</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiPublicV1TeamTeamMembersUserDeleteAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team, string user, RemoveTeamMemberPayload body);
        /// <summary>
        /// Retrieve a list of escalation policies for a team
        /// </summary>
        /// <remarks>
        /// Get the escalation policies for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>Task of EscalationPolicyList</returns>
        System.Threading.Tasks.Task<EscalationPolicyList> ApiPublicV1TeamTeamPoliciesGetAsync (string xVOApiId, string xVOApiKey, string team);

        /// <summary>
        /// Retrieve a list of escalation policies for a team
        /// </summary>
        /// <remarks>
        /// Get the escalation policies for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>Task of ApiResponse (EscalationPolicyList)</returns>
        System.Threading.Tasks.Task<ApiResponse<EscalationPolicyList>> ApiPublicV1TeamTeamPoliciesGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team);
        /// <summary>
        /// Update a team
        /// </summary>
        /// <remarks>
        /// Update the designated team  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be updated</param>
        /// <param name="body">The team information</param>
        /// <returns>Task of TeamDetail</returns>
        System.Threading.Tasks.Task<TeamDetail> ApiPublicV1TeamTeamPutAsync (string xVOApiId, string xVOApiKey, string team, AddTeamPayload body);

        /// <summary>
        /// Update a team
        /// </summary>
        /// <remarks>
        /// Update the designated team  This API may be called a maximum of 60 times per minute. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be updated</param>
        /// <param name="body">The team information</param>
        /// <returns>Task of ApiResponse (TeamDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamDetail>> ApiPublicV1TeamTeamPutAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team, AddTeamPayload body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApi : ITeamsApiSync, ITeamsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeamsApi : ITeamsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamsApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeamsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TeamsApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List teams Get a list of teams for your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>List&lt;TeamDetail&gt;</returns>
        public List<TeamDetail> ApiPublicV1TeamGet (string xVOApiId, string xVOApiKey)
        {
             Org.OpenAPITools.Client.ApiResponse<List<TeamDetail>> localVarResponse = ApiPublicV1TeamGetWithHttpInfo(xVOApiId, xVOApiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List teams Get a list of teams for your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>ApiResponse of List&lt;TeamDetail&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse< List<TeamDetail> > ApiPublicV1TeamGetWithHttpInfo (string xVOApiId, string xVOApiKey)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< List<TeamDetail> >("/api-public/v1/team", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List teams Get a list of teams for your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of List&lt;TeamDetail&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamDetail>> ApiPublicV1TeamGetAsync (string xVOApiId, string xVOApiKey)
        {
             Org.OpenAPITools.Client.ApiResponse<List<TeamDetail>> localVarResponse = await ApiPublicV1TeamGetAsyncWithHttpInfo(xVOApiId, xVOApiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List teams Get a list of teams for your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <returns>Task of ApiResponse (List&lt;TeamDetail&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<TeamDetail>>> ApiPublicV1TeamGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TeamDetail>>("/api-public/v1/team", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a team Add a team to your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The team information</param>
        /// <returns>TeamDetail</returns>
        public TeamDetail ApiPublicV1TeamPost (string xVOApiId, string xVOApiKey, AddTeamPayload body)
        {
             Org.OpenAPITools.Client.ApiResponse<TeamDetail> localVarResponse = ApiPublicV1TeamPostWithHttpInfo(xVOApiId, xVOApiKey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a team Add a team to your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The team information</param>
        /// <returns>ApiResponse of TeamDetail</returns>
        public Org.OpenAPITools.Client.ApiResponse< TeamDetail > ApiPublicV1TeamPostWithHttpInfo (string xVOApiId, string xVOApiKey, AddTeamPayload body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamPost");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->ApiPublicV1TeamPost");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< TeamDetail >("/api-public/v1/team", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a team Add a team to your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The team information</param>
        /// <returns>Task of TeamDetail</returns>
        public async System.Threading.Tasks.Task<TeamDetail> ApiPublicV1TeamPostAsync (string xVOApiId, string xVOApiKey, AddTeamPayload body)
        {
             Org.OpenAPITools.Client.ApiResponse<TeamDetail> localVarResponse = await ApiPublicV1TeamPostAsyncWithHttpInfo(xVOApiId, xVOApiKey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a team Add a team to your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="body">The team information</param>
        /// <returns>Task of ApiResponse (TeamDetail)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TeamDetail>> ApiPublicV1TeamPostAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, AddTeamPayload body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamPost");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->ApiPublicV1TeamPost");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TeamDetail>("/api-public/v1/team", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of team admins for a team Get the team admins for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team</param>
        /// <returns>TeamAdminsResponse</returns>
        public TeamAdminsResponse ApiPublicV1TeamTeamAdminsGet (string xVOApiId, string xVOApiKey, string team)
        {
             Org.OpenAPITools.Client.ApiResponse<TeamAdminsResponse> localVarResponse = ApiPublicV1TeamTeamAdminsGetWithHttpInfo(xVOApiId, xVOApiKey, team);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of team admins for a team Get the team admins for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team</param>
        /// <returns>ApiResponse of TeamAdminsResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< TeamAdminsResponse > ApiPublicV1TeamTeamAdminsGetWithHttpInfo (string xVOApiId, string xVOApiKey, string team)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamTeamAdminsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamTeamAdminsGet");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling TeamsApi->ApiPublicV1TeamTeamAdminsGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< TeamAdminsResponse >("/api-public/v1/team/{team}/admins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamAdminsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of team admins for a team Get the team admins for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team</param>
        /// <returns>Task of TeamAdminsResponse</returns>
        public async System.Threading.Tasks.Task<TeamAdminsResponse> ApiPublicV1TeamTeamAdminsGetAsync (string xVOApiId, string xVOApiKey, string team)
        {
             Org.OpenAPITools.Client.ApiResponse<TeamAdminsResponse> localVarResponse = await ApiPublicV1TeamTeamAdminsGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, team);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of team admins for a team Get the team admins for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team</param>
        /// <returns>Task of ApiResponse (TeamAdminsResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TeamAdminsResponse>> ApiPublicV1TeamTeamAdminsGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamTeamAdminsGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamTeamAdminsGet");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling TeamsApi->ApiPublicV1TeamTeamAdminsGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TeamAdminsResponse>("/api-public/v1/team/{team}/admins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamAdminsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a team Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be deleted</param>
        /// <returns></returns>
        public void ApiPublicV1TeamTeamDelete (string xVOApiId, string xVOApiKey, string team)
        {
             ApiPublicV1TeamTeamDeleteWithHttpInfo(xVOApiId, xVOApiKey, team);
        }

        /// <summary>
        /// Remove a team Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ApiPublicV1TeamTeamDeleteWithHttpInfo (string xVOApiId, string xVOApiKey, string team)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamTeamDelete");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamTeamDelete");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling TeamsApi->ApiPublicV1TeamTeamDelete");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api-public/v1/team/{team}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a team Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be deleted</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiPublicV1TeamTeamDeleteAsync (string xVOApiId, string xVOApiKey, string team)
        {
             await ApiPublicV1TeamTeamDeleteAsyncWithHttpInfo(xVOApiId, xVOApiKey, team);

        }

        /// <summary>
        /// Remove a team Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ApiPublicV1TeamTeamDeleteAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamTeamDelete");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamTeamDelete");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling TeamsApi->ApiPublicV1TeamTeamDelete");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api-public/v1/team/{team}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve information for a team Get the information for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>TeamDetail</returns>
        public TeamDetail ApiPublicV1TeamTeamGet (string xVOApiId, string xVOApiKey, string team)
        {
             Org.OpenAPITools.Client.ApiResponse<TeamDetail> localVarResponse = ApiPublicV1TeamTeamGetWithHttpInfo(xVOApiId, xVOApiKey, team);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve information for a team Get the information for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>ApiResponse of TeamDetail</returns>
        public Org.OpenAPITools.Client.ApiResponse< TeamDetail > ApiPublicV1TeamTeamGetWithHttpInfo (string xVOApiId, string xVOApiKey, string team)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamTeamGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamTeamGet");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling TeamsApi->ApiPublicV1TeamTeamGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< TeamDetail >("/api-public/v1/team/{team}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve information for a team Get the information for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>Task of TeamDetail</returns>
        public async System.Threading.Tasks.Task<TeamDetail> ApiPublicV1TeamTeamGetAsync (string xVOApiId, string xVOApiKey, string team)
        {
             Org.OpenAPITools.Client.ApiResponse<TeamDetail> localVarResponse = await ApiPublicV1TeamTeamGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, team);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve information for a team Get the information for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>Task of ApiResponse (TeamDetail)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TeamDetail>> ApiPublicV1TeamTeamGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamTeamGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamTeamGet");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling TeamsApi->ApiPublicV1TeamTeamGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TeamDetail>("/api-public/v1/team/{team}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of members for a team Get the members for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>ListTeamMembersResponse</returns>
        public ListTeamMembersResponse ApiPublicV1TeamTeamMembersGet (string xVOApiId, string xVOApiKey, string team)
        {
             Org.OpenAPITools.Client.ApiResponse<ListTeamMembersResponse> localVarResponse = ApiPublicV1TeamTeamMembersGetWithHttpInfo(xVOApiId, xVOApiKey, team);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of members for a team Get the members for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>ApiResponse of ListTeamMembersResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< ListTeamMembersResponse > ApiPublicV1TeamTeamMembersGetWithHttpInfo (string xVOApiId, string xVOApiKey, string team)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamTeamMembersGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamTeamMembersGet");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling TeamsApi->ApiPublicV1TeamTeamMembersGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< ListTeamMembersResponse >("/api-public/v1/team/{team}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamMembersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of members for a team Get the members for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>Task of ListTeamMembersResponse</returns>
        public async System.Threading.Tasks.Task<ListTeamMembersResponse> ApiPublicV1TeamTeamMembersGetAsync (string xVOApiId, string xVOApiKey, string team)
        {
             Org.OpenAPITools.Client.ApiResponse<ListTeamMembersResponse> localVarResponse = await ApiPublicV1TeamTeamMembersGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, team);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of members for a team Get the members for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>Task of ApiResponse (ListTeamMembersResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ListTeamMembersResponse>> ApiPublicV1TeamTeamMembersGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamTeamMembersGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamTeamMembersGet");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling TeamsApi->ApiPublicV1TeamTeamMembersGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListTeamMembersResponse>("/api-public/v1/team/{team}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamMembersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a team member Add a team member to your team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <param name="body"></param>
        /// <returns>ListTeamMembersResponse</returns>
        public ListTeamMembersResponse ApiPublicV1TeamTeamMembersPost (string xVOApiId, string xVOApiKey, string team, AddTeamMemberPayload body)
        {
             Org.OpenAPITools.Client.ApiResponse<ListTeamMembersResponse> localVarResponse = ApiPublicV1TeamTeamMembersPostWithHttpInfo(xVOApiId, xVOApiKey, team, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a team member Add a team member to your team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ListTeamMembersResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< ListTeamMembersResponse > ApiPublicV1TeamTeamMembersPostWithHttpInfo (string xVOApiId, string xVOApiKey, string team, AddTeamMemberPayload body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamTeamMembersPost");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamTeamMembersPost");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling TeamsApi->ApiPublicV1TeamTeamMembersPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->ApiPublicV1TeamTeamMembersPost");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post< ListTeamMembersResponse >("/api-public/v1/team/{team}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamMembersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a team member Add a team member to your team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <param name="body"></param>
        /// <returns>Task of ListTeamMembersResponse</returns>
        public async System.Threading.Tasks.Task<ListTeamMembersResponse> ApiPublicV1TeamTeamMembersPostAsync (string xVOApiId, string xVOApiKey, string team, AddTeamMemberPayload body)
        {
             Org.OpenAPITools.Client.ApiResponse<ListTeamMembersResponse> localVarResponse = await ApiPublicV1TeamTeamMembersPostAsyncWithHttpInfo(xVOApiId, xVOApiKey, team, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a team member Add a team member to your team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ListTeamMembersResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ListTeamMembersResponse>> ApiPublicV1TeamTeamMembersPostAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team, AddTeamMemberPayload body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamTeamMembersPost");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamTeamMembersPost");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling TeamsApi->ApiPublicV1TeamTeamMembersPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->ApiPublicV1TeamTeamMembersPost");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ListTeamMembersResponse>("/api-public/v1/team/{team}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamMembersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a team member Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be deleted</param>
        /// <param name="user">The team member username</param>
        /// <param name="body">The user information</param>
        /// <returns></returns>
        public void ApiPublicV1TeamTeamMembersUserDelete (string xVOApiId, string xVOApiKey, string team, string user, RemoveTeamMemberPayload body)
        {
             ApiPublicV1TeamTeamMembersUserDeleteWithHttpInfo(xVOApiId, xVOApiKey, team, user, body);
        }

        /// <summary>
        /// Remove a team member Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be deleted</param>
        /// <param name="user">The team member username</param>
        /// <param name="body">The user information</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ApiPublicV1TeamTeamMembersUserDeleteWithHttpInfo (string xVOApiId, string xVOApiKey, string team, string user, RemoveTeamMemberPayload body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamTeamMembersUserDelete");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamTeamMembersUserDelete");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling TeamsApi->ApiPublicV1TeamTeamMembersUserDelete");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling TeamsApi->ApiPublicV1TeamTeamMembersUserDelete");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->ApiPublicV1TeamTeamMembersUserDelete");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api-public/v1/team/{team}/members/{user}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamMembersUserDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a team member Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be deleted</param>
        /// <param name="user">The team member username</param>
        /// <param name="body">The user information</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiPublicV1TeamTeamMembersUserDeleteAsync (string xVOApiId, string xVOApiKey, string team, string user, RemoveTeamMemberPayload body)
        {
             await ApiPublicV1TeamTeamMembersUserDeleteAsyncWithHttpInfo(xVOApiId, xVOApiKey, team, user, body);

        }

        /// <summary>
        /// Remove a team member Remove a team from your organization.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be deleted</param>
        /// <param name="user">The team member username</param>
        /// <param name="body">The user information</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ApiPublicV1TeamTeamMembersUserDeleteAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team, string user, RemoveTeamMemberPayload body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamTeamMembersUserDelete");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamTeamMembersUserDelete");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling TeamsApi->ApiPublicV1TeamTeamMembersUserDelete");

            // verify the required parameter 'user' is set
            if (user == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'user' when calling TeamsApi->ApiPublicV1TeamTeamMembersUserDelete");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->ApiPublicV1TeamTeamMembersUserDelete");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (user != null)
                localVarRequestOptions.PathParameters.Add("user", Org.OpenAPITools.Client.ClientUtils.ParameterToString(user)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api-public/v1/team/{team}/members/{user}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamMembersUserDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of escalation policies for a team Get the escalation policies for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>EscalationPolicyList</returns>
        public EscalationPolicyList ApiPublicV1TeamTeamPoliciesGet (string xVOApiId, string xVOApiKey, string team)
        {
             Org.OpenAPITools.Client.ApiResponse<EscalationPolicyList> localVarResponse = ApiPublicV1TeamTeamPoliciesGetWithHttpInfo(xVOApiId, xVOApiKey, team);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of escalation policies for a team Get the escalation policies for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>ApiResponse of EscalationPolicyList</returns>
        public Org.OpenAPITools.Client.ApiResponse< EscalationPolicyList > ApiPublicV1TeamTeamPoliciesGetWithHttpInfo (string xVOApiId, string xVOApiKey, string team)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamTeamPoliciesGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamTeamPoliciesGet");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling TeamsApi->ApiPublicV1TeamTeamPoliciesGet");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< EscalationPolicyList >("/api-public/v1/team/{team}/policies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamPoliciesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a list of escalation policies for a team Get the escalation policies for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>Task of EscalationPolicyList</returns>
        public async System.Threading.Tasks.Task<EscalationPolicyList> ApiPublicV1TeamTeamPoliciesGetAsync (string xVOApiId, string xVOApiKey, string team)
        {
             Org.OpenAPITools.Client.ApiResponse<EscalationPolicyList> localVarResponse = await ApiPublicV1TeamTeamPoliciesGetAsyncWithHttpInfo(xVOApiId, xVOApiKey, team);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of escalation policies for a team Get the escalation policies for the specified team.  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to fetch</param>
        /// <returns>Task of ApiResponse (EscalationPolicyList)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EscalationPolicyList>> ApiPublicV1TeamTeamPoliciesGetAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamTeamPoliciesGet");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamTeamPoliciesGet");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling TeamsApi->ApiPublicV1TeamTeamPoliciesGet");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EscalationPolicyList>("/api-public/v1/team/{team}/policies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamPoliciesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a team Update the designated team  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be updated</param>
        /// <param name="body">The team information</param>
        /// <returns>TeamDetail</returns>
        public TeamDetail ApiPublicV1TeamTeamPut (string xVOApiId, string xVOApiKey, string team, AddTeamPayload body)
        {
             Org.OpenAPITools.Client.ApiResponse<TeamDetail> localVarResponse = ApiPublicV1TeamTeamPutWithHttpInfo(xVOApiId, xVOApiKey, team, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a team Update the designated team  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be updated</param>
        /// <param name="body">The team information</param>
        /// <returns>ApiResponse of TeamDetail</returns>
        public Org.OpenAPITools.Client.ApiResponse< TeamDetail > ApiPublicV1TeamTeamPutWithHttpInfo (string xVOApiId, string xVOApiKey, string team, AddTeamPayload body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamTeamPut");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamTeamPut");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling TeamsApi->ApiPublicV1TeamTeamPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->ApiPublicV1TeamTeamPut");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put< TeamDetail >("/api-public/v1/team/{team}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a team Update the designated team  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be updated</param>
        /// <param name="body">The team information</param>
        /// <returns>Task of TeamDetail</returns>
        public async System.Threading.Tasks.Task<TeamDetail> ApiPublicV1TeamTeamPutAsync (string xVOApiId, string xVOApiKey, string team, AddTeamPayload body)
        {
             Org.OpenAPITools.Client.ApiResponse<TeamDetail> localVarResponse = await ApiPublicV1TeamTeamPutAsyncWithHttpInfo(xVOApiId, xVOApiKey, team, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a team Update the designated team  This API may be called a maximum of 60 times per minute. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xVOApiId">Your API ID</param>
        /// <param name="xVOApiKey">Your API Key</param>
        /// <param name="team">The VictorOps team to be updated</param>
        /// <param name="body">The team information</param>
        /// <returns>Task of ApiResponse (TeamDetail)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TeamDetail>> ApiPublicV1TeamTeamPutAsyncWithHttpInfo (string xVOApiId, string xVOApiKey, string team, AddTeamPayload body)
        {
            // verify the required parameter 'xVOApiId' is set
            if (xVOApiId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiId' when calling TeamsApi->ApiPublicV1TeamTeamPut");

            // verify the required parameter 'xVOApiKey' is set
            if (xVOApiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xVOApiKey' when calling TeamsApi->ApiPublicV1TeamTeamPut");

            // verify the required parameter 'team' is set
            if (team == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'team' when calling TeamsApi->ApiPublicV1TeamTeamPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->ApiPublicV1TeamTeamPut");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (team != null)
                localVarRequestOptions.PathParameters.Add("team", Org.OpenAPITools.Client.ClientUtils.ParameterToString(team)); // path parameter
            if (xVOApiId != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiId)); // header parameter
            if (xVOApiKey != null)
                localVarRequestOptions.HeaderParameters.Add("X-VO-Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xVOApiKey)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<TeamDetail>("/api-public/v1/team/{team}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPublicV1TeamTeamPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
