/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Incidents contain the following fields (all should be considered optional)
    /// </summary>
    [DataContract]
    public partial class ActiveIncidentInfo :  IEquatable<ActiveIncidentInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveIncidentInfo" /> class.
        /// </summary>
        /// <param name="incidentNumber">The VictorOps incident number.</param>
        /// <param name="startTime">The time the incident started.</param>
        /// <param name="currentPhase">The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;..</param>
        /// <param name="alertCount">The number of alerts received for this incident.</param>
        /// <param name="lastAlertTime">The time of the last alert received for the incident.</param>
        /// <param name="lastAlertId">The unique id of the last alert for the incident.</param>
        /// <param name="entityId">The unique identification of the entity being monitored that caused the incident.</param>
        /// <param name="host">The host on which the incident occurred.</param>
        /// <param name="service">The service name causing the incident (if any).</param>
        /// <param name="pagedUsers">The users that were paged for the incident..</param>
        /// <param name="pagedTeams">The teams that were paged for the incident.</param>
        /// <param name="pagedPolicies">The escalation policies that were triggered for the incident.</param>
        /// <param name="transitions">Transitions of the incident state over time.</param>
        public ActiveIncidentInfo(string incidentNumber = default(string), string startTime = default(string), string currentPhase = default(string), decimal alertCount = default(decimal), string lastAlertTime = default(string), string lastAlertId = default(string), string entityId = default(string), string host = default(string), string service = default(string), List<string> pagedUsers = default(List<string>), List<string> pagedTeams = default(List<string>), List<EscalationPolicyInfo> pagedPolicies = default(List<EscalationPolicyInfo>), List<IncidentTransition> transitions = default(List<IncidentTransition>))
        {
            this.IncidentNumber = incidentNumber;
            this.StartTime = startTime;
            this.CurrentPhase = currentPhase;
            this.AlertCount = alertCount;
            this.LastAlertTime = lastAlertTime;
            this.LastAlertId = lastAlertId;
            this.EntityId = entityId;
            this.Host = host;
            this.Service = service;
            this.PagedUsers = pagedUsers;
            this.PagedTeams = pagedTeams;
            this.PagedPolicies = pagedPolicies;
            this.Transitions = transitions;
        }
        
        /// <summary>
        /// The VictorOps incident number
        /// </summary>
        /// <value>The VictorOps incident number</value>
        [DataMember(Name="incidentNumber", EmitDefaultValue=false)]
        public string IncidentNumber { get; set; }

        /// <summary>
        /// The time the incident started
        /// </summary>
        /// <value>The time the incident started</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;.
        /// </summary>
        /// <value>The current phase of the incident \&quot;resolved\&quot;, \&quot;triggered\&quot; or \&quot;acknowledged\&quot;.</value>
        [DataMember(Name="currentPhase", EmitDefaultValue=false)]
        public string CurrentPhase { get; set; }

        /// <summary>
        /// The number of alerts received for this incident
        /// </summary>
        /// <value>The number of alerts received for this incident</value>
        [DataMember(Name="alertCount", EmitDefaultValue=false)]
        public decimal AlertCount { get; set; }

        /// <summary>
        /// The time of the last alert received for the incident
        /// </summary>
        /// <value>The time of the last alert received for the incident</value>
        [DataMember(Name="lastAlertTime", EmitDefaultValue=false)]
        public string LastAlertTime { get; set; }

        /// <summary>
        /// The unique id of the last alert for the incident
        /// </summary>
        /// <value>The unique id of the last alert for the incident</value>
        [DataMember(Name="lastAlertId", EmitDefaultValue=false)]
        public string LastAlertId { get; set; }

        /// <summary>
        /// The unique identification of the entity being monitored that caused the incident
        /// </summary>
        /// <value>The unique identification of the entity being monitored that caused the incident</value>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public string EntityId { get; set; }

        /// <summary>
        /// The host on which the incident occurred
        /// </summary>
        /// <value>The host on which the incident occurred</value>
        [DataMember(Name="host", EmitDefaultValue=false)]
        public string Host { get; set; }

        /// <summary>
        /// The service name causing the incident (if any)
        /// </summary>
        /// <value>The service name causing the incident (if any)</value>
        [DataMember(Name="service", EmitDefaultValue=false)]
        public string Service { get; set; }

        /// <summary>
        /// The users that were paged for the incident.
        /// </summary>
        /// <value>The users that were paged for the incident.</value>
        [DataMember(Name="pagedUsers", EmitDefaultValue=false)]
        public List<string> PagedUsers { get; set; }

        /// <summary>
        /// The teams that were paged for the incident
        /// </summary>
        /// <value>The teams that were paged for the incident</value>
        [DataMember(Name="pagedTeams", EmitDefaultValue=false)]
        public List<string> PagedTeams { get; set; }

        /// <summary>
        /// The escalation policies that were triggered for the incident
        /// </summary>
        /// <value>The escalation policies that were triggered for the incident</value>
        [DataMember(Name="pagedPolicies", EmitDefaultValue=false)]
        public List<EscalationPolicyInfo> PagedPolicies { get; set; }

        /// <summary>
        /// Transitions of the incident state over time
        /// </summary>
        /// <value>Transitions of the incident state over time</value>
        [DataMember(Name="transitions", EmitDefaultValue=false)]
        public List<IncidentTransition> Transitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActiveIncidentInfo {\n");
            sb.Append("  IncidentNumber: ").Append(IncidentNumber).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  CurrentPhase: ").Append(CurrentPhase).Append("\n");
            sb.Append("  AlertCount: ").Append(AlertCount).Append("\n");
            sb.Append("  LastAlertTime: ").Append(LastAlertTime).Append("\n");
            sb.Append("  LastAlertId: ").Append(LastAlertId).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  PagedUsers: ").Append(PagedUsers).Append("\n");
            sb.Append("  PagedTeams: ").Append(PagedTeams).Append("\n");
            sb.Append("  PagedPolicies: ").Append(PagedPolicies).Append("\n");
            sb.Append("  Transitions: ").Append(Transitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActiveIncidentInfo);
        }

        /// <summary>
        /// Returns true if ActiveIncidentInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ActiveIncidentInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActiveIncidentInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IncidentNumber == input.IncidentNumber ||
                    (this.IncidentNumber != null &&
                    this.IncidentNumber.Equals(input.IncidentNumber))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.CurrentPhase == input.CurrentPhase ||
                    (this.CurrentPhase != null &&
                    this.CurrentPhase.Equals(input.CurrentPhase))
                ) && 
                (
                    this.AlertCount == input.AlertCount ||
                    this.AlertCount.Equals(input.AlertCount)
                ) && 
                (
                    this.LastAlertTime == input.LastAlertTime ||
                    (this.LastAlertTime != null &&
                    this.LastAlertTime.Equals(input.LastAlertTime))
                ) && 
                (
                    this.LastAlertId == input.LastAlertId ||
                    (this.LastAlertId != null &&
                    this.LastAlertId.Equals(input.LastAlertId))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.Service == input.Service ||
                    (this.Service != null &&
                    this.Service.Equals(input.Service))
                ) && 
                (
                    this.PagedUsers == input.PagedUsers ||
                    this.PagedUsers != null &&
                    input.PagedUsers != null &&
                    this.PagedUsers.SequenceEqual(input.PagedUsers)
                ) && 
                (
                    this.PagedTeams == input.PagedTeams ||
                    this.PagedTeams != null &&
                    input.PagedTeams != null &&
                    this.PagedTeams.SequenceEqual(input.PagedTeams)
                ) && 
                (
                    this.PagedPolicies == input.PagedPolicies ||
                    this.PagedPolicies != null &&
                    input.PagedPolicies != null &&
                    this.PagedPolicies.SequenceEqual(input.PagedPolicies)
                ) && 
                (
                    this.Transitions == input.Transitions ||
                    this.Transitions != null &&
                    input.Transitions != null &&
                    this.Transitions.SequenceEqual(input.Transitions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IncidentNumber != null)
                    hashCode = hashCode * 59 + this.IncidentNumber.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.CurrentPhase != null)
                    hashCode = hashCode * 59 + this.CurrentPhase.GetHashCode();
                hashCode = hashCode * 59 + this.AlertCount.GetHashCode();
                if (this.LastAlertTime != null)
                    hashCode = hashCode * 59 + this.LastAlertTime.GetHashCode();
                if (this.LastAlertId != null)
                    hashCode = hashCode * 59 + this.LastAlertId.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                if (this.Service != null)
                    hashCode = hashCode * 59 + this.Service.GetHashCode();
                if (this.PagedUsers != null)
                    hashCode = hashCode * 59 + this.PagedUsers.GetHashCode();
                if (this.PagedTeams != null)
                    hashCode = hashCode * 59 + this.PagedTeams.GetHashCode();
                if (this.PagedPolicies != null)
                    hashCode = hashCode * 59 + this.PagedPolicies.GetHashCode();
                if (this.Transitions != null)
                    hashCode = hashCode * 59 + this.Transitions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
