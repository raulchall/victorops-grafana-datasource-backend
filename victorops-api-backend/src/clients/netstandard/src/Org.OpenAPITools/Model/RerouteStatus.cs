/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RerouteStatus
    /// </summary>
    [DataContract]
    public partial class RerouteStatus :  IEquatable<RerouteStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RerouteStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RerouteStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RerouteStatus" /> class.
        /// </summary>
        /// <param name="incidentNumber">incidentNumber (required).</param>
        /// <param name="success">success (required).</param>
        /// <param name="targetStatus">targetStatus (required).</param>
        /// <param name="message">message.</param>
        public RerouteStatus(string incidentNumber = default(string), bool success = default(bool), List<RerouteTargetStatus> targetStatus = default(List<RerouteTargetStatus>), string message = default(string))
        {
            // to ensure "incidentNumber" is required (not null)
            if (incidentNumber == null)
            {
                throw new InvalidDataException("incidentNumber is a required property for RerouteStatus and cannot be null");
            }
            else
            {
                this.IncidentNumber = incidentNumber;
            }

            // to ensure "success" is required (not null)
            if (success == null)
            {
                throw new InvalidDataException("success is a required property for RerouteStatus and cannot be null");
            }
            else
            {
                this.Success = success;
            }

            // to ensure "targetStatus" is required (not null)
            if (targetStatus == null)
            {
                throw new InvalidDataException("targetStatus is a required property for RerouteStatus and cannot be null");
            }
            else
            {
                this.TargetStatus = targetStatus;
            }

            this.Message = message;
        }
        
        /// <summary>
        /// Gets or Sets IncidentNumber
        /// </summary>
        [DataMember(Name="incidentNumber", EmitDefaultValue=false)]
        public string IncidentNumber { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool Success { get; set; }

        /// <summary>
        /// Gets or Sets TargetStatus
        /// </summary>
        [DataMember(Name="targetStatus", EmitDefaultValue=false)]
        public List<RerouteTargetStatus> TargetStatus { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RerouteStatus {\n");
            sb.Append("  IncidentNumber: ").Append(IncidentNumber).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  TargetStatus: ").Append(TargetStatus).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RerouteStatus);
        }

        /// <summary>
        /// Returns true if RerouteStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of RerouteStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RerouteStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IncidentNumber == input.IncidentNumber ||
                    (this.IncidentNumber != null &&
                    this.IncidentNumber.Equals(input.IncidentNumber))
                ) && 
                (
                    this.Success == input.Success ||
                    this.Success.Equals(input.Success)
                ) && 
                (
                    this.TargetStatus == input.TargetStatus ||
                    this.TargetStatus != null &&
                    input.TargetStatus != null &&
                    this.TargetStatus.SequenceEqual(input.TargetStatus)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IncidentNumber != null)
                    hashCode = hashCode * 59 + this.IncidentNumber.GetHashCode();
                hashCode = hashCode * 59 + this.Success.GetHashCode();
                if (this.TargetStatus != null)
                    hashCode = hashCode * 59 + this.TargetStatus.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
