/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TeamScheduleResource
    /// </summary>
    [DataContract]
    public partial class TeamScheduleResource :  IEquatable<TeamScheduleResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamScheduleResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TeamScheduleResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamScheduleResource" /> class.
        /// </summary>
        /// <param name="oncall">The user scheduled on call (if any).</param>
        /// <param name="overrideoncall">The user overriding the scheduled on call user (if any).</param>
        /// <param name="policyType">policyType (required).</param>
        /// <param name="rotationName">rotationName.</param>
        /// <param name="shiftName">shiftName.</param>
        /// <param name="shiftRoll">shiftRoll.</param>
        /// <param name="rolls">rolls (required).</param>
        public TeamScheduleResource(string oncall = default(string), string overrideoncall = default(string), string policyType = default(string), string rotationName = default(string), string shiftName = default(string), decimal shiftRoll = default(decimal), List<TeamScheduleRollResource> rolls = default(List<TeamScheduleRollResource>))
        {
            // to ensure "policyType" is required (not null)
            if (policyType == null)
            {
                throw new InvalidDataException("policyType is a required property for TeamScheduleResource and cannot be null");
            }
            else
            {
                this.PolicyType = policyType;
            }

            // to ensure "rolls" is required (not null)
            if (rolls == null)
            {
                throw new InvalidDataException("rolls is a required property for TeamScheduleResource and cannot be null");
            }
            else
            {
                this.Rolls = rolls;
            }

            this.Oncall = oncall;
            this.Overrideoncall = overrideoncall;
            this.RotationName = rotationName;
            this.ShiftName = shiftName;
            this.ShiftRoll = shiftRoll;
        }
        
        /// <summary>
        /// The user scheduled on call (if any)
        /// </summary>
        /// <value>The user scheduled on call (if any)</value>
        [DataMember(Name="oncall", EmitDefaultValue=false)]
        public string Oncall { get; set; }

        /// <summary>
        /// The user overriding the scheduled on call user (if any)
        /// </summary>
        /// <value>The user overriding the scheduled on call user (if any)</value>
        [DataMember(Name="overrideoncall", EmitDefaultValue=false)]
        public string Overrideoncall { get; set; }

        /// <summary>
        /// Gets or Sets PolicyType
        /// </summary>
        [DataMember(Name="policyType", EmitDefaultValue=false)]
        public string PolicyType { get; set; }

        /// <summary>
        /// Gets or Sets RotationName
        /// </summary>
        [DataMember(Name="rotationName", EmitDefaultValue=false)]
        public string RotationName { get; set; }

        /// <summary>
        /// Gets or Sets ShiftName
        /// </summary>
        [DataMember(Name="shiftName", EmitDefaultValue=false)]
        public string ShiftName { get; set; }

        /// <summary>
        /// Gets or Sets ShiftRoll
        /// </summary>
        [DataMember(Name="shiftRoll", EmitDefaultValue=false)]
        public decimal ShiftRoll { get; set; }

        /// <summary>
        /// Gets or Sets Rolls
        /// </summary>
        [DataMember(Name="rolls", EmitDefaultValue=false)]
        public List<TeamScheduleRollResource> Rolls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeamScheduleResource {\n");
            sb.Append("  Oncall: ").Append(Oncall).Append("\n");
            sb.Append("  Overrideoncall: ").Append(Overrideoncall).Append("\n");
            sb.Append("  PolicyType: ").Append(PolicyType).Append("\n");
            sb.Append("  RotationName: ").Append(RotationName).Append("\n");
            sb.Append("  ShiftName: ").Append(ShiftName).Append("\n");
            sb.Append("  ShiftRoll: ").Append(ShiftRoll).Append("\n");
            sb.Append("  Rolls: ").Append(Rolls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TeamScheduleResource);
        }

        /// <summary>
        /// Returns true if TeamScheduleResource instances are equal
        /// </summary>
        /// <param name="input">Instance of TeamScheduleResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamScheduleResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Oncall == input.Oncall ||
                    (this.Oncall != null &&
                    this.Oncall.Equals(input.Oncall))
                ) && 
                (
                    this.Overrideoncall == input.Overrideoncall ||
                    (this.Overrideoncall != null &&
                    this.Overrideoncall.Equals(input.Overrideoncall))
                ) && 
                (
                    this.PolicyType == input.PolicyType ||
                    (this.PolicyType != null &&
                    this.PolicyType.Equals(input.PolicyType))
                ) && 
                (
                    this.RotationName == input.RotationName ||
                    (this.RotationName != null &&
                    this.RotationName.Equals(input.RotationName))
                ) && 
                (
                    this.ShiftName == input.ShiftName ||
                    (this.ShiftName != null &&
                    this.ShiftName.Equals(input.ShiftName))
                ) && 
                (
                    this.ShiftRoll == input.ShiftRoll ||
                    this.ShiftRoll.Equals(input.ShiftRoll)
                ) && 
                (
                    this.Rolls == input.Rolls ||
                    this.Rolls != null &&
                    input.Rolls != null &&
                    this.Rolls.SequenceEqual(input.Rolls)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Oncall != null)
                    hashCode = hashCode * 59 + this.Oncall.GetHashCode();
                if (this.Overrideoncall != null)
                    hashCode = hashCode * 59 + this.Overrideoncall.GetHashCode();
                if (this.PolicyType != null)
                    hashCode = hashCode * 59 + this.PolicyType.GetHashCode();
                if (this.RotationName != null)
                    hashCode = hashCode * 59 + this.RotationName.GetHashCode();
                if (this.ShiftName != null)
                    hashCode = hashCode * 59 + this.ShiftName.GetHashCode();
                hashCode = hashCode * 59 + this.ShiftRoll.GetHashCode();
                if (this.Rolls != null)
                    hashCode = hashCode * 59 + this.Rolls.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
