/* 
 * VictorOps API
 *
 * This API allows you to interact with the VictorOps platform in various ways. Your account may be limited to a total number of API calls per month. Also, some of these API calls have rate limits.  NOTE: In this documentation when creating a sample curl request (clicking the TRY IT OUT! button), in some API viewing interfaces, the '@' in an email address may be encoded. Please note that the REST endpoints will not process the encoded version. Make sure that the encoded character '%40' is changed to its unencoded form before submitting the curl request. 
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TeamScheduleRollResource
    /// </summary>
    [DataContract]
    public partial class TeamScheduleRollResource :  IEquatable<TeamScheduleRollResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamScheduleRollResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TeamScheduleRollResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamScheduleRollResource" /> class.
        /// </summary>
        /// <param name="change">The time the period is scheduled to start (required).</param>
        /// <param name="until">The time the period is scheduled to end (required).</param>
        /// <param name="oncall">The user scheduled on call (if any).</param>
        /// <param name="isRoll">isRoll (required).</param>
        public TeamScheduleRollResource(decimal change = default(decimal), decimal until = default(decimal), string oncall = default(string), bool isRoll = default(bool))
        {
            // to ensure "change" is required (not null)
            if (change == null)
            {
                throw new InvalidDataException("change is a required property for TeamScheduleRollResource and cannot be null");
            }
            else
            {
                this.Change = change;
            }

            // to ensure "until" is required (not null)
            if (until == null)
            {
                throw new InvalidDataException("until is a required property for TeamScheduleRollResource and cannot be null");
            }
            else
            {
                this.Until = until;
            }

            // to ensure "isRoll" is required (not null)
            if (isRoll == null)
            {
                throw new InvalidDataException("isRoll is a required property for TeamScheduleRollResource and cannot be null");
            }
            else
            {
                this.IsRoll = isRoll;
            }

            this.Oncall = oncall;
        }
        
        /// <summary>
        /// The time the period is scheduled to start
        /// </summary>
        /// <value>The time the period is scheduled to start</value>
        [DataMember(Name="change", EmitDefaultValue=false)]
        public decimal Change { get; set; }

        /// <summary>
        /// The time the period is scheduled to end
        /// </summary>
        /// <value>The time the period is scheduled to end</value>
        [DataMember(Name="until", EmitDefaultValue=false)]
        public decimal Until { get; set; }

        /// <summary>
        /// The user scheduled on call (if any)
        /// </summary>
        /// <value>The user scheduled on call (if any)</value>
        [DataMember(Name="oncall", EmitDefaultValue=false)]
        public string Oncall { get; set; }

        /// <summary>
        /// Gets or Sets IsRoll
        /// </summary>
        [DataMember(Name="isRoll", EmitDefaultValue=false)]
        public bool IsRoll { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeamScheduleRollResource {\n");
            sb.Append("  Change: ").Append(Change).Append("\n");
            sb.Append("  Until: ").Append(Until).Append("\n");
            sb.Append("  Oncall: ").Append(Oncall).Append("\n");
            sb.Append("  IsRoll: ").Append(IsRoll).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TeamScheduleRollResource);
        }

        /// <summary>
        /// Returns true if TeamScheduleRollResource instances are equal
        /// </summary>
        /// <param name="input">Instance of TeamScheduleRollResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamScheduleRollResource input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Change == input.Change ||
                    this.Change.Equals(input.Change)
                ) && 
                (
                    this.Until == input.Until ||
                    this.Until.Equals(input.Until)
                ) && 
                (
                    this.Oncall == input.Oncall ||
                    (this.Oncall != null &&
                    this.Oncall.Equals(input.Oncall))
                ) && 
                (
                    this.IsRoll == input.IsRoll ||
                    this.IsRoll.Equals(input.IsRoll)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Change.GetHashCode();
                hashCode = hashCode * 59 + this.Until.GetHashCode();
                if (this.Oncall != null)
                    hashCode = hashCode * 59 + this.Oncall.GetHashCode();
                hashCode = hashCode * 59 + this.IsRoll.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
